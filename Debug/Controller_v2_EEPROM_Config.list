
Controller_v2_EEPROM_Config.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c9c  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08007e64  08007e64  00017e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e8c  08007e8c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007e8c  08007e8c  00017e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e94  08007e94  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e94  08007e94  00017e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e98  08007e98  00017e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007e9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b8  2000000c  08007ea8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003c4  08007ea8  000203c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000167fa  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d60  00000000  00000000  00036879  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015e0  00000000  00000000  0003a5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010eb  00000000  00000000  0003bbc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000257a5  00000000  00000000  0003ccab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c398  00000000  00000000  00062450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dda9e  00000000  00000000  0007e7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005c0c  00000000  00000000  0015c288  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00161e94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08007e4c 	.word	0x08007e4c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08007e4c 	.word	0x08007e4c

08000208 <__aeabi_dmul>:
 8000208:	b570      	push	{r4, r5, r6, lr}
 800020a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800020e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000212:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000216:	bf1d      	ittte	ne
 8000218:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800021c:	ea94 0f0c 	teqne	r4, ip
 8000220:	ea95 0f0c 	teqne	r5, ip
 8000224:	f000 f8de 	bleq	80003e4 <__aeabi_dmul+0x1dc>
 8000228:	442c      	add	r4, r5
 800022a:	ea81 0603 	eor.w	r6, r1, r3
 800022e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000232:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000236:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800023a:	bf18      	it	ne
 800023c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000240:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000244:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000248:	d038      	beq.n	80002bc <__aeabi_dmul+0xb4>
 800024a:	fba0 ce02 	umull	ip, lr, r0, r2
 800024e:	f04f 0500 	mov.w	r5, #0
 8000252:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000256:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800025a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800025e:	f04f 0600 	mov.w	r6, #0
 8000262:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000266:	f09c 0f00 	teq	ip, #0
 800026a:	bf18      	it	ne
 800026c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000270:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000274:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000278:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800027c:	d204      	bcs.n	8000288 <__aeabi_dmul+0x80>
 800027e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000282:	416d      	adcs	r5, r5
 8000284:	eb46 0606 	adc.w	r6, r6, r6
 8000288:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800028c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000290:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000294:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000298:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800029c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002a0:	bf88      	it	hi
 80002a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002a6:	d81e      	bhi.n	80002e6 <__aeabi_dmul+0xde>
 80002a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	pop	{r4, r5, r6, pc}
 80002bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002c0:	ea46 0101 	orr.w	r1, r6, r1
 80002c4:	ea40 0002 	orr.w	r0, r0, r2
 80002c8:	ea81 0103 	eor.w	r1, r1, r3
 80002cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002d0:	bfc2      	ittt	gt
 80002d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002da:	bd70      	popgt	{r4, r5, r6, pc}
 80002dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002e0:	f04f 0e00 	mov.w	lr, #0
 80002e4:	3c01      	subs	r4, #1
 80002e6:	f300 80ab 	bgt.w	8000440 <__aeabi_dmul+0x238>
 80002ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ee:	bfde      	ittt	le
 80002f0:	2000      	movle	r0, #0
 80002f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002f6:	bd70      	pople	{r4, r5, r6, pc}
 80002f8:	f1c4 0400 	rsb	r4, r4, #0
 80002fc:	3c20      	subs	r4, #32
 80002fe:	da35      	bge.n	800036c <__aeabi_dmul+0x164>
 8000300:	340c      	adds	r4, #12
 8000302:	dc1b      	bgt.n	800033c <__aeabi_dmul+0x134>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f305 	lsl.w	r3, r0, r5
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f205 	lsl.w	r2, r1, r5
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000320:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000324:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000328:	fa21 f604 	lsr.w	r6, r1, r4
 800032c:	eb42 0106 	adc.w	r1, r2, r6
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 040c 	rsb	r4, r4, #12
 8000340:	f1c4 0520 	rsb	r5, r4, #32
 8000344:	fa00 f304 	lsl.w	r3, r0, r4
 8000348:	fa20 f005 	lsr.w	r0, r0, r5
 800034c:	fa01 f204 	lsl.w	r2, r1, r4
 8000350:	ea40 0002 	orr.w	r0, r0, r2
 8000354:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000358:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f1c4 0520 	rsb	r5, r4, #32
 8000370:	fa00 f205 	lsl.w	r2, r0, r5
 8000374:	ea4e 0e02 	orr.w	lr, lr, r2
 8000378:	fa20 f304 	lsr.w	r3, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea43 0302 	orr.w	r3, r3, r2
 8000384:	fa21 f004 	lsr.w	r0, r1, r4
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	fa21 f204 	lsr.w	r2, r1, r4
 8000390:	ea20 0002 	bic.w	r0, r0, r2
 8000394:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f094 0f00 	teq	r4, #0
 80003a8:	d10f      	bne.n	80003ca <__aeabi_dmul+0x1c2>
 80003aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003ae:	0040      	lsls	r0, r0, #1
 80003b0:	eb41 0101 	adc.w	r1, r1, r1
 80003b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3c01      	subeq	r4, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1a6>
 80003be:	ea41 0106 	orr.w	r1, r1, r6
 80003c2:	f095 0f00 	teq	r5, #0
 80003c6:	bf18      	it	ne
 80003c8:	4770      	bxne	lr
 80003ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ce:	0052      	lsls	r2, r2, #1
 80003d0:	eb43 0303 	adc.w	r3, r3, r3
 80003d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3d01      	subeq	r5, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1c6>
 80003de:	ea43 0306 	orr.w	r3, r3, r6
 80003e2:	4770      	bx	lr
 80003e4:	ea94 0f0c 	teq	r4, ip
 80003e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ec:	bf18      	it	ne
 80003ee:	ea95 0f0c 	teqne	r5, ip
 80003f2:	d00c      	beq.n	800040e <__aeabi_dmul+0x206>
 80003f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f8:	bf18      	it	ne
 80003fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fe:	d1d1      	bne.n	80003a4 <__aeabi_dmul+0x19c>
 8000400:	ea81 0103 	eor.w	r1, r1, r3
 8000404:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000408:	f04f 0000 	mov.w	r0, #0
 800040c:	bd70      	pop	{r4, r5, r6, pc}
 800040e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000412:	bf06      	itte	eq
 8000414:	4610      	moveq	r0, r2
 8000416:	4619      	moveq	r1, r3
 8000418:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041c:	d019      	beq.n	8000452 <__aeabi_dmul+0x24a>
 800041e:	ea94 0f0c 	teq	r4, ip
 8000422:	d102      	bne.n	800042a <__aeabi_dmul+0x222>
 8000424:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000428:	d113      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800042a:	ea95 0f0c 	teq	r5, ip
 800042e:	d105      	bne.n	800043c <__aeabi_dmul+0x234>
 8000430:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000434:	bf1c      	itt	ne
 8000436:	4610      	movne	r0, r2
 8000438:	4619      	movne	r1, r3
 800043a:	d10a      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800043c:	ea81 0103 	eor.w	r1, r1, r3
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000448:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800044c:	f04f 0000 	mov.w	r0, #0
 8000450:	bd70      	pop	{r4, r5, r6, pc}
 8000452:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000456:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800045a:	bd70      	pop	{r4, r5, r6, pc}

0800045c <__aeabi_drsub>:
 800045c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e002      	b.n	8000468 <__adddf3>
 8000462:	bf00      	nop

08000464 <__aeabi_dsub>:
 8000464:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000468 <__adddf3>:
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800046e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000472:	ea94 0f05 	teq	r4, r5
 8000476:	bf08      	it	eq
 8000478:	ea90 0f02 	teqeq	r0, r2
 800047c:	bf1f      	itttt	ne
 800047e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000482:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000486:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800048a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048e:	f000 80e2 	beq.w	8000656 <__adddf3+0x1ee>
 8000492:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000496:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800049a:	bfb8      	it	lt
 800049c:	426d      	neglt	r5, r5
 800049e:	dd0c      	ble.n	80004ba <__adddf3+0x52>
 80004a0:	442c      	add	r4, r5
 80004a2:	ea80 0202 	eor.w	r2, r0, r2
 80004a6:	ea81 0303 	eor.w	r3, r1, r3
 80004aa:	ea82 0000 	eor.w	r0, r2, r0
 80004ae:	ea83 0101 	eor.w	r1, r3, r1
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	2d36      	cmp	r5, #54	; 0x36
 80004bc:	bf88      	it	hi
 80004be:	bd30      	pophi	{r4, r5, pc}
 80004c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004d0:	d002      	beq.n	80004d8 <__adddf3+0x70>
 80004d2:	4240      	negs	r0, r0
 80004d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004e4:	d002      	beq.n	80004ec <__adddf3+0x84>
 80004e6:	4252      	negs	r2, r2
 80004e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ec:	ea94 0f05 	teq	r4, r5
 80004f0:	f000 80a7 	beq.w	8000642 <__adddf3+0x1da>
 80004f4:	f1a4 0401 	sub.w	r4, r4, #1
 80004f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004fc:	db0d      	blt.n	800051a <__adddf3+0xb2>
 80004fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000502:	fa22 f205 	lsr.w	r2, r2, r5
 8000506:	1880      	adds	r0, r0, r2
 8000508:	f141 0100 	adc.w	r1, r1, #0
 800050c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000510:	1880      	adds	r0, r0, r2
 8000512:	fa43 f305 	asr.w	r3, r3, r5
 8000516:	4159      	adcs	r1, r3
 8000518:	e00e      	b.n	8000538 <__adddf3+0xd0>
 800051a:	f1a5 0520 	sub.w	r5, r5, #32
 800051e:	f10e 0e20 	add.w	lr, lr, #32
 8000522:	2a01      	cmp	r2, #1
 8000524:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000528:	bf28      	it	cs
 800052a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800052e:	fa43 f305 	asr.w	r3, r3, r5
 8000532:	18c0      	adds	r0, r0, r3
 8000534:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	d507      	bpl.n	800054e <__adddf3+0xe6>
 800053e:	f04f 0e00 	mov.w	lr, #0
 8000542:	f1dc 0c00 	rsbs	ip, ip, #0
 8000546:	eb7e 0000 	sbcs.w	r0, lr, r0
 800054a:	eb6e 0101 	sbc.w	r1, lr, r1
 800054e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000552:	d31b      	bcc.n	800058c <__adddf3+0x124>
 8000554:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000558:	d30c      	bcc.n	8000574 <__adddf3+0x10c>
 800055a:	0849      	lsrs	r1, r1, #1
 800055c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000560:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000564:	f104 0401 	add.w	r4, r4, #1
 8000568:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800056c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000570:	f080 809a 	bcs.w	80006a8 <__adddf3+0x240>
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	ea41 0105 	orr.w	r1, r1, r5
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000590:	4140      	adcs	r0, r0
 8000592:	eb41 0101 	adc.w	r1, r1, r1
 8000596:	3c01      	subs	r4, #1
 8000598:	bf28      	it	cs
 800059a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800059e:	d2e9      	bcs.n	8000574 <__adddf3+0x10c>
 80005a0:	f091 0f00 	teq	r1, #0
 80005a4:	bf04      	itt	eq
 80005a6:	4601      	moveq	r1, r0
 80005a8:	2000      	moveq	r0, #0
 80005aa:	fab1 f381 	clz	r3, r1
 80005ae:	bf08      	it	eq
 80005b0:	3320      	addeq	r3, #32
 80005b2:	f1a3 030b 	sub.w	r3, r3, #11
 80005b6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ba:	da0c      	bge.n	80005d6 <__adddf3+0x16e>
 80005bc:	320c      	adds	r2, #12
 80005be:	dd08      	ble.n	80005d2 <__adddf3+0x16a>
 80005c0:	f102 0c14 	add.w	ip, r2, #20
 80005c4:	f1c2 020c 	rsb	r2, r2, #12
 80005c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005cc:	fa21 f102 	lsr.w	r1, r1, r2
 80005d0:	e00c      	b.n	80005ec <__adddf3+0x184>
 80005d2:	f102 0214 	add.w	r2, r2, #20
 80005d6:	bfd8      	it	le
 80005d8:	f1c2 0c20 	rsble	ip, r2, #32
 80005dc:	fa01 f102 	lsl.w	r1, r1, r2
 80005e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005e4:	bfdc      	itt	le
 80005e6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ea:	4090      	lslle	r0, r2
 80005ec:	1ae4      	subs	r4, r4, r3
 80005ee:	bfa2      	ittt	ge
 80005f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005f4:	4329      	orrge	r1, r5
 80005f6:	bd30      	popge	{r4, r5, pc}
 80005f8:	ea6f 0404 	mvn.w	r4, r4
 80005fc:	3c1f      	subs	r4, #31
 80005fe:	da1c      	bge.n	800063a <__adddf3+0x1d2>
 8000600:	340c      	adds	r4, #12
 8000602:	dc0e      	bgt.n	8000622 <__adddf3+0x1ba>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0220 	rsb	r2, r4, #32
 800060c:	fa20 f004 	lsr.w	r0, r0, r4
 8000610:	fa01 f302 	lsl.w	r3, r1, r2
 8000614:	ea40 0003 	orr.w	r0, r0, r3
 8000618:	fa21 f304 	lsr.w	r3, r1, r4
 800061c:	ea45 0103 	orr.w	r1, r5, r3
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f1c4 040c 	rsb	r4, r4, #12
 8000626:	f1c4 0220 	rsb	r2, r4, #32
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 f304 	lsl.w	r3, r1, r4
 8000632:	ea40 0003 	orr.w	r0, r0, r3
 8000636:	4629      	mov	r1, r5
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	fa21 f004 	lsr.w	r0, r1, r4
 800063e:	4629      	mov	r1, r5
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f094 0f00 	teq	r4, #0
 8000646:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800064a:	bf06      	itte	eq
 800064c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000650:	3401      	addeq	r4, #1
 8000652:	3d01      	subne	r5, #1
 8000654:	e74e      	b.n	80004f4 <__adddf3+0x8c>
 8000656:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800065a:	bf18      	it	ne
 800065c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000660:	d029      	beq.n	80006b6 <__adddf3+0x24e>
 8000662:	ea94 0f05 	teq	r4, r5
 8000666:	bf08      	it	eq
 8000668:	ea90 0f02 	teqeq	r0, r2
 800066c:	d005      	beq.n	800067a <__adddf3+0x212>
 800066e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000672:	bf04      	itt	eq
 8000674:	4619      	moveq	r1, r3
 8000676:	4610      	moveq	r0, r2
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	ea91 0f03 	teq	r1, r3
 800067e:	bf1e      	ittt	ne
 8000680:	2100      	movne	r1, #0
 8000682:	2000      	movne	r0, #0
 8000684:	bd30      	popne	{r4, r5, pc}
 8000686:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800068a:	d105      	bne.n	8000698 <__adddf3+0x230>
 800068c:	0040      	lsls	r0, r0, #1
 800068e:	4149      	adcs	r1, r1
 8000690:	bf28      	it	cs
 8000692:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd30      	pop	{r4, r5, pc}
 8000698:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800069c:	bf3c      	itt	cc
 800069e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006a2:	bd30      	popcc	{r4, r5, pc}
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006b0:	f04f 0000 	mov.w	r0, #0
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ba:	bf1a      	itte	ne
 80006bc:	4619      	movne	r1, r3
 80006be:	4610      	movne	r0, r2
 80006c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006c4:	bf1c      	itt	ne
 80006c6:	460b      	movne	r3, r1
 80006c8:	4602      	movne	r2, r0
 80006ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ce:	bf06      	itte	eq
 80006d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006d4:	ea91 0f03 	teqeq	r1, r3
 80006d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	bf00      	nop

080006e0 <__aeabi_ui2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f4:	f04f 0500 	mov.w	r5, #0
 80006f8:	f04f 0100 	mov.w	r1, #0
 80006fc:	e750      	b.n	80005a0 <__adddf3+0x138>
 80006fe:	bf00      	nop

08000700 <__aeabi_i2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000714:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000718:	bf48      	it	mi
 800071a:	4240      	negmi	r0, r0
 800071c:	f04f 0100 	mov.w	r1, #0
 8000720:	e73e      	b.n	80005a0 <__adddf3+0x138>
 8000722:	bf00      	nop

08000724 <__aeabi_f2d>:
 8000724:	0042      	lsls	r2, r0, #1
 8000726:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800072a:	ea4f 0131 	mov.w	r1, r1, rrx
 800072e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000732:	bf1f      	itttt	ne
 8000734:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000738:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800073c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000740:	4770      	bxne	lr
 8000742:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000746:	bf08      	it	eq
 8000748:	4770      	bxeq	lr
 800074a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800074e:	bf04      	itt	eq
 8000750:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000754:	4770      	bxeq	lr
 8000756:	b530      	push	{r4, r5, lr}
 8000758:	f44f 7460 	mov.w	r4, #896	; 0x380
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	e71c      	b.n	80005a0 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_ul2d>:
 8000768:	ea50 0201 	orrs.w	r2, r0, r1
 800076c:	bf08      	it	eq
 800076e:	4770      	bxeq	lr
 8000770:	b530      	push	{r4, r5, lr}
 8000772:	f04f 0500 	mov.w	r5, #0
 8000776:	e00a      	b.n	800078e <__aeabi_l2d+0x16>

08000778 <__aeabi_l2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000786:	d502      	bpl.n	800078e <__aeabi_l2d+0x16>
 8000788:	4240      	negs	r0, r0
 800078a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000792:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000796:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800079a:	f43f aed8 	beq.w	800054e <__adddf3+0xe6>
 800079e:	f04f 0203 	mov.w	r2, #3
 80007a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a6:	bf18      	it	ne
 80007a8:	3203      	addne	r2, #3
 80007aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ae:	bf18      	it	ne
 80007b0:	3203      	addne	r2, #3
 80007b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007b6:	f1c2 0320 	rsb	r3, r2, #32
 80007ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80007be:	fa20 f002 	lsr.w	r0, r0, r2
 80007c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007c6:	ea40 000e 	orr.w	r0, r0, lr
 80007ca:	fa21 f102 	lsr.w	r1, r1, r2
 80007ce:	4414      	add	r4, r2
 80007d0:	e6bd      	b.n	800054e <__adddf3+0xe6>
 80007d2:	bf00      	nop

080007d4 <__aeabi_d2uiz>:
 80007d4:	004a      	lsls	r2, r1, #1
 80007d6:	d211      	bcs.n	80007fc <__aeabi_d2uiz+0x28>
 80007d8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007dc:	d211      	bcs.n	8000802 <__aeabi_d2uiz+0x2e>
 80007de:	d50d      	bpl.n	80007fc <__aeabi_d2uiz+0x28>
 80007e0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007e4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007e8:	d40e      	bmi.n	8000808 <__aeabi_d2uiz+0x34>
 80007ea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007f2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007f6:	fa23 f002 	lsr.w	r0, r3, r2
 80007fa:	4770      	bx	lr
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	4770      	bx	lr
 8000802:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000806:	d102      	bne.n	800080e <__aeabi_d2uiz+0x3a>
 8000808:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800080c:	4770      	bx	lr
 800080e:	f04f 0000 	mov.w	r0, #0
 8000812:	4770      	bx	lr

08000814 <__aeabi_uldivmod>:
 8000814:	b953      	cbnz	r3, 800082c <__aeabi_uldivmod+0x18>
 8000816:	b94a      	cbnz	r2, 800082c <__aeabi_uldivmod+0x18>
 8000818:	2900      	cmp	r1, #0
 800081a:	bf08      	it	eq
 800081c:	2800      	cmpeq	r0, #0
 800081e:	bf1c      	itt	ne
 8000820:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000824:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000828:	f000 b970 	b.w	8000b0c <__aeabi_idiv0>
 800082c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000830:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000834:	f000 f806 	bl	8000844 <__udivmoddi4>
 8000838:	f8dd e004 	ldr.w	lr, [sp, #4]
 800083c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000840:	b004      	add	sp, #16
 8000842:	4770      	bx	lr

08000844 <__udivmoddi4>:
 8000844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000848:	9e08      	ldr	r6, [sp, #32]
 800084a:	460d      	mov	r5, r1
 800084c:	4604      	mov	r4, r0
 800084e:	460f      	mov	r7, r1
 8000850:	2b00      	cmp	r3, #0
 8000852:	d14a      	bne.n	80008ea <__udivmoddi4+0xa6>
 8000854:	428a      	cmp	r2, r1
 8000856:	4694      	mov	ip, r2
 8000858:	d965      	bls.n	8000926 <__udivmoddi4+0xe2>
 800085a:	fab2 f382 	clz	r3, r2
 800085e:	b143      	cbz	r3, 8000872 <__udivmoddi4+0x2e>
 8000860:	fa02 fc03 	lsl.w	ip, r2, r3
 8000864:	f1c3 0220 	rsb	r2, r3, #32
 8000868:	409f      	lsls	r7, r3
 800086a:	fa20 f202 	lsr.w	r2, r0, r2
 800086e:	4317      	orrs	r7, r2
 8000870:	409c      	lsls	r4, r3
 8000872:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000876:	fa1f f58c 	uxth.w	r5, ip
 800087a:	fbb7 f1fe 	udiv	r1, r7, lr
 800087e:	0c22      	lsrs	r2, r4, #16
 8000880:	fb0e 7711 	mls	r7, lr, r1, r7
 8000884:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000888:	fb01 f005 	mul.w	r0, r1, r5
 800088c:	4290      	cmp	r0, r2
 800088e:	d90a      	bls.n	80008a6 <__udivmoddi4+0x62>
 8000890:	eb1c 0202 	adds.w	r2, ip, r2
 8000894:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000898:	f080 811c 	bcs.w	8000ad4 <__udivmoddi4+0x290>
 800089c:	4290      	cmp	r0, r2
 800089e:	f240 8119 	bls.w	8000ad4 <__udivmoddi4+0x290>
 80008a2:	3902      	subs	r1, #2
 80008a4:	4462      	add	r2, ip
 80008a6:	1a12      	subs	r2, r2, r0
 80008a8:	b2a4      	uxth	r4, r4
 80008aa:	fbb2 f0fe 	udiv	r0, r2, lr
 80008ae:	fb0e 2210 	mls	r2, lr, r0, r2
 80008b2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008b6:	fb00 f505 	mul.w	r5, r0, r5
 80008ba:	42a5      	cmp	r5, r4
 80008bc:	d90a      	bls.n	80008d4 <__udivmoddi4+0x90>
 80008be:	eb1c 0404 	adds.w	r4, ip, r4
 80008c2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80008c6:	f080 8107 	bcs.w	8000ad8 <__udivmoddi4+0x294>
 80008ca:	42a5      	cmp	r5, r4
 80008cc:	f240 8104 	bls.w	8000ad8 <__udivmoddi4+0x294>
 80008d0:	4464      	add	r4, ip
 80008d2:	3802      	subs	r0, #2
 80008d4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008d8:	1b64      	subs	r4, r4, r5
 80008da:	2100      	movs	r1, #0
 80008dc:	b11e      	cbz	r6, 80008e6 <__udivmoddi4+0xa2>
 80008de:	40dc      	lsrs	r4, r3
 80008e0:	2300      	movs	r3, #0
 80008e2:	e9c6 4300 	strd	r4, r3, [r6]
 80008e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ea:	428b      	cmp	r3, r1
 80008ec:	d908      	bls.n	8000900 <__udivmoddi4+0xbc>
 80008ee:	2e00      	cmp	r6, #0
 80008f0:	f000 80ed 	beq.w	8000ace <__udivmoddi4+0x28a>
 80008f4:	2100      	movs	r1, #0
 80008f6:	e9c6 0500 	strd	r0, r5, [r6]
 80008fa:	4608      	mov	r0, r1
 80008fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000900:	fab3 f183 	clz	r1, r3
 8000904:	2900      	cmp	r1, #0
 8000906:	d149      	bne.n	800099c <__udivmoddi4+0x158>
 8000908:	42ab      	cmp	r3, r5
 800090a:	d302      	bcc.n	8000912 <__udivmoddi4+0xce>
 800090c:	4282      	cmp	r2, r0
 800090e:	f200 80f8 	bhi.w	8000b02 <__udivmoddi4+0x2be>
 8000912:	1a84      	subs	r4, r0, r2
 8000914:	eb65 0203 	sbc.w	r2, r5, r3
 8000918:	2001      	movs	r0, #1
 800091a:	4617      	mov	r7, r2
 800091c:	2e00      	cmp	r6, #0
 800091e:	d0e2      	beq.n	80008e6 <__udivmoddi4+0xa2>
 8000920:	e9c6 4700 	strd	r4, r7, [r6]
 8000924:	e7df      	b.n	80008e6 <__udivmoddi4+0xa2>
 8000926:	b902      	cbnz	r2, 800092a <__udivmoddi4+0xe6>
 8000928:	deff      	udf	#255	; 0xff
 800092a:	fab2 f382 	clz	r3, r2
 800092e:	2b00      	cmp	r3, #0
 8000930:	f040 8090 	bne.w	8000a54 <__udivmoddi4+0x210>
 8000934:	1a8a      	subs	r2, r1, r2
 8000936:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800093a:	fa1f fe8c 	uxth.w	lr, ip
 800093e:	2101      	movs	r1, #1
 8000940:	fbb2 f5f7 	udiv	r5, r2, r7
 8000944:	fb07 2015 	mls	r0, r7, r5, r2
 8000948:	0c22      	lsrs	r2, r4, #16
 800094a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800094e:	fb0e f005 	mul.w	r0, lr, r5
 8000952:	4290      	cmp	r0, r2
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0x124>
 8000956:	eb1c 0202 	adds.w	r2, ip, r2
 800095a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800095e:	d202      	bcs.n	8000966 <__udivmoddi4+0x122>
 8000960:	4290      	cmp	r0, r2
 8000962:	f200 80cb 	bhi.w	8000afc <__udivmoddi4+0x2b8>
 8000966:	4645      	mov	r5, r8
 8000968:	1a12      	subs	r2, r2, r0
 800096a:	b2a4      	uxth	r4, r4
 800096c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000970:	fb07 2210 	mls	r2, r7, r0, r2
 8000974:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000978:	fb0e fe00 	mul.w	lr, lr, r0
 800097c:	45a6      	cmp	lr, r4
 800097e:	d908      	bls.n	8000992 <__udivmoddi4+0x14e>
 8000980:	eb1c 0404 	adds.w	r4, ip, r4
 8000984:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000988:	d202      	bcs.n	8000990 <__udivmoddi4+0x14c>
 800098a:	45a6      	cmp	lr, r4
 800098c:	f200 80bb 	bhi.w	8000b06 <__udivmoddi4+0x2c2>
 8000990:	4610      	mov	r0, r2
 8000992:	eba4 040e 	sub.w	r4, r4, lr
 8000996:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800099a:	e79f      	b.n	80008dc <__udivmoddi4+0x98>
 800099c:	f1c1 0720 	rsb	r7, r1, #32
 80009a0:	408b      	lsls	r3, r1
 80009a2:	fa22 fc07 	lsr.w	ip, r2, r7
 80009a6:	ea4c 0c03 	orr.w	ip, ip, r3
 80009aa:	fa05 f401 	lsl.w	r4, r5, r1
 80009ae:	fa20 f307 	lsr.w	r3, r0, r7
 80009b2:	40fd      	lsrs	r5, r7
 80009b4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009b8:	4323      	orrs	r3, r4
 80009ba:	fbb5 f8f9 	udiv	r8, r5, r9
 80009be:	fa1f fe8c 	uxth.w	lr, ip
 80009c2:	fb09 5518 	mls	r5, r9, r8, r5
 80009c6:	0c1c      	lsrs	r4, r3, #16
 80009c8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80009cc:	fb08 f50e 	mul.w	r5, r8, lr
 80009d0:	42a5      	cmp	r5, r4
 80009d2:	fa02 f201 	lsl.w	r2, r2, r1
 80009d6:	fa00 f001 	lsl.w	r0, r0, r1
 80009da:	d90b      	bls.n	80009f4 <__udivmoddi4+0x1b0>
 80009dc:	eb1c 0404 	adds.w	r4, ip, r4
 80009e0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80009e4:	f080 8088 	bcs.w	8000af8 <__udivmoddi4+0x2b4>
 80009e8:	42a5      	cmp	r5, r4
 80009ea:	f240 8085 	bls.w	8000af8 <__udivmoddi4+0x2b4>
 80009ee:	f1a8 0802 	sub.w	r8, r8, #2
 80009f2:	4464      	add	r4, ip
 80009f4:	1b64      	subs	r4, r4, r5
 80009f6:	b29d      	uxth	r5, r3
 80009f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80009fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000a00:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a04:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a08:	45a6      	cmp	lr, r4
 8000a0a:	d908      	bls.n	8000a1e <__udivmoddi4+0x1da>
 8000a0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a10:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000a14:	d26c      	bcs.n	8000af0 <__udivmoddi4+0x2ac>
 8000a16:	45a6      	cmp	lr, r4
 8000a18:	d96a      	bls.n	8000af0 <__udivmoddi4+0x2ac>
 8000a1a:	3b02      	subs	r3, #2
 8000a1c:	4464      	add	r4, ip
 8000a1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a22:	fba3 9502 	umull	r9, r5, r3, r2
 8000a26:	eba4 040e 	sub.w	r4, r4, lr
 8000a2a:	42ac      	cmp	r4, r5
 8000a2c:	46c8      	mov	r8, r9
 8000a2e:	46ae      	mov	lr, r5
 8000a30:	d356      	bcc.n	8000ae0 <__udivmoddi4+0x29c>
 8000a32:	d053      	beq.n	8000adc <__udivmoddi4+0x298>
 8000a34:	b156      	cbz	r6, 8000a4c <__udivmoddi4+0x208>
 8000a36:	ebb0 0208 	subs.w	r2, r0, r8
 8000a3a:	eb64 040e 	sbc.w	r4, r4, lr
 8000a3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000a42:	40ca      	lsrs	r2, r1
 8000a44:	40cc      	lsrs	r4, r1
 8000a46:	4317      	orrs	r7, r2
 8000a48:	e9c6 7400 	strd	r7, r4, [r6]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	2100      	movs	r1, #0
 8000a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a54:	f1c3 0120 	rsb	r1, r3, #32
 8000a58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a5c:	fa20 f201 	lsr.w	r2, r0, r1
 8000a60:	fa25 f101 	lsr.w	r1, r5, r1
 8000a64:	409d      	lsls	r5, r3
 8000a66:	432a      	orrs	r2, r5
 8000a68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a6c:	fa1f fe8c 	uxth.w	lr, ip
 8000a70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a74:	fb07 1510 	mls	r5, r7, r0, r1
 8000a78:	0c11      	lsrs	r1, r2, #16
 8000a7a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a7e:	fb00 f50e 	mul.w	r5, r0, lr
 8000a82:	428d      	cmp	r5, r1
 8000a84:	fa04 f403 	lsl.w	r4, r4, r3
 8000a88:	d908      	bls.n	8000a9c <__udivmoddi4+0x258>
 8000a8a:	eb1c 0101 	adds.w	r1, ip, r1
 8000a8e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000a92:	d22f      	bcs.n	8000af4 <__udivmoddi4+0x2b0>
 8000a94:	428d      	cmp	r5, r1
 8000a96:	d92d      	bls.n	8000af4 <__udivmoddi4+0x2b0>
 8000a98:	3802      	subs	r0, #2
 8000a9a:	4461      	add	r1, ip
 8000a9c:	1b49      	subs	r1, r1, r5
 8000a9e:	b292      	uxth	r2, r2
 8000aa0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000aa4:	fb07 1115 	mls	r1, r7, r5, r1
 8000aa8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000aac:	fb05 f10e 	mul.w	r1, r5, lr
 8000ab0:	4291      	cmp	r1, r2
 8000ab2:	d908      	bls.n	8000ac6 <__udivmoddi4+0x282>
 8000ab4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ab8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000abc:	d216      	bcs.n	8000aec <__udivmoddi4+0x2a8>
 8000abe:	4291      	cmp	r1, r2
 8000ac0:	d914      	bls.n	8000aec <__udivmoddi4+0x2a8>
 8000ac2:	3d02      	subs	r5, #2
 8000ac4:	4462      	add	r2, ip
 8000ac6:	1a52      	subs	r2, r2, r1
 8000ac8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000acc:	e738      	b.n	8000940 <__udivmoddi4+0xfc>
 8000ace:	4631      	mov	r1, r6
 8000ad0:	4630      	mov	r0, r6
 8000ad2:	e708      	b.n	80008e6 <__udivmoddi4+0xa2>
 8000ad4:	4639      	mov	r1, r7
 8000ad6:	e6e6      	b.n	80008a6 <__udivmoddi4+0x62>
 8000ad8:	4610      	mov	r0, r2
 8000ada:	e6fb      	b.n	80008d4 <__udivmoddi4+0x90>
 8000adc:	4548      	cmp	r0, r9
 8000ade:	d2a9      	bcs.n	8000a34 <__udivmoddi4+0x1f0>
 8000ae0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ae4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ae8:	3b01      	subs	r3, #1
 8000aea:	e7a3      	b.n	8000a34 <__udivmoddi4+0x1f0>
 8000aec:	4645      	mov	r5, r8
 8000aee:	e7ea      	b.n	8000ac6 <__udivmoddi4+0x282>
 8000af0:	462b      	mov	r3, r5
 8000af2:	e794      	b.n	8000a1e <__udivmoddi4+0x1da>
 8000af4:	4640      	mov	r0, r8
 8000af6:	e7d1      	b.n	8000a9c <__udivmoddi4+0x258>
 8000af8:	46d0      	mov	r8, sl
 8000afa:	e77b      	b.n	80009f4 <__udivmoddi4+0x1b0>
 8000afc:	3d02      	subs	r5, #2
 8000afe:	4462      	add	r2, ip
 8000b00:	e732      	b.n	8000968 <__udivmoddi4+0x124>
 8000b02:	4608      	mov	r0, r1
 8000b04:	e70a      	b.n	800091c <__udivmoddi4+0xd8>
 8000b06:	4464      	add	r4, ip
 8000b08:	3802      	subs	r0, #2
 8000b0a:	e742      	b.n	8000992 <__udivmoddi4+0x14e>

08000b0c <__aeabi_idiv0>:
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop

08000b10 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b16:	463b      	mov	r3, r7
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b22:	4b59      	ldr	r3, [pc, #356]	; (8000c88 <MX_ADC1_Init+0x178>)
 8000b24:	4a59      	ldr	r2, [pc, #356]	; (8000c8c <MX_ADC1_Init+0x17c>)
 8000b26:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b28:	4b57      	ldr	r3, [pc, #348]	; (8000c88 <MX_ADC1_Init+0x178>)
 8000b2a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b2e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b30:	4b55      	ldr	r3, [pc, #340]	; (8000c88 <MX_ADC1_Init+0x178>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000b36:	4b54      	ldr	r3, [pc, #336]	; (8000c88 <MX_ADC1_Init+0x178>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b3c:	4b52      	ldr	r3, [pc, #328]	; (8000c88 <MX_ADC1_Init+0x178>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b42:	4b51      	ldr	r3, [pc, #324]	; (8000c88 <MX_ADC1_Init+0x178>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b4a:	4b4f      	ldr	r3, [pc, #316]	; (8000c88 <MX_ADC1_Init+0x178>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b50:	4b4d      	ldr	r3, [pc, #308]	; (8000c88 <MX_ADC1_Init+0x178>)
 8000b52:	4a4f      	ldr	r2, [pc, #316]	; (8000c90 <MX_ADC1_Init+0x180>)
 8000b54:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b56:	4b4c      	ldr	r3, [pc, #304]	; (8000c88 <MX_ADC1_Init+0x178>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 9;
 8000b5c:	4b4a      	ldr	r3, [pc, #296]	; (8000c88 <MX_ADC1_Init+0x178>)
 8000b5e:	2209      	movs	r2, #9
 8000b60:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b62:	4b49      	ldr	r3, [pc, #292]	; (8000c88 <MX_ADC1_Init+0x178>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b6a:	4b47      	ldr	r3, [pc, #284]	; (8000c88 <MX_ADC1_Init+0x178>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b70:	4845      	ldr	r0, [pc, #276]	; (8000c88 <MX_ADC1_Init+0x178>)
 8000b72:	f002 f85f 	bl	8002c34 <HAL_ADC_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000b7c:	f000 ff78 	bl	8001a70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b80:	2304      	movs	r3, #4
 8000b82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b84:	2301      	movs	r3, #1
 8000b86:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000b88:	2307      	movs	r3, #7
 8000b8a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b8c:	463b      	mov	r3, r7
 8000b8e:	4619      	mov	r1, r3
 8000b90:	483d      	ldr	r0, [pc, #244]	; (8000c88 <MX_ADC1_Init+0x178>)
 8000b92:	f002 f893 	bl	8002cbc <HAL_ADC_ConfigChannel>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000b9c:	f000 ff68 	bl	8001a70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000ba0:	2306      	movs	r3, #6
 8000ba2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ba8:	463b      	mov	r3, r7
 8000baa:	4619      	mov	r1, r3
 8000bac:	4836      	ldr	r0, [pc, #216]	; (8000c88 <MX_ADC1_Init+0x178>)
 8000bae:	f002 f885 	bl	8002cbc <HAL_ADC_ConfigChannel>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000bb8:	f000 ff5a 	bl	8001a70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000bbc:	230b      	movs	r3, #11
 8000bbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bc4:	463b      	mov	r3, r7
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	482f      	ldr	r0, [pc, #188]	; (8000c88 <MX_ADC1_Init+0x178>)
 8000bca:	f002 f877 	bl	8002cbc <HAL_ADC_ConfigChannel>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000bd4:	f000 ff4c 	bl	8001a70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000bd8:	230d      	movs	r3, #13
 8000bda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000bdc:	2304      	movs	r3, #4
 8000bde:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000be0:	463b      	mov	r3, r7
 8000be2:	4619      	mov	r1, r3
 8000be4:	4828      	ldr	r0, [pc, #160]	; (8000c88 <MX_ADC1_Init+0x178>)
 8000be6:	f002 f869 	bl	8002cbc <HAL_ADC_ConfigChannel>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000bf0:	f000 ff3e 	bl	8001a70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000bf4:	230a      	movs	r3, #10
 8000bf6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000bf8:	2305      	movs	r3, #5
 8000bfa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bfc:	463b      	mov	r3, r7
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4821      	ldr	r0, [pc, #132]	; (8000c88 <MX_ADC1_Init+0x178>)
 8000c02:	f002 f85b 	bl	8002cbc <HAL_ADC_ConfigChannel>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000c0c:	f000 ff30 	bl	8001a70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000c10:	2305      	movs	r3, #5
 8000c12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000c14:	2306      	movs	r3, #6
 8000c16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c18:	463b      	mov	r3, r7
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	481a      	ldr	r0, [pc, #104]	; (8000c88 <MX_ADC1_Init+0x178>)
 8000c1e:	f002 f84d 	bl	8002cbc <HAL_ADC_ConfigChannel>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000c28:	f000 ff22 	bl	8001a70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000c2c:	2308      	movs	r3, #8
 8000c2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000c30:	2307      	movs	r3, #7
 8000c32:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c34:	463b      	mov	r3, r7
 8000c36:	4619      	mov	r1, r3
 8000c38:	4813      	ldr	r0, [pc, #76]	; (8000c88 <MX_ADC1_Init+0x178>)
 8000c3a:	f002 f83f 	bl	8002cbc <HAL_ADC_ConfigChannel>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000c44:	f000 ff14 	bl	8001a70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8000c4c:	2308      	movs	r3, #8
 8000c4e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c50:	463b      	mov	r3, r7
 8000c52:	4619      	mov	r1, r3
 8000c54:	480c      	ldr	r0, [pc, #48]	; (8000c88 <MX_ADC1_Init+0x178>)
 8000c56:	f002 f831 	bl	8002cbc <HAL_ADC_ConfigChannel>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8000c60:	f000 ff06 	bl	8001a70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000c64:	2311      	movs	r3, #17
 8000c66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8000c68:	2309      	movs	r3, #9
 8000c6a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c6c:	463b      	mov	r3, r7
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4805      	ldr	r0, [pc, #20]	; (8000c88 <MX_ADC1_Init+0x178>)
 8000c72:	f002 f823 	bl	8002cbc <HAL_ADC_ConfigChannel>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000c7c:	f000 fef8 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c80:	bf00      	nop
 8000c82:	3710      	adds	r7, #16
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20000028 	.word	0x20000028
 8000c8c:	40012000 	.word	0x40012000
 8000c90:	0f000001 	.word	0x0f000001

08000c94 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08c      	sub	sp, #48	; 0x30
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	f107 031c 	add.w	r3, r7, #28
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a49      	ldr	r2, [pc, #292]	; (8000dd8 <HAL_ADC_MspInit+0x144>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	f040 808b 	bne.w	8000dce <HAL_ADC_MspInit+0x13a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61bb      	str	r3, [r7, #24]
 8000cbc:	4b47      	ldr	r3, [pc, #284]	; (8000ddc <HAL_ADC_MspInit+0x148>)
 8000cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc0:	4a46      	ldr	r2, [pc, #280]	; (8000ddc <HAL_ADC_MspInit+0x148>)
 8000cc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cc6:	6453      	str	r3, [r2, #68]	; 0x44
 8000cc8:	4b44      	ldr	r3, [pc, #272]	; (8000ddc <HAL_ADC_MspInit+0x148>)
 8000cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cd0:	61bb      	str	r3, [r7, #24]
 8000cd2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
 8000cd8:	4b40      	ldr	r3, [pc, #256]	; (8000ddc <HAL_ADC_MspInit+0x148>)
 8000cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cdc:	4a3f      	ldr	r2, [pc, #252]	; (8000ddc <HAL_ADC_MspInit+0x148>)
 8000cde:	f043 0304 	orr.w	r3, r3, #4
 8000ce2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce4:	4b3d      	ldr	r3, [pc, #244]	; (8000ddc <HAL_ADC_MspInit+0x148>)
 8000ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce8:	f003 0304 	and.w	r3, r3, #4
 8000cec:	617b      	str	r3, [r7, #20]
 8000cee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	4b39      	ldr	r3, [pc, #228]	; (8000ddc <HAL_ADC_MspInit+0x148>)
 8000cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf8:	4a38      	ldr	r2, [pc, #224]	; (8000ddc <HAL_ADC_MspInit+0x148>)
 8000cfa:	f043 0301 	orr.w	r3, r3, #1
 8000cfe:	6313      	str	r3, [r2, #48]	; 0x30
 8000d00:	4b36      	ldr	r3, [pc, #216]	; (8000ddc <HAL_ADC_MspInit+0x148>)
 8000d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	4b32      	ldr	r3, [pc, #200]	; (8000ddc <HAL_ADC_MspInit+0x148>)
 8000d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d14:	4a31      	ldr	r2, [pc, #196]	; (8000ddc <HAL_ADC_MspInit+0x148>)
 8000d16:	f043 0302 	orr.w	r3, r3, #2
 8000d1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1c:	4b2f      	ldr	r3, [pc, #188]	; (8000ddc <HAL_ADC_MspInit+0x148>)
 8000d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d20:	f003 0302 	and.w	r3, r3, #2
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 8000d28:	230b      	movs	r3, #11
 8000d2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d34:	f107 031c 	add.w	r3, r7, #28
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4829      	ldr	r0, [pc, #164]	; (8000de0 <HAL_ADC_MspInit+0x14c>)
 8000d3c:	f002 fe86 	bl	8003a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000d40:	2374      	movs	r3, #116	; 0x74
 8000d42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d44:	2303      	movs	r3, #3
 8000d46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4c:	f107 031c 	add.w	r3, r7, #28
 8000d50:	4619      	mov	r1, r3
 8000d52:	4824      	ldr	r0, [pc, #144]	; (8000de4 <HAL_ADC_MspInit+0x150>)
 8000d54:	f002 fe7a 	bl	8003a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d64:	f107 031c 	add.w	r3, r7, #28
 8000d68:	4619      	mov	r1, r3
 8000d6a:	481f      	ldr	r0, [pc, #124]	; (8000de8 <HAL_ADC_MspInit+0x154>)
 8000d6c:	f002 fe6e 	bl	8003a4c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000d70:	4b1e      	ldr	r3, [pc, #120]	; (8000dec <HAL_ADC_MspInit+0x158>)
 8000d72:	4a1f      	ldr	r2, [pc, #124]	; (8000df0 <HAL_ADC_MspInit+0x15c>)
 8000d74:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000d76:	4b1d      	ldr	r3, [pc, #116]	; (8000dec <HAL_ADC_MspInit+0x158>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d7c:	4b1b      	ldr	r3, [pc, #108]	; (8000dec <HAL_ADC_MspInit+0x158>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d82:	4b1a      	ldr	r3, [pc, #104]	; (8000dec <HAL_ADC_MspInit+0x158>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d88:	4b18      	ldr	r3, [pc, #96]	; (8000dec <HAL_ADC_MspInit+0x158>)
 8000d8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d8e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d90:	4b16      	ldr	r3, [pc, #88]	; (8000dec <HAL_ADC_MspInit+0x158>)
 8000d92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d96:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d98:	4b14      	ldr	r3, [pc, #80]	; (8000dec <HAL_ADC_MspInit+0x158>)
 8000d9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d9e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000da0:	4b12      	ldr	r3, [pc, #72]	; (8000dec <HAL_ADC_MspInit+0x158>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000da6:	4b11      	ldr	r3, [pc, #68]	; (8000dec <HAL_ADC_MspInit+0x158>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dac:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <HAL_ADC_MspInit+0x158>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000db2:	480e      	ldr	r0, [pc, #56]	; (8000dec <HAL_ADC_MspInit+0x158>)
 8000db4:	f002 face 	bl	8003354 <HAL_DMA_Init>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <HAL_ADC_MspInit+0x12e>
    {
      Error_Handler();
 8000dbe:	f000 fe57 	bl	8001a70 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a09      	ldr	r2, [pc, #36]	; (8000dec <HAL_ADC_MspInit+0x158>)
 8000dc6:	639a      	str	r2, [r3, #56]	; 0x38
 8000dc8:	4a08      	ldr	r2, [pc, #32]	; (8000dec <HAL_ADC_MspInit+0x158>)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000dce:	bf00      	nop
 8000dd0:	3730      	adds	r7, #48	; 0x30
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40012000 	.word	0x40012000
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40020800 	.word	0x40020800
 8000de4:	40020000 	.word	0x40020000
 8000de8:	40020400 	.word	0x40020400
 8000dec:	20000070 	.word	0x20000070
 8000df0:	40026410 	.word	0x40026410

08000df4 <defaultConfig>:
	}
	GlobalConfig = *conf;
	return ConfigTrue;
}

tConfigReturn defaultConfig(tConfig *conf) {
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
	conf->config_size = sizeof(tConfig);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f042 0224 	orr.w	r2, r2, #36	; 0x24
 8000e04:	701a      	strb	r2, [r3, #0]
 8000e06:	2200      	movs	r2, #0
 8000e08:	705a      	strb	r2, [r3, #1]
	conf->bb_pot_total = 20000;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f042 0220 	orr.w	r2, r2, #32
 8000e12:	729a      	strb	r2, [r3, #10]
 8000e14:	2200      	movs	r2, #0
 8000e16:	f042 024e 	orr.w	r2, r2, #78	; 0x4e
 8000e1a:	72da      	strb	r2, [r3, #11]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	731a      	strb	r2, [r3, #12]
 8000e20:	2200      	movs	r2, #0
 8000e22:	735a      	strb	r2, [r3, #13]
	conf->stw_pot_total = 10000;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2200      	movs	r2, #0
 8000e28:	f042 0210 	orr.w	r2, r2, #16
 8000e2c:	739a      	strb	r2, [r3, #14]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8000e34:	73da      	strb	r2, [r3, #15]
 8000e36:	2200      	movs	r2, #0
 8000e38:	741a      	strb	r2, [r3, #16]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	745a      	strb	r2, [r3, #17]
	conf->R1 = 1000;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2200      	movs	r2, #0
 8000e42:	f062 0217 	orn	r2, r2, #23
 8000e46:	749a      	strb	r2, [r3, #18]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f042 0203 	orr.w	r2, r2, #3
 8000e4e:	74da      	strb	r2, [r3, #19]
 8000e50:	2200      	movs	r2, #0
 8000e52:	751a      	strb	r2, [r3, #20]
 8000e54:	2200      	movs	r2, #0
 8000e56:	755a      	strb	r2, [r3, #21]
	conf->R2 = 2000;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f062 022f 	orn	r2, r2, #47	; 0x2f
 8000e60:	759a      	strb	r2, [r3, #22]
 8000e62:	2200      	movs	r2, #0
 8000e64:	f042 0207 	orr.w	r2, r2, #7
 8000e68:	75da      	strb	r2, [r3, #23]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	761a      	strb	r2, [r3, #24]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	765a      	strb	r2, [r3, #25]
	conf->vpot = 5 * 1000;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2200      	movs	r2, #0
 8000e76:	f062 0277 	orn	r2, r2, #119	; 0x77
 8000e7a:	769a      	strb	r2, [r3, #26]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f042 0213 	orr.w	r2, r2, #19
 8000e82:	76da      	strb	r2, [r3, #27]
	conf->sw_revision = 0x00000000;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2200      	movs	r2, #0
 8000e88:	719a      	strb	r2, [r3, #6]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	71da      	strb	r2, [r3, #7]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	721a      	strb	r2, [r3, #8]
 8000e92:	2200      	movs	r2, #0
 8000e94:	725a      	strb	r2, [r3, #9]
	conf->hw_revision = 0x00010100;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	709a      	strb	r2, [r3, #2]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f042 0201 	orr.w	r2, r2, #1
 8000ea2:	70da      	strb	r2, [r3, #3]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f042 0201 	orr.w	r2, r2, #1
 8000eaa:	711a      	strb	r2, [r3, #4]
 8000eac:	2200      	movs	r2, #0
 8000eae:	715a      	strb	r2, [r3, #5]
	conf->baudrate = 115200;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	771a      	strb	r2, [r3, #28]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f062 023d 	orn	r2, r2, #61	; 0x3d
 8000ebc:	775a      	strb	r2, [r3, #29]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f042 0201 	orr.w	r2, r2, #1
 8000ec4:	779a      	strb	r2, [r3, #30]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	77da      	strb	r2, [r3, #31]
	return ConfigTrue;
 8000eca:	2300      	movs	r3, #0
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <MX_CRC_Init+0x20>)
 8000ede:	4a07      	ldr	r2, [pc, #28]	; (8000efc <MX_CRC_Init+0x24>)
 8000ee0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000ee2:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <MX_CRC_Init+0x20>)
 8000ee4:	f002 fa19 	bl	800331a <HAL_CRC_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000eee:	f000 fdbf 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	200000f4 	.word	0x200000f4
 8000efc:	40023000 	.word	0x40023000

08000f00 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a0b      	ldr	r2, [pc, #44]	; (8000f3c <HAL_CRC_MspInit+0x3c>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d10d      	bne.n	8000f2e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <HAL_CRC_MspInit+0x40>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a09      	ldr	r2, [pc, #36]	; (8000f40 <HAL_CRC_MspInit+0x40>)
 8000f1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b07      	ldr	r3, [pc, #28]	; (8000f40 <HAL_CRC_MspInit+0x40>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000f2e:	bf00      	nop
 8000f30:	3714      	adds	r7, #20
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	40023000 	.word	0x40023000
 8000f40:	40023800 	.word	0x40023800

08000f44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f48:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <__NVIC_GetPriorityGrouping+0x18>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	0a1b      	lsrs	r3, r3, #8
 8000f4e:	f003 0307 	and.w	r3, r3, #7
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	db0b      	blt.n	8000f8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	f003 021f 	and.w	r2, r3, #31
 8000f78:	4907      	ldr	r1, [pc, #28]	; (8000f98 <__NVIC_EnableIRQ+0x38>)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	095b      	lsrs	r3, r3, #5
 8000f80:	2001      	movs	r0, #1
 8000f82:	fa00 f202 	lsl.w	r2, r0, r2
 8000f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	e000e100 	.word	0xe000e100

08000f9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	6039      	str	r1, [r7, #0]
 8000fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	db0a      	blt.n	8000fc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	490c      	ldr	r1, [pc, #48]	; (8000fe8 <__NVIC_SetPriority+0x4c>)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	0112      	lsls	r2, r2, #4
 8000fbc:	b2d2      	uxtb	r2, r2
 8000fbe:	440b      	add	r3, r1
 8000fc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc4:	e00a      	b.n	8000fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4908      	ldr	r1, [pc, #32]	; (8000fec <__NVIC_SetPriority+0x50>)
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	f003 030f 	and.w	r3, r3, #15
 8000fd2:	3b04      	subs	r3, #4
 8000fd4:	0112      	lsls	r2, r2, #4
 8000fd6:	b2d2      	uxtb	r2, r2
 8000fd8:	440b      	add	r3, r1
 8000fda:	761a      	strb	r2, [r3, #24]
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	e000e100 	.word	0xe000e100
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b089      	sub	sp, #36	; 0x24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	f1c3 0307 	rsb	r3, r3, #7
 800100a:	2b04      	cmp	r3, #4
 800100c:	bf28      	it	cs
 800100e:	2304      	movcs	r3, #4
 8001010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3304      	adds	r3, #4
 8001016:	2b06      	cmp	r3, #6
 8001018:	d902      	bls.n	8001020 <NVIC_EncodePriority+0x30>
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3b03      	subs	r3, #3
 800101e:	e000      	b.n	8001022 <NVIC_EncodePriority+0x32>
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001024:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43da      	mvns	r2, r3
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	401a      	ands	r2, r3
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001038:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	fa01 f303 	lsl.w	r3, r1, r3
 8001042:	43d9      	mvns	r1, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001048:	4313      	orrs	r3, r2
         );
}
 800104a:	4618      	mov	r0, r3
 800104c:	3724      	adds	r7, #36	; 0x24
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
	...

08001058 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001060:	4b08      	ldr	r3, [pc, #32]	; (8001084 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001062:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001064:	4907      	ldr	r1, [pc, #28]	; (8001084 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4313      	orrs	r3, r2
 800106a:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800106e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4013      	ands	r3, r2
 8001074:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001076:	68fb      	ldr	r3, [r7, #12]
}
 8001078:	bf00      	nop
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	40023800 	.word	0x40023800

08001088 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 800108c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001090:	f7ff ffe2 	bl	8001058 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8001094:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001098:	f7ff ffde 	bl	8001058 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800109c:	2200      	movs	r2, #0
 800109e:	2100      	movs	r1, #0
 80010a0:	200c      	movs	r0, #12
 80010a2:	f002 f904 	bl	80032ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80010a6:	200c      	movs	r0, #12
 80010a8:	f002 f91d 	bl	80032e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80010ac:	2200      	movs	r2, #0
 80010ae:	2100      	movs	r1, #0
 80010b0:	200e      	movs	r0, #14
 80010b2:	f002 f8fc 	bl	80032ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80010b6:	200e      	movs	r0, #14
 80010b8:	f002 f915 	bl	80032e6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80010bc:	2200      	movs	r2, #0
 80010be:	2100      	movs	r1, #0
 80010c0:	2038      	movs	r0, #56	; 0x38
 80010c2:	f002 f8f4 	bl	80032ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80010c6:	2038      	movs	r0, #56	; 0x38
 80010c8:	f002 f90d 	bl	80032e6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80010cc:	f7ff ff3a 	bl	8000f44 <__NVIC_GetPriorityGrouping>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2200      	movs	r2, #0
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff ff8a 	bl	8000ff0 <NVIC_EncodePriority>
 80010dc:	4603      	mov	r3, r0
 80010de:	4619      	mov	r1, r3
 80010e0:	203a      	movs	r0, #58	; 0x3a
 80010e2:	f7ff ff5b 	bl	8000f9c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80010e6:	203a      	movs	r0, #58	; 0x3a
 80010e8:	f7ff ff3a 	bl	8000f60 <__NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80010ec:	f7ff ff2a 	bl	8000f44 <__NVIC_GetPriorityGrouping>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2200      	movs	r2, #0
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff ff7a 	bl	8000ff0 <NVIC_EncodePriority>
 80010fc:	4603      	mov	r3, r0
 80010fe:	4619      	mov	r1, r3
 8001100:	2046      	movs	r0, #70	; 0x46
 8001102:	f7ff ff4b 	bl	8000f9c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001106:	2046      	movs	r0, #70	; 0x46
 8001108:	f7ff ff2a 	bl	8000f60 <__NVIC_EnableIRQ>

}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}

08001110 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 800111a:	4a13      	ldr	r2, [pc, #76]	; (8001168 <LL_SYSCFG_SetEXTISource+0x58>)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	b2db      	uxtb	r3, r3
 8001120:	3302      	adds	r3, #2
 8001122:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	0c1b      	lsrs	r3, r3, #16
 800112a:	43db      	mvns	r3, r3
 800112c:	ea02 0103 	and.w	r1, r2, r3
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	0c1b      	lsrs	r3, r3, #16
 8001134:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	fa93 f3a3 	rbit	r3, r3
 800113c:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	fab3 f383 	clz	r3, r3
 8001144:	b2db      	uxtb	r3, r3
 8001146:	461a      	mov	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	fa03 f202 	lsl.w	r2, r3, r2
 800114e:	4806      	ldr	r0, [pc, #24]	; (8001168 <LL_SYSCFG_SetEXTISource+0x58>)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	b2db      	uxtb	r3, r3
 8001154:	430a      	orrs	r2, r1
 8001156:	3302      	adds	r3, #2
 8001158:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800115c:	bf00      	nop
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	40013800 	.word	0x40013800

0800116c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800116c:	b480      	push	{r7}
 800116e:	b089      	sub	sp, #36	; 0x24
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	fa93 f3a3 	rbit	r3, r3
 8001186:	613b      	str	r3, [r7, #16]
  return result;
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	fab3 f383 	clz	r3, r3
 800118e:	b2db      	uxtb	r3, r3
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	2103      	movs	r1, #3
 8001194:	fa01 f303 	lsl.w	r3, r1, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	401a      	ands	r2, r3
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	fa93 f3a3 	rbit	r3, r3
 80011a6:	61bb      	str	r3, [r7, #24]
  return result;
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	fab3 f383 	clz	r3, r3
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	fa01 f303 	lsl.w	r3, r1, r3
 80011b8:	431a      	orrs	r2, r3
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	601a      	str	r2, [r3, #0]
}
 80011be:	bf00      	nop
 80011c0:	3724      	adds	r7, #36	; 0x24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80011ca:	b480      	push	{r7}
 80011cc:	b089      	sub	sp, #36	; 0x24
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	60f8      	str	r0, [r7, #12]
 80011d2:	60b9      	str	r1, [r7, #8]
 80011d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	68da      	ldr	r2, [r3, #12]
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	fa93 f3a3 	rbit	r3, r3
 80011e4:	613b      	str	r3, [r7, #16]
  return result;
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	fab3 f383 	clz	r3, r3
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	2103      	movs	r1, #3
 80011f2:	fa01 f303 	lsl.w	r3, r1, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	401a      	ands	r2, r3
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	fa93 f3a3 	rbit	r3, r3
 8001204:	61bb      	str	r3, [r7, #24]
  return result;
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	fab3 f383 	clz	r3, r3
 800120c:	b2db      	uxtb	r3, r3
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	6879      	ldr	r1, [r7, #4]
 8001212:	fa01 f303 	lsl.w	r3, r1, r3
 8001216:	431a      	orrs	r2, r3
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	60da      	str	r2, [r3, #12]
}
 800121c:	bf00      	nop
 800121e:	3724      	adds	r7, #36	; 0x24
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	041a      	lsls	r2, r3, #16
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	619a      	str	r2, [r3, #24]
}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
	...

08001248 <LL_AHB1_GRP1_EnableClock>:
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001250:	4b08      	ldr	r3, [pc, #32]	; (8001274 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001252:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001254:	4907      	ldr	r1, [pc, #28]	; (8001274 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4313      	orrs	r3, r2
 800125a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800125c:	4b05      	ldr	r3, [pc, #20]	; (8001274 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800125e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4013      	ands	r3, r2
 8001264:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001266:	68fb      	ldr	r3, [r7, #12]
}
 8001268:	bf00      	nop
 800126a:	3714      	adds	r7, #20
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	40023800 	.word	0x40023800

08001278 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b088      	sub	sp, #32
 800127c:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800127e:	f107 0318 	add.w	r3, r7, #24
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	463b      	mov	r3, r7
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]
 8001294:	611a      	str	r2, [r3, #16]
 8001296:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001298:	2004      	movs	r0, #4
 800129a:	f7ff ffd5 	bl	8001248 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800129e:	2080      	movs	r0, #128	; 0x80
 80012a0:	f7ff ffd2 	bl	8001248 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80012a4:	2001      	movs	r0, #1
 80012a6:	f7ff ffcf 	bl	8001248 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80012aa:	2002      	movs	r0, #2
 80012ac:	f7ff ffcc 	bl	8001248 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80012b0:	2008      	movs	r0, #8
 80012b2:	f7ff ffc9 	bl	8001248 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, M4_DIR_Pin|STW_EN_Pin|M2_DIR_Pin|M1_DIR_Pin);
 80012b6:	f245 0114 	movw	r1, #20500	; 0x5014
 80012ba:	4878      	ldr	r0, [pc, #480]	; (800149c <MX_GPIO_Init+0x224>)
 80012bc:	f7ff ffb4 	bl	8001228 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, DEBUG_LED_Pin|M3_DIR_Pin|M6_DIR_Pin|DOF_DIR_Pin
 80012c0:	f24b 4122 	movw	r1, #46114	; 0xb422
 80012c4:	4876      	ldr	r0, [pc, #472]	; (80014a0 <MX_GPIO_Init+0x228>)
 80012c6:	f7ff ffaf 	bl	8001228 <LL_GPIO_ResetOutputPin>
                          |DELTA_MGNT_Pin|DOF_EN_Pin);

  /**/
  LL_GPIO_ResetOutputPin(M5_DIR_GPIO_Port, M5_DIR_Pin);
 80012ca:	2104      	movs	r1, #4
 80012cc:	4875      	ldr	r0, [pc, #468]	; (80014a4 <MX_GPIO_Init+0x22c>)
 80012ce:	f7ff ffab 	bl	8001228 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 80012d2:	4975      	ldr	r1, [pc, #468]	; (80014a8 <MX_GPIO_Init+0x230>)
 80012d4:	2002      	movs	r0, #2
 80012d6:	f7ff ff1b 	bl	8001110 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 80012da:	4974      	ldr	r1, [pc, #464]	; (80014ac <MX_GPIO_Init+0x234>)
 80012dc:	2002      	movs	r0, #2
 80012de:	f7ff ff17 	bl	8001110 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE2);
 80012e2:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 80012e6:	2001      	movs	r0, #1
 80012e8:	f7ff ff12 	bl	8001110 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE14);
 80012ec:	4970      	ldr	r1, [pc, #448]	; (80014b0 <MX_GPIO_Init+0x238>)
 80012ee:	2001      	movs	r0, #1
 80012f0:	f7ff ff0e 	bl	8001110 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE12);
 80012f4:	496f      	ldr	r1, [pc, #444]	; (80014b4 <MX_GPIO_Init+0x23c>)
 80012f6:	2000      	movs	r0, #0
 80012f8:	f7ff ff0a 	bl	8001110 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE11);
 80012fc:	496e      	ldr	r1, [pc, #440]	; (80014b8 <MX_GPIO_Init+0x240>)
 80012fe:	2002      	movs	r0, #2
 8001300:	f7ff ff06 	bl	8001110 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8001304:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001308:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 800130a:	2301      	movs	r3, #1
 800130c:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800130e:	2300      	movs	r3, #0
 8001310:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001312:	2301      	movs	r3, #1
 8001314:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001316:	f107 0318 	add.w	r3, r7, #24
 800131a:	4618      	mov	r0, r3
 800131c:	f005 ff52 	bl	80071c4 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8001320:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001324:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001326:	2301      	movs	r3, #1
 8001328:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800132a:	2300      	movs	r3, #0
 800132c:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800132e:	2301      	movs	r3, #1
 8001330:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001332:	f107 0318 	add.w	r3, r7, #24
 8001336:	4618      	mov	r0, r3
 8001338:	f005 ff44 	bl	80071c4 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 800133c:	2304      	movs	r3, #4
 800133e:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001340:	2301      	movs	r3, #1
 8001342:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001344:	2300      	movs	r3, #0
 8001346:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001348:	2301      	movs	r3, #1
 800134a:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 800134c:	f107 0318 	add.w	r3, r7, #24
 8001350:	4618      	mov	r0, r3
 8001352:	f005 ff37 	bl	80071c4 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8001356:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800135a:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 800135c:	2301      	movs	r3, #1
 800135e:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001360:	2300      	movs	r3, #0
 8001362:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001364:	2301      	movs	r3, #1
 8001366:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001368:	f107 0318 	add.w	r3, r7, #24
 800136c:	4618      	mov	r0, r3
 800136e:	f005 ff29 	bl	80071c4 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_12;
 8001372:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001376:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001378:	2301      	movs	r3, #1
 800137a:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800137c:	2300      	movs	r3, #0
 800137e:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001380:	2301      	movs	r3, #1
 8001382:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001384:	f107 0318 	add.w	r3, r7, #24
 8001388:	4618      	mov	r0, r3
 800138a:	f005 ff1b 	bl	80071c4 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_11;
 800138e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001392:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001394:	2301      	movs	r3, #1
 8001396:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001398:	2300      	movs	r3, #0
 800139a:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800139c:	2301      	movs	r3, #1
 800139e:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80013a0:	f107 0318 	add.w	r3, r7, #24
 80013a4:	4618      	mov	r0, r3
 80013a6:	f005 ff0d 	bl	80071c4 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(M2_ENCA_GPIO_Port, M2_ENCA_Pin, LL_GPIO_PULL_NO);
 80013aa:	2200      	movs	r2, #0
 80013ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013b0:	483a      	ldr	r0, [pc, #232]	; (800149c <MX_GPIO_Init+0x224>)
 80013b2:	f7ff ff0a 	bl	80011ca <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(M4_ENCA_GPIO_Port, M4_ENCA_Pin, LL_GPIO_PULL_NO);
 80013b6:	2200      	movs	r2, #0
 80013b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013bc:	4837      	ldr	r0, [pc, #220]	; (800149c <MX_GPIO_Init+0x224>)
 80013be:	f7ff ff04 	bl	80011ca <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(M1_ENCA_GPIO_Port, M1_ENCA_Pin, LL_GPIO_PULL_NO);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2104      	movs	r1, #4
 80013c6:	4836      	ldr	r0, [pc, #216]	; (80014a0 <MX_GPIO_Init+0x228>)
 80013c8:	f7ff feff 	bl	80011ca <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(M3_ENCA_GPIO_Port, M3_ENCA_Pin, LL_GPIO_PULL_NO);
 80013cc:	2200      	movs	r2, #0
 80013ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013d2:	4833      	ldr	r0, [pc, #204]	; (80014a0 <MX_GPIO_Init+0x228>)
 80013d4:	f7ff fef9 	bl	80011ca <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(M5_ENCA_GPIO_Port, M5_ENCA_Pin, LL_GPIO_PULL_NO);
 80013d8:	2200      	movs	r2, #0
 80013da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013de:	4837      	ldr	r0, [pc, #220]	; (80014bc <MX_GPIO_Init+0x244>)
 80013e0:	f7ff fef3 	bl	80011ca <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(M6_ENCA_GPIO_Port, M6_ENCA_Pin, LL_GPIO_PULL_NO);
 80013e4:	2200      	movs	r2, #0
 80013e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013ea:	482c      	ldr	r0, [pc, #176]	; (800149c <MX_GPIO_Init+0x224>)
 80013ec:	f7ff feed 	bl	80011ca <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(M2_ENCA_GPIO_Port, M2_ENCA_Pin, LL_GPIO_MODE_INPUT);
 80013f0:	2200      	movs	r2, #0
 80013f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013f6:	4829      	ldr	r0, [pc, #164]	; (800149c <MX_GPIO_Init+0x224>)
 80013f8:	f7ff feb8 	bl	800116c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(M4_ENCA_GPIO_Port, M4_ENCA_Pin, LL_GPIO_MODE_INPUT);
 80013fc:	2200      	movs	r2, #0
 80013fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001402:	4826      	ldr	r0, [pc, #152]	; (800149c <MX_GPIO_Init+0x224>)
 8001404:	f7ff feb2 	bl	800116c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(M1_ENCA_GPIO_Port, M1_ENCA_Pin, LL_GPIO_MODE_INPUT);
 8001408:	2200      	movs	r2, #0
 800140a:	2104      	movs	r1, #4
 800140c:	4824      	ldr	r0, [pc, #144]	; (80014a0 <MX_GPIO_Init+0x228>)
 800140e:	f7ff fead 	bl	800116c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(M3_ENCA_GPIO_Port, M3_ENCA_Pin, LL_GPIO_MODE_INPUT);
 8001412:	2200      	movs	r2, #0
 8001414:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001418:	4821      	ldr	r0, [pc, #132]	; (80014a0 <MX_GPIO_Init+0x228>)
 800141a:	f7ff fea7 	bl	800116c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(M5_ENCA_GPIO_Port, M5_ENCA_Pin, LL_GPIO_MODE_INPUT);
 800141e:	2200      	movs	r2, #0
 8001420:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001424:	4825      	ldr	r0, [pc, #148]	; (80014bc <MX_GPIO_Init+0x244>)
 8001426:	f7ff fea1 	bl	800116c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(M6_ENCA_GPIO_Port, M6_ENCA_Pin, LL_GPIO_MODE_INPUT);
 800142a:	2200      	movs	r2, #0
 800142c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001430:	481a      	ldr	r0, [pc, #104]	; (800149c <MX_GPIO_Init+0x224>)
 8001432:	f7ff fe9b 	bl	800116c <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = M4_DIR_Pin|STW_EN_Pin|M2_DIR_Pin|M1_DIR_Pin;
 8001436:	f245 0314 	movw	r3, #20500	; 0x5014
 800143a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800143c:	2301      	movs	r3, #1
 800143e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001440:	2300      	movs	r3, #0
 8001442:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001448:	2300      	movs	r3, #0
 800144a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800144c:	463b      	mov	r3, r7
 800144e:	4619      	mov	r1, r3
 8001450:	4812      	ldr	r0, [pc, #72]	; (800149c <MX_GPIO_Init+0x224>)
 8001452:	f006 f83b 	bl	80074cc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|M3_DIR_Pin|M6_DIR_Pin|DOF_DIR_Pin
 8001456:	f24b 4322 	movw	r3, #46114	; 0xb422
 800145a:	603b      	str	r3, [r7, #0]
                          |DELTA_MGNT_Pin|DOF_EN_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800145c:	2301      	movs	r3, #1
 800145e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001460:	2300      	movs	r3, #0
 8001462:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001468:	2300      	movs	r3, #0
 800146a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146c:	463b      	mov	r3, r7
 800146e:	4619      	mov	r1, r3
 8001470:	480b      	ldr	r0, [pc, #44]	; (80014a0 <MX_GPIO_Init+0x228>)
 8001472:	f006 f82b 	bl	80074cc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = M5_DIR_Pin;
 8001476:	2304      	movs	r3, #4
 8001478:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800147a:	2301      	movs	r3, #1
 800147c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800147e:	2300      	movs	r3, #0
 8001480:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(M5_DIR_GPIO_Port, &GPIO_InitStruct);
 800148a:	463b      	mov	r3, r7
 800148c:	4619      	mov	r1, r3
 800148e:	4805      	ldr	r0, [pc, #20]	; (80014a4 <MX_GPIO_Init+0x22c>)
 8001490:	f006 f81c 	bl	80074cc <LL_GPIO_Init>

}
 8001494:	bf00      	nop
 8001496:	3720      	adds	r7, #32
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40020800 	.word	0x40020800
 80014a0:	40020400 	.word	0x40020400
 80014a4:	40020c00 	.word	0x40020c00
 80014a8:	00f00003 	.word	0x00f00003
 80014ac:	f0000003 	.word	0xf0000003
 80014b0:	0f000003 	.word	0x0f000003
 80014b4:	000f0003 	.word	0x000f0003
 80014b8:	f0000002 	.word	0xf0000002
 80014bc:	40020000 	.word	0x40020000

080014c0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014c4:	4b12      	ldr	r3, [pc, #72]	; (8001510 <MX_I2C1_Init+0x50>)
 80014c6:	4a13      	ldr	r2, [pc, #76]	; (8001514 <MX_I2C1_Init+0x54>)
 80014c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014ca:	4b11      	ldr	r3, [pc, #68]	; (8001510 <MX_I2C1_Init+0x50>)
 80014cc:	4a12      	ldr	r2, [pc, #72]	; (8001518 <MX_I2C1_Init+0x58>)
 80014ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014d0:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <MX_I2C1_Init+0x50>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <MX_I2C1_Init+0x50>)
 80014d8:	2200      	movs	r2, #0
 80014da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <MX_I2C1_Init+0x50>)
 80014de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014e4:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <MX_I2C1_Init+0x50>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014ea:	4b09      	ldr	r3, [pc, #36]	; (8001510 <MX_I2C1_Init+0x50>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014f0:	4b07      	ldr	r3, [pc, #28]	; (8001510 <MX_I2C1_Init+0x50>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <MX_I2C1_Init+0x50>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014fc:	4804      	ldr	r0, [pc, #16]	; (8001510 <MX_I2C1_Init+0x50>)
 80014fe:	f002 fc3b 	bl	8003d78 <HAL_I2C_Init>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001508:	f000 fab2 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}
 8001510:	200000fc 	.word	0x200000fc
 8001514:	40005400 	.word	0x40005400
 8001518:	000186a0 	.word	0x000186a0

0800151c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08a      	sub	sp, #40	; 0x28
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a19      	ldr	r2, [pc, #100]	; (80015a0 <HAL_I2C_MspInit+0x84>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d12c      	bne.n	8001598 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <HAL_I2C_MspInit+0x88>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a17      	ldr	r2, [pc, #92]	; (80015a4 <HAL_I2C_MspInit+0x88>)
 8001548:	f043 0302 	orr.w	r3, r3, #2
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <HAL_I2C_MspInit+0x88>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800155a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800155e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001560:	2312      	movs	r3, #18
 8001562:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001568:	2303      	movs	r3, #3
 800156a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800156c:	2304      	movs	r3, #4
 800156e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	4619      	mov	r1, r3
 8001576:	480c      	ldr	r0, [pc, #48]	; (80015a8 <HAL_I2C_MspInit+0x8c>)
 8001578:	f002 fa68 	bl	8003a4c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <HAL_I2C_MspInit+0x88>)
 8001582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001584:	4a07      	ldr	r2, [pc, #28]	; (80015a4 <HAL_I2C_MspInit+0x88>)
 8001586:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800158a:	6413      	str	r3, [r2, #64]	; 0x40
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <HAL_I2C_MspInit+0x88>)
 800158e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001590:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001598:	bf00      	nop
 800159a:	3728      	adds	r7, #40	; 0x28
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40005400 	.word	0x40005400
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40020400 	.word	0x40020400
 80015ac:	00000000 	.word	0x00000000

080015b0 <EEPROMRead>:
union eepromaddr {
	uint16_t byte_addr;
	uint8_t byte_addr_arr[2];
} uAddr;

tEEPROMReturn EEPROMRead(uint16_t byte_addr, uint16_t size, uint8_t *data, uint8_t try_count) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	; 0x28
 80015b4:	af04      	add	r7, sp, #16
 80015b6:	60ba      	str	r2, [r7, #8]
 80015b8:	461a      	mov	r2, r3
 80015ba:	4603      	mov	r3, r0
 80015bc:	81fb      	strh	r3, [r7, #14]
 80015be:	460b      	mov	r3, r1
 80015c0:	81bb      	strh	r3, [r7, #12]
 80015c2:	4613      	mov	r3, r2
 80015c4:	71fb      	strb	r3, [r7, #7]

	if (((uint32_t) byte_addr + (uint32_t) size) > EEPROM_SIZE) {
 80015c6:	89fa      	ldrh	r2, [r7, #14]
 80015c8:	89bb      	ldrh	r3, [r7, #12]
 80015ca:	4413      	add	r3, r2
 80015cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015d0:	d901      	bls.n	80015d6 <EEPROMRead+0x26>
		return EEPROMFalse;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e052      	b.n	800167c <EEPROMRead+0xcc>
	}

	if (data == NULL) {
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d101      	bne.n	80015e0 <EEPROMRead+0x30>
		return EEPROMFalse;
 80015dc:	2301      	movs	r3, #1
 80015de:	e04d      	b.n	800167c <EEPROMRead+0xcc>
	}

	uint16_t timeout = (((1.0 / EEPROM_BUS_SPEED_KHZ * 10) * (2 + size)) * 1e3) + 1;
 80015e0:	89bb      	ldrh	r3, [r7, #12]
 80015e2:	3302      	adds	r3, #2
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff f88b 	bl	8000700 <__aeabi_i2d>
 80015ea:	a32b      	add	r3, pc, #172	; (adr r3, 8001698 <EEPROMRead+0xe8>)
 80015ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f0:	f7fe fe0a 	bl	8000208 <__aeabi_dmul>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	4610      	mov	r0, r2
 80015fa:	4619      	mov	r1, r3
 80015fc:	f04f 0200 	mov.w	r2, #0
 8001600:	4b21      	ldr	r3, [pc, #132]	; (8001688 <EEPROMRead+0xd8>)
 8001602:	f7fe fe01 	bl	8000208 <__aeabi_dmul>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4610      	mov	r0, r2
 800160c:	4619      	mov	r1, r3
 800160e:	f04f 0200 	mov.w	r2, #0
 8001612:	4b1e      	ldr	r3, [pc, #120]	; (800168c <EEPROMRead+0xdc>)
 8001614:	f7fe ff28 	bl	8000468 <__adddf3>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	4610      	mov	r0, r2
 800161e:	4619      	mov	r1, r3
 8001620:	f7ff f8d8 	bl	80007d4 <__aeabi_d2uiz>
 8001624:	4603      	mov	r3, r0
 8001626:	82fb      	strh	r3, [r7, #22]
	while (try_count > 0) {
 8001628:	e024      	b.n	8001674 <EEPROMRead+0xc4>
		uAddr.byte_addr = (byte_addr & EEPROM_BYTE_ADDRESS_MASK) | (EEPROM_BASE_ADDR << 8);
 800162a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800162e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001632:	b21b      	sxth	r3, r3
 8001634:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 8001638:	b21b      	sxth	r3, r3
 800163a:	b29a      	uxth	r2, r3
 800163c:	4b14      	ldr	r3, [pc, #80]	; (8001690 <EEPROMRead+0xe0>)
 800163e:	801a      	strh	r2, [r3, #0]
		if (HAL_I2C_Mem_Read(&hi2c1, uAddr.byte_addr_arr[1] << 1, uAddr.byte_addr_arr[0], 1, data, size, timeout) == HAL_OK) {
 8001640:	4b13      	ldr	r3, [pc, #76]	; (8001690 <EEPROMRead+0xe0>)
 8001642:	785b      	ldrb	r3, [r3, #1]
 8001644:	b29b      	uxth	r3, r3
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	b299      	uxth	r1, r3
 800164a:	4b11      	ldr	r3, [pc, #68]	; (8001690 <EEPROMRead+0xe0>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	b29a      	uxth	r2, r3
 8001650:	8afb      	ldrh	r3, [r7, #22]
 8001652:	9302      	str	r3, [sp, #8]
 8001654:	89bb      	ldrh	r3, [r7, #12]
 8001656:	9301      	str	r3, [sp, #4]
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	9300      	str	r3, [sp, #0]
 800165c:	2301      	movs	r3, #1
 800165e:	480d      	ldr	r0, [pc, #52]	; (8001694 <EEPROMRead+0xe4>)
 8001660:	f002 fec6 	bl	80043f0 <HAL_I2C_Mem_Read>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d101      	bne.n	800166e <EEPROMRead+0xbe>
			return EEPROMTrue;
 800166a:	2300      	movs	r3, #0
 800166c:	e006      	b.n	800167c <EEPROMRead+0xcc>
		}
		else {
			try_count--;
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	3b01      	subs	r3, #1
 8001672:	71fb      	strb	r3, [r7, #7]
	while (try_count > 0) {
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1d7      	bne.n	800162a <EEPROMRead+0x7a>
		}

	}
	return EEPROMFalse;
 800167a:	2301      	movs	r3, #1
}
 800167c:	4618      	mov	r0, r3
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	f3af 8000 	nop.w
 8001688:	408f4000 	.word	0x408f4000
 800168c:	3ff00000 	.word	0x3ff00000
 8001690:	20000150 	.word	0x20000150
 8001694:	200000fc 	.word	0x200000fc
 8001698:	eb1c432d 	.word	0xeb1c432d
 800169c:	3f1a36e2 	.word	0x3f1a36e2

080016a0 <EEPROMWrite>:

tEEPROMReturn EEPROMWrite(uint16_t byte_addr, uint16_t size, uint8_t *data, uint8_t try_count) {
 80016a0:	b590      	push	{r4, r7, lr}
 80016a2:	b08d      	sub	sp, #52	; 0x34
 80016a4:	af04      	add	r7, sp, #16
 80016a6:	60ba      	str	r2, [r7, #8]
 80016a8:	461a      	mov	r2, r3
 80016aa:	4603      	mov	r3, r0
 80016ac:	81fb      	strh	r3, [r7, #14]
 80016ae:	460b      	mov	r3, r1
 80016b0:	81bb      	strh	r3, [r7, #12]
 80016b2:	4613      	mov	r3, r2
 80016b4:	71fb      	strb	r3, [r7, #7]

	if (((uint32_t) byte_addr + (uint32_t) size) > EEPROM_SIZE) {
 80016b6:	89fa      	ldrh	r2, [r7, #14]
 80016b8:	89bb      	ldrh	r3, [r7, #12]
 80016ba:	4413      	add	r3, r2
 80016bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016c0:	d901      	bls.n	80016c6 <EEPROMWrite+0x26>
		return EEPROMFalse;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e08c      	b.n	80017e0 <EEPROMWrite+0x140>
	}

	if (data == NULL) {
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d101      	bne.n	80016d0 <EEPROMWrite+0x30>
		return EEPROMFalse;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e087      	b.n	80017e0 <EEPROMWrite+0x140>
	}

	int32_t remaining_bytes = size;
 80016d0:	89bb      	ldrh	r3, [r7, #12]
 80016d2:	61fb      	str	r3, [r7, #28]
	while ((remaining_bytes > 0) && (try_count > 0)) {
 80016d4:	e07c      	b.n	80017d0 <EEPROMWrite+0x130>
		uAddr.byte_addr = (byte_addr & EEPROM_BYTE_ADDRESS_MASK) | (EEPROM_BASE_ADDR << 8);
 80016d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016de:	b21b      	sxth	r3, r3
 80016e0:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 80016e4:	b21b      	sxth	r3, r3
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	4b41      	ldr	r3, [pc, #260]	; (80017f0 <EEPROMWrite+0x150>)
 80016ea:	801a      	strh	r2, [r3, #0]
		uint8_t bus_op_size = remaining_bytes >= EEPROM_MAX_LEN ? EEPROM_MAX_LEN : remaining_bytes;
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	2b10      	cmp	r3, #16
 80016f0:	bfa8      	it	ge
 80016f2:	2310      	movge	r3, #16
 80016f4:	76fb      	strb	r3, [r7, #27]
		uint16_t timeout = (((1.0 / EEPROM_BUS_SPEED_KHZ * 10) * (2 + bus_op_size)) * 1e3) + 1;
 80016f6:	7efb      	ldrb	r3, [r7, #27]
 80016f8:	3302      	adds	r3, #2
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff f800 	bl	8000700 <__aeabi_i2d>
 8001700:	a339      	add	r3, pc, #228	; (adr r3, 80017e8 <EEPROMWrite+0x148>)
 8001702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001706:	f7fe fd7f 	bl	8000208 <__aeabi_dmul>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	4610      	mov	r0, r2
 8001710:	4619      	mov	r1, r3
 8001712:	f04f 0200 	mov.w	r2, #0
 8001716:	4b37      	ldr	r3, [pc, #220]	; (80017f4 <EEPROMWrite+0x154>)
 8001718:	f7fe fd76 	bl	8000208 <__aeabi_dmul>
 800171c:	4602      	mov	r2, r0
 800171e:	460b      	mov	r3, r1
 8001720:	4610      	mov	r0, r2
 8001722:	4619      	mov	r1, r3
 8001724:	f04f 0200 	mov.w	r2, #0
 8001728:	4b33      	ldr	r3, [pc, #204]	; (80017f8 <EEPROMWrite+0x158>)
 800172a:	f7fe fe9d 	bl	8000468 <__adddf3>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	4610      	mov	r0, r2
 8001734:	4619      	mov	r1, r3
 8001736:	f7ff f84d 	bl	80007d4 <__aeabi_d2uiz>
 800173a:	4603      	mov	r3, r0
 800173c:	833b      	strh	r3, [r7, #24]
		if (HAL_I2C_Mem_Write(&hi2c1, uAddr.byte_addr_arr[1] << 1, uAddr.byte_addr_arr[0], 1, (data + (size - remaining_bytes)), bus_op_size, timeout) == HAL_OK) {
 800173e:	4b2c      	ldr	r3, [pc, #176]	; (80017f0 <EEPROMWrite+0x150>)
 8001740:	785b      	ldrb	r3, [r3, #1]
 8001742:	b29b      	uxth	r3, r3
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	b298      	uxth	r0, r3
 8001748:	4b29      	ldr	r3, [pc, #164]	; (80017f0 <EEPROMWrite+0x150>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	b29c      	uxth	r4, r3
 800174e:	89ba      	ldrh	r2, [r7, #12]
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	461a      	mov	r2, r3
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	4413      	add	r3, r2
 800175a:	7efa      	ldrb	r2, [r7, #27]
 800175c:	b292      	uxth	r2, r2
 800175e:	8b39      	ldrh	r1, [r7, #24]
 8001760:	9102      	str	r1, [sp, #8]
 8001762:	9201      	str	r2, [sp, #4]
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	2301      	movs	r3, #1
 8001768:	4622      	mov	r2, r4
 800176a:	4601      	mov	r1, r0
 800176c:	4823      	ldr	r0, [pc, #140]	; (80017fc <EEPROMWrite+0x15c>)
 800176e:	f002 fd45 	bl	80041fc <HAL_I2C_Mem_Write>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d128      	bne.n	80017ca <EEPROMWrite+0x12a>
			remaining_bytes -= bus_op_size;
 8001778:	7efb      	ldrb	r3, [r7, #27]
 800177a:	69fa      	ldr	r2, [r7, #28]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	61fb      	str	r3, [r7, #28]
			byte_addr += bus_op_size;
 8001780:	7efb      	ldrb	r3, [r7, #27]
 8001782:	b29a      	uxth	r2, r3
 8001784:	89fb      	ldrh	r3, [r7, #14]
 8001786:	4413      	add	r3, r2
 8001788:	81fb      	strh	r3, [r7, #14]
			if (remaining_bytes <= 0) {
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	2b00      	cmp	r3, #0
 800178e:	dc01      	bgt.n	8001794 <EEPROMWrite+0xf4>
				return EEPROMTrue;
 8001790:	2300      	movs	r3, #0
 8001792:	e025      	b.n	80017e0 <EEPROMWrite+0x140>
			}

			uint32_t time = HAL_GetTick();
 8001794:	f001 fa1e 	bl	8002bd4 <HAL_GetTick>
 8001798:	6178      	str	r0, [r7, #20]
			while (HAL_GetTick() - time < EEPROM_WR_SEQ_TIMEOUT) {
 800179a:	e00c      	b.n	80017b6 <EEPROMWrite+0x116>
				uint8_t dummy;
				if (HAL_I2C_Master_Transmit(&hi2c1, EEPROM_BASE_ADDR << 1, &dummy, 1, 1) == HAL_OK) {
 800179c:	f107 0213 	add.w	r2, r7, #19
 80017a0:	2301      	movs	r3, #1
 80017a2:	9300      	str	r3, [sp, #0]
 80017a4:	2301      	movs	r3, #1
 80017a6:	21a0      	movs	r1, #160	; 0xa0
 80017a8:	4814      	ldr	r0, [pc, #80]	; (80017fc <EEPROMWrite+0x15c>)
 80017aa:	f002 fc29 	bl	8004000 <HAL_I2C_Master_Transmit>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d100      	bne.n	80017b6 <EEPROMWrite+0x116>
 80017b4:	e00c      	b.n	80017d0 <EEPROMWrite+0x130>
			while (HAL_GetTick() - time < EEPROM_WR_SEQ_TIMEOUT) {
 80017b6:	f001 fa0d 	bl	8002bd4 <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	f241 3287 	movw	r2, #4999	; 0x1387
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d9e9      	bls.n	800179c <EEPROMWrite+0xfc>
 80017c8:	e002      	b.n	80017d0 <EEPROMWrite+0x130>
					break;
				}
			}
		}
		else {
			try_count--;
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	3b01      	subs	r3, #1
 80017ce:	71fb      	strb	r3, [r7, #7]
	while ((remaining_bytes > 0) && (try_count > 0)) {
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	dd03      	ble.n	80017de <EEPROMWrite+0x13e>
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f47f af7c 	bne.w	80016d6 <EEPROMWrite+0x36>
		}

	}
	return EEPROMFalse;
 80017de:	2301      	movs	r3, #1
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3724      	adds	r7, #36	; 0x24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd90      	pop	{r4, r7, pc}
 80017e8:	eb1c432d 	.word	0xeb1c432d
 80017ec:	3f1a36e2 	.word	0x3f1a36e2
 80017f0:	20000150 	.word	0x20000150
 80017f4:	408f4000 	.word	0x408f4000
 80017f8:	3ff00000 	.word	0x3ff00000
 80017fc:	200000fc 	.word	0x200000fc

08001800 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001802:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800180a:	f001 f97d 	bl	8002b08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800180e:	f000 f8c5 	bl	800199c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001812:	f7ff fd31 	bl	8001278 <MX_GPIO_Init>
  MX_DMA_Init();
 8001816:	f7ff fc37 	bl	8001088 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800181a:	f000 ff6f 	bl	80026fc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800181e:	f001 f82d 	bl	800287c <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001822:	f7ff fe4d 	bl	80014c0 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001826:	f000 f9cb 	bl	8001bc0 <MX_TIM1_Init>
  MX_TIM3_Init();
 800182a:	f000 fa71 	bl	8001d10 <MX_TIM3_Init>
  MX_ADC1_Init();
 800182e:	f7ff f96f 	bl	8000b10 <MX_ADC1_Init>
  MX_TIM5_Init();
 8001832:	f000 fadd 	bl	8001df0 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001836:	f000 fb2f 	bl	8001e98 <MX_TIM8_Init>
  MX_TIM9_Init();
 800183a:	f000 fb85 	bl	8001f48 <MX_TIM9_Init>
  MX_CRC_Init();
 800183e:	f7ff fb4b 	bl	8000ed8 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

	uint8_t wdata[EEPROM_SIZE];
	uint8_t rdata[EEPROM_SIZE];

	for (uint16_t i = 0; i < sizeof(wdata); i++) {
 8001842:	2300      	movs	r3, #0
 8001844:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001848:	f102 020e 	add.w	r2, r2, #14
 800184c:	8013      	strh	r3, [r2, #0]
 800184e:	e01c      	b.n	800188a <main+0x8a>
		wdata[i] = i & 0xFF;
 8001850:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001854:	f103 030e 	add.w	r3, r3, #14
 8001858:	881b      	ldrh	r3, [r3, #0]
 800185a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800185e:	f102 020e 	add.w	r2, r2, #14
 8001862:	8812      	ldrh	r2, [r2, #0]
 8001864:	b2d1      	uxtb	r1, r2
 8001866:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800186a:	f102 0210 	add.w	r2, r2, #16
 800186e:	f6a2 0208 	subw	r2, r2, #2056	; 0x808
 8001872:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i = 0; i < sizeof(wdata); i++) {
 8001874:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001878:	f103 030e 	add.w	r3, r3, #14
 800187c:	881b      	ldrh	r3, [r3, #0]
 800187e:	3301      	adds	r3, #1
 8001880:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001884:	f102 020e 	add.w	r2, r2, #14
 8001888:	8013      	strh	r3, [r2, #0]
 800188a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800188e:	f103 030e 	add.w	r3, r3, #14
 8001892:	881b      	ldrh	r3, [r3, #0]
 8001894:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001898:	d3da      	bcc.n	8001850 <main+0x50>
	}

	tConfig conf;
	defaultConfig(&conf);
 800189a:	f107 0310 	add.w	r3, r7, #16
 800189e:	3b0c      	subs	r3, #12
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff faa7 	bl	8000df4 <defaultConfig>
	conf.R1 = 0; // Linearizer disabled. MUST CONFIGURE ACCORDING TO UNDERLYING BOARD CONFIG if linearizer is required.
 80018a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018aa:	2200      	movs	r2, #0
 80018ac:	f823 2c1a 	strh.w	r2, [r3, #-26]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f823 2c18 	strh.w	r2, [r3, #-24]
	conf.R2 = 0; // Linearizer disabled. MUST CONFIGURE ACCORDING TO UNDERLYING BOARD CONFIG if linearizer is required.
 80018b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018ba:	2200      	movs	r2, #0
 80018bc:	f823 2c16 	strh.w	r2, [r3, #-22]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f823 2c14 	strh.w	r2, [r3, #-20]
#warning "Check real resistor values for Controller v1.1 before programming"
	conf.hw_revision = 0x00020000; //v1.2: 0x00010200
 80018c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018ca:	2200      	movs	r2, #0
 80018cc:	f823 2c2a 	strh.w	r2, [r3, #-42]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f042 0202 	orr.w	r2, r2, #2
 80018d6:	f823 2c28 	strh.w	r2, [r3, #-40]
	conf.sw_revision = 0x00000000;
 80018da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018de:	2200      	movs	r2, #0
 80018e0:	f823 2c26 	strh.w	r2, [r3, #-38]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f823 2c24 	strh.w	r2, [r3, #-36]

	raw.configStruct = conf;
 80018ea:	4a2a      	ldr	r2, [pc, #168]	; (8001994 <main+0x194>)
 80018ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018f0:	f1a3 042c 	sub.w	r4, r3, #44	; 0x2c
 80018f4:	4694      	mov	ip, r2
 80018f6:	f104 0e20 	add.w	lr, r4, #32
 80018fa:	4665      	mov	r5, ip
 80018fc:	4626      	mov	r6, r4
 80018fe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001900:	6028      	str	r0, [r5, #0]
 8001902:	6069      	str	r1, [r5, #4]
 8001904:	60aa      	str	r2, [r5, #8]
 8001906:	60eb      	str	r3, [r5, #12]
 8001908:	3410      	adds	r4, #16
 800190a:	f10c 0c10 	add.w	ip, ip, #16
 800190e:	4574      	cmp	r4, lr
 8001910:	d1f3      	bne.n	80018fa <main+0xfa>
 8001912:	4663      	mov	r3, ip
 8001914:	4622      	mov	r2, r4
 8001916:	6810      	ldr	r0, [r2, #0]
 8001918:	6018      	str	r0, [r3, #0]

	raw.configStruct.crc = CRC_Calculate(raw.arr, sizeof(raw.arr) - sizeof(uint32_t));
 800191a:	2120      	movs	r1, #32
 800191c:	481d      	ldr	r0, [pc, #116]	; (8001994 <main+0x194>)
 800191e:	f001 f88f 	bl	8002a40 <CRC_Calculate>
 8001922:	4603      	mov	r3, r0
 8001924:	4a1b      	ldr	r2, [pc, #108]	; (8001994 <main+0x194>)
 8001926:	6213      	str	r3, [r2, #32]

	EEPROMWrite(0, sizeof(raw.arr), raw.arr, 3);
 8001928:	2303      	movs	r3, #3
 800192a:	4a1a      	ldr	r2, [pc, #104]	; (8001994 <main+0x194>)
 800192c:	2124      	movs	r1, #36	; 0x24
 800192e:	2000      	movs	r0, #0
 8001930:	f7ff feb6 	bl	80016a0 <EEPROMWrite>
	HAL_Delay(5);
 8001934:	2005      	movs	r0, #5
 8001936:	f001 f959 	bl	8002bec <HAL_Delay>
	EEPROMRead(0, sizeof(rdata), rdata, 3);
 800193a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800193e:	3a08      	subs	r2, #8
 8001940:	2303      	movs	r3, #3
 8001942:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001946:	2000      	movs	r0, #0
 8001948:	f7ff fe32 	bl	80015b0 <EEPROMRead>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)		{

		int compare_result = memcmp(raw.arr, rdata, sizeof(raw.arr));
 800194c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001950:	3b08      	subs	r3, #8
 8001952:	2224      	movs	r2, #36	; 0x24
 8001954:	4619      	mov	r1, r3
 8001956:	480f      	ldr	r0, [pc, #60]	; (8001994 <main+0x194>)
 8001958:	f006 fa3c 	bl	8007dd4 <memcmp>
 800195c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001960:	f103 0308 	add.w	r3, r3, #8
 8001964:	6018      	str	r0, [r3, #0]
		if (compare_result == 0) {
 8001966:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800196a:	f103 0308 	add.w	r3, r3, #8
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d107      	bne.n	8001984 <main+0x184>
			HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8001974:	2102      	movs	r1, #2
 8001976:	4808      	ldr	r0, [pc, #32]	; (8001998 <main+0x198>)
 8001978:	f002 f9e4 	bl	8003d44 <HAL_GPIO_TogglePin>
			HAL_Delay(20);
 800197c:	2014      	movs	r0, #20
 800197e:	f001 f935 	bl	8002bec <HAL_Delay>
 8001982:	e7e3      	b.n	800194c <main+0x14c>
		}
		else {
			HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8001984:	2102      	movs	r1, #2
 8001986:	4804      	ldr	r0, [pc, #16]	; (8001998 <main+0x198>)
 8001988:	f002 f9dc 	bl	8003d44 <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 800198c:	20c8      	movs	r0, #200	; 0xc8
 800198e:	f001 f92d 	bl	8002bec <HAL_Delay>
  while (1)		{
 8001992:	e7db      	b.n	800194c <main+0x14c>
 8001994:	200000d0 	.word	0x200000d0
 8001998:	40020400 	.word	0x40020400

0800199c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b094      	sub	sp, #80	; 0x50
 80019a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019a2:	f107 031c 	add.w	r3, r7, #28
 80019a6:	2234      	movs	r2, #52	; 0x34
 80019a8:	2100      	movs	r1, #0
 80019aa:	4618      	mov	r0, r3
 80019ac:	f006 fa22 	bl	8007df4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019b0:	f107 0308 	add.w	r3, r7, #8
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
 80019be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c0:	2300      	movs	r3, #0
 80019c2:	607b      	str	r3, [r7, #4]
 80019c4:	4b28      	ldr	r3, [pc, #160]	; (8001a68 <SystemClock_Config+0xcc>)
 80019c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c8:	4a27      	ldr	r2, [pc, #156]	; (8001a68 <SystemClock_Config+0xcc>)
 80019ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ce:	6413      	str	r3, [r2, #64]	; 0x40
 80019d0:	4b25      	ldr	r3, [pc, #148]	; (8001a68 <SystemClock_Config+0xcc>)
 80019d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d8:	607b      	str	r3, [r7, #4]
 80019da:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019dc:	2300      	movs	r3, #0
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	4b22      	ldr	r3, [pc, #136]	; (8001a6c <SystemClock_Config+0xd0>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a21      	ldr	r2, [pc, #132]	; (8001a6c <SystemClock_Config+0xd0>)
 80019e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019ea:	6013      	str	r3, [r2, #0]
 80019ec:	4b1f      	ldr	r3, [pc, #124]	; (8001a6c <SystemClock_Config+0xd0>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019f4:	603b      	str	r3, [r7, #0]
 80019f6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019f8:	2301      	movs	r3, #1
 80019fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a00:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a02:	2302      	movs	r3, #2
 8001a04:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a06:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a0a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001a0c:	2306      	movs	r3, #6
 8001a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001a10:	2364      	movs	r3, #100	; 0x64
 8001a12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a14:	2302      	movs	r3, #2
 8001a16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a20:	f107 031c 	add.w	r3, r7, #28
 8001a24:	4618      	mov	r0, r3
 8001a26:	f003 fcc7 	bl	80053b8 <HAL_RCC_OscConfig>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001a30:	f000 f81e 	bl	8001a70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a34:	230f      	movs	r3, #15
 8001a36:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a4a:	f107 0308 	add.w	r3, r7, #8
 8001a4e:	2103      	movs	r1, #3
 8001a50:	4618      	mov	r0, r3
 8001a52:	f003 fad1 	bl	8004ff8 <HAL_RCC_ClockConfig>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001a5c:	f000 f808 	bl	8001a70 <Error_Handler>
  }
}
 8001a60:	bf00      	nop
 8001a62:	3750      	adds	r7, #80	; 0x50
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	40007000 	.word	0x40007000

08001a70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a74:	b672      	cpsid	i
}
 8001a76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a78:	e7fe      	b.n	8001a78 <Error_Handler+0x8>
	...

08001a7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	607b      	str	r3, [r7, #4]
 8001a86:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <HAL_MspInit+0x4c>)
 8001a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8a:	4a0f      	ldr	r2, [pc, #60]	; (8001ac8 <HAL_MspInit+0x4c>)
 8001a8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a90:	6453      	str	r3, [r2, #68]	; 0x44
 8001a92:	4b0d      	ldr	r3, [pc, #52]	; (8001ac8 <HAL_MspInit+0x4c>)
 8001a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a9a:	607b      	str	r3, [r7, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	603b      	str	r3, [r7, #0]
 8001aa2:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <HAL_MspInit+0x4c>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	4a08      	ldr	r2, [pc, #32]	; (8001ac8 <HAL_MspInit+0x4c>)
 8001aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aac:	6413      	str	r3, [r2, #64]	; 0x40
 8001aae:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <HAL_MspInit+0x4c>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab6:	603b      	str	r3, [r7, #0]
 8001ab8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	40023800 	.word	0x40023800

08001acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ad0:	e7fe      	b.n	8001ad0 <NMI_Handler+0x4>

08001ad2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ad6:	e7fe      	b.n	8001ad6 <HardFault_Handler+0x4>

08001ad8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001adc:	e7fe      	b.n	8001adc <MemManage_Handler+0x4>

08001ade <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ae2:	e7fe      	b.n	8001ae2 <BusFault_Handler+0x4>

08001ae4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae8:	e7fe      	b.n	8001ae8 <UsageFault_Handler+0x4>

08001aea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b18:	f001 f848 	bl	8002bac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b1c:	bf00      	nop
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001b24:	4802      	ldr	r0, [pc, #8]	; (8001b30 <DMA1_Stream1_IRQHandler+0x10>)
 8001b26:	f001 fd55 	bl	80035d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000300 	.word	0x20000300

08001b34 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001b38:	4802      	ldr	r0, [pc, #8]	; (8001b44 <DMA1_Stream3_IRQHandler+0x10>)
 8001b3a:	f001 fd4b 	bl	80035d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000360 	.word	0x20000360

08001b48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
	...

08001b58 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001b5c:	4802      	ldr	r0, [pc, #8]	; (8001b68 <USART3_IRQHandler+0x10>)
 8001b5e:	f004 fbd3 	bl	8006308 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	200002bc 	.word	0x200002bc

08001b6c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b70:	4802      	ldr	r0, [pc, #8]	; (8001b7c <DMA2_Stream0_IRQHandler+0x10>)
 8001b72:	f001 fd2f 	bl	80035d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000070 	.word	0x20000070

08001b80 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2_Stream2_IRQn 0 */

  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2_Stream7_IRQn 0 */

  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <SystemInit+0x20>)
 8001ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ba6:	4a05      	ldr	r2, [pc, #20]	; (8001bbc <SystemInit+0x20>)
 8001ba8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b092      	sub	sp, #72	; 0x48
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bc6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	611a      	str	r2, [r3, #16]
 8001be0:	615a      	str	r2, [r3, #20]
 8001be2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001be4:	1d3b      	adds	r3, r7, #4
 8001be6:	2220      	movs	r2, #32
 8001be8:	2100      	movs	r1, #0
 8001bea:	4618      	mov	r0, r3
 8001bec:	f006 f902 	bl	8007df4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001bf0:	4b45      	ldr	r3, [pc, #276]	; (8001d08 <MX_TIM1_Init+0x148>)
 8001bf2:	4a46      	ldr	r2, [pc, #280]	; (8001d0c <MX_TIM1_Init+0x14c>)
 8001bf4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001bf6:	4b44      	ldr	r3, [pc, #272]	; (8001d08 <MX_TIM1_Init+0x148>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bfc:	4b42      	ldr	r3, [pc, #264]	; (8001d08 <MX_TIM1_Init+0x148>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001c02:	4b41      	ldr	r3, [pc, #260]	; (8001d08 <MX_TIM1_Init+0x148>)
 8001c04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c08:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c0a:	4b3f      	ldr	r3, [pc, #252]	; (8001d08 <MX_TIM1_Init+0x148>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c10:	4b3d      	ldr	r3, [pc, #244]	; (8001d08 <MX_TIM1_Init+0x148>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c16:	4b3c      	ldr	r3, [pc, #240]	; (8001d08 <MX_TIM1_Init+0x148>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c1c:	483a      	ldr	r0, [pc, #232]	; (8001d08 <MX_TIM1_Init+0x148>)
 8001c1e:	f003 fe4f 	bl	80058c0 <HAL_TIM_PWM_Init>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001c28:	f7ff ff22 	bl	8001a70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c30:	2300      	movs	r3, #0
 8001c32:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c34:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4833      	ldr	r0, [pc, #204]	; (8001d08 <MX_TIM1_Init+0x148>)
 8001c3c:	f004 fa48 	bl	80060d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001c46:	f7ff ff13 	bl	8001a70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c4a:	2360      	movs	r3, #96	; 0x60
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c52:	2300      	movs	r3, #0
 8001c54:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c56:	2300      	movs	r3, #0
 8001c58:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c62:	2300      	movs	r3, #0
 8001c64:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4826      	ldr	r0, [pc, #152]	; (8001d08 <MX_TIM1_Init+0x148>)
 8001c70:	f003 ff1c 	bl	8005aac <HAL_TIM_PWM_ConfigChannel>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001c7a:	f7ff fef9 	bl	8001a70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c82:	2204      	movs	r2, #4
 8001c84:	4619      	mov	r1, r3
 8001c86:	4820      	ldr	r0, [pc, #128]	; (8001d08 <MX_TIM1_Init+0x148>)
 8001c88:	f003 ff10 	bl	8005aac <HAL_TIM_PWM_ConfigChannel>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001c92:	f7ff feed 	bl	8001a70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c9a:	2208      	movs	r2, #8
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	481a      	ldr	r0, [pc, #104]	; (8001d08 <MX_TIM1_Init+0x148>)
 8001ca0:	f003 ff04 	bl	8005aac <HAL_TIM_PWM_ConfigChannel>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8001caa:	f7ff fee1 	bl	8001a70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cb2:	220c      	movs	r2, #12
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4814      	ldr	r0, [pc, #80]	; (8001d08 <MX_TIM1_Init+0x148>)
 8001cb8:	f003 fef8 	bl	8005aac <HAL_TIM_PWM_ConfigChannel>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8001cc2:	f7ff fed5 	bl	8001a70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cde:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ce4:	1d3b      	adds	r3, r7, #4
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4807      	ldr	r0, [pc, #28]	; (8001d08 <MX_TIM1_Init+0x148>)
 8001cea:	f004 fa6d 	bl	80061c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001cf4:	f7ff febc 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001cf8:	4803      	ldr	r0, [pc, #12]	; (8001d08 <MX_TIM1_Init+0x148>)
 8001cfa:	f000 fa37 	bl	800216c <HAL_TIM_MspPostInit>

}
 8001cfe:	bf00      	nop
 8001d00:	3748      	adds	r7, #72	; 0x48
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000154 	.word	0x20000154
 8001d0c:	40010000 	.word	0x40010000

08001d10 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08a      	sub	sp, #40	; 0x28
 8001d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d16:	f107 0320 	add.w	r3, r7, #32
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d20:	1d3b      	adds	r3, r7, #4
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	605a      	str	r2, [r3, #4]
 8001d28:	609a      	str	r2, [r3, #8]
 8001d2a:	60da      	str	r2, [r3, #12]
 8001d2c:	611a      	str	r2, [r3, #16]
 8001d2e:	615a      	str	r2, [r3, #20]
 8001d30:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d32:	4b2d      	ldr	r3, [pc, #180]	; (8001de8 <MX_TIM3_Init+0xd8>)
 8001d34:	4a2d      	ldr	r2, [pc, #180]	; (8001dec <MX_TIM3_Init+0xdc>)
 8001d36:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d38:	4b2b      	ldr	r3, [pc, #172]	; (8001de8 <MX_TIM3_Init+0xd8>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d3e:	4b2a      	ldr	r3, [pc, #168]	; (8001de8 <MX_TIM3_Init+0xd8>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001d44:	4b28      	ldr	r3, [pc, #160]	; (8001de8 <MX_TIM3_Init+0xd8>)
 8001d46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d4a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d4c:	4b26      	ldr	r3, [pc, #152]	; (8001de8 <MX_TIM3_Init+0xd8>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d52:	4b25      	ldr	r3, [pc, #148]	; (8001de8 <MX_TIM3_Init+0xd8>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d58:	4823      	ldr	r0, [pc, #140]	; (8001de8 <MX_TIM3_Init+0xd8>)
 8001d5a:	f003 fdb1 	bl	80058c0 <HAL_TIM_PWM_Init>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001d64:	f7ff fe84 	bl	8001a70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d70:	f107 0320 	add.w	r3, r7, #32
 8001d74:	4619      	mov	r1, r3
 8001d76:	481c      	ldr	r0, [pc, #112]	; (8001de8 <MX_TIM3_Init+0xd8>)
 8001d78:	f004 f9aa 	bl	80060d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001d82:	f7ff fe75 	bl	8001a70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d86:	2360      	movs	r3, #96	; 0x60
 8001d88:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d92:	2300      	movs	r3, #0
 8001d94:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d96:	1d3b      	adds	r3, r7, #4
 8001d98:	2204      	movs	r2, #4
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4812      	ldr	r0, [pc, #72]	; (8001de8 <MX_TIM3_Init+0xd8>)
 8001d9e:	f003 fe85 	bl	8005aac <HAL_TIM_PWM_ConfigChannel>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001da8:	f7ff fe62 	bl	8001a70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001dac:	1d3b      	adds	r3, r7, #4
 8001dae:	2208      	movs	r2, #8
 8001db0:	4619      	mov	r1, r3
 8001db2:	480d      	ldr	r0, [pc, #52]	; (8001de8 <MX_TIM3_Init+0xd8>)
 8001db4:	f003 fe7a 	bl	8005aac <HAL_TIM_PWM_ConfigChannel>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001dbe:	f7ff fe57 	bl	8001a70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001dc2:	1d3b      	adds	r3, r7, #4
 8001dc4:	220c      	movs	r2, #12
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4807      	ldr	r0, [pc, #28]	; (8001de8 <MX_TIM3_Init+0xd8>)
 8001dca:	f003 fe6f 	bl	8005aac <HAL_TIM_PWM_ConfigChannel>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001dd4:	f7ff fe4c 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001dd8:	4803      	ldr	r0, [pc, #12]	; (8001de8 <MX_TIM3_Init+0xd8>)
 8001dda:	f000 f9c7 	bl	800216c <HAL_TIM_MspPostInit>

}
 8001dde:	bf00      	nop
 8001de0:	3728      	adds	r7, #40	; 0x28
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	2000019c 	.word	0x2000019c
 8001dec:	40000400 	.word	0x40000400

08001df0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b08c      	sub	sp, #48	; 0x30
 8001df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001df6:	f107 030c 	add.w	r3, r7, #12
 8001dfa:	2224      	movs	r2, #36	; 0x24
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f005 fff8 	bl	8007df4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e04:	1d3b      	adds	r3, r7, #4
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001e0c:	4b20      	ldr	r3, [pc, #128]	; (8001e90 <MX_TIM5_Init+0xa0>)
 8001e0e:	4a21      	ldr	r2, [pc, #132]	; (8001e94 <MX_TIM5_Init+0xa4>)
 8001e10:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001e12:	4b1f      	ldr	r3, [pc, #124]	; (8001e90 <MX_TIM5_Init+0xa0>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e18:	4b1d      	ldr	r3, [pc, #116]	; (8001e90 <MX_TIM5_Init+0xa0>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001e1e:	4b1c      	ldr	r3, [pc, #112]	; (8001e90 <MX_TIM5_Init+0xa0>)
 8001e20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e24:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e26:	4b1a      	ldr	r3, [pc, #104]	; (8001e90 <MX_TIM5_Init+0xa0>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e2c:	4b18      	ldr	r3, [pc, #96]	; (8001e90 <MX_TIM5_Init+0xa0>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001e32:	2301      	movs	r3, #1
 8001e34:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e36:	2300      	movs	r3, #0
 8001e38:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e46:	2300      	movs	r3, #0
 8001e48:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001e56:	f107 030c 	add.w	r3, r7, #12
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	480c      	ldr	r0, [pc, #48]	; (8001e90 <MX_TIM5_Init+0xa0>)
 8001e5e:	f003 fd7e 	bl	800595e <HAL_TIM_Encoder_Init>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001e68:	f7ff fe02 	bl	8001a70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e70:	2300      	movs	r3, #0
 8001e72:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e74:	1d3b      	adds	r3, r7, #4
 8001e76:	4619      	mov	r1, r3
 8001e78:	4805      	ldr	r0, [pc, #20]	; (8001e90 <MX_TIM5_Init+0xa0>)
 8001e7a:	f004 f929 	bl	80060d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001e84:	f7ff fdf4 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001e88:	bf00      	nop
 8001e8a:	3730      	adds	r7, #48	; 0x30
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	200001e4 	.word	0x200001e4
 8001e94:	40000c00 	.word	0x40000c00

08001e98 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08c      	sub	sp, #48	; 0x30
 8001e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e9e:	f107 030c 	add.w	r3, r7, #12
 8001ea2:	2224      	movs	r2, #36	; 0x24
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f005 ffa4 	bl	8007df4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eac:	1d3b      	adds	r3, r7, #4
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001eb4:	4b22      	ldr	r3, [pc, #136]	; (8001f40 <MX_TIM8_Init+0xa8>)
 8001eb6:	4a23      	ldr	r2, [pc, #140]	; (8001f44 <MX_TIM8_Init+0xac>)
 8001eb8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001eba:	4b21      	ldr	r3, [pc, #132]	; (8001f40 <MX_TIM8_Init+0xa8>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ec0:	4b1f      	ldr	r3, [pc, #124]	; (8001f40 <MX_TIM8_Init+0xa8>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001ec6:	4b1e      	ldr	r3, [pc, #120]	; (8001f40 <MX_TIM8_Init+0xa8>)
 8001ec8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ecc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ece:	4b1c      	ldr	r3, [pc, #112]	; (8001f40 <MX_TIM8_Init+0xa8>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001ed4:	4b1a      	ldr	r3, [pc, #104]	; (8001f40 <MX_TIM8_Init+0xa8>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eda:	4b19      	ldr	r3, [pc, #100]	; (8001f40 <MX_TIM8_Init+0xa8>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001eec:	2300      	movs	r3, #0
 8001eee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001efc:	2300      	movs	r3, #0
 8001efe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001f00:	2300      	movs	r3, #0
 8001f02:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001f04:	f107 030c 	add.w	r3, r7, #12
 8001f08:	4619      	mov	r1, r3
 8001f0a:	480d      	ldr	r0, [pc, #52]	; (8001f40 <MX_TIM8_Init+0xa8>)
 8001f0c:	f003 fd27 	bl	800595e <HAL_TIM_Encoder_Init>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001f16:	f7ff fdab 	bl	8001a70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001f22:	1d3b      	adds	r3, r7, #4
 8001f24:	4619      	mov	r1, r3
 8001f26:	4806      	ldr	r0, [pc, #24]	; (8001f40 <MX_TIM8_Init+0xa8>)
 8001f28:	f004 f8d2 	bl	80060d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8001f32:	f7ff fd9d 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001f36:	bf00      	nop
 8001f38:	3730      	adds	r7, #48	; 0x30
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	2000022c 	.word	0x2000022c
 8001f44:	40010400 	.word	0x40010400

08001f48 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b088      	sub	sp, #32
 8001f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f4e:	1d3b      	adds	r3, r7, #4
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
 8001f5a:	611a      	str	r2, [r3, #16]
 8001f5c:	615a      	str	r2, [r3, #20]
 8001f5e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001f60:	4b1a      	ldr	r3, [pc, #104]	; (8001fcc <MX_TIM9_Init+0x84>)
 8001f62:	4a1b      	ldr	r2, [pc, #108]	; (8001fd0 <MX_TIM9_Init+0x88>)
 8001f64:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001f66:	4b19      	ldr	r3, [pc, #100]	; (8001fcc <MX_TIM9_Init+0x84>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f6c:	4b17      	ldr	r3, [pc, #92]	; (8001fcc <MX_TIM9_Init+0x84>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8001f72:	4b16      	ldr	r3, [pc, #88]	; (8001fcc <MX_TIM9_Init+0x84>)
 8001f74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f78:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f7a:	4b14      	ldr	r3, [pc, #80]	; (8001fcc <MX_TIM9_Init+0x84>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f80:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <MX_TIM9_Init+0x84>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001f86:	4811      	ldr	r0, [pc, #68]	; (8001fcc <MX_TIM9_Init+0x84>)
 8001f88:	f003 fc9a 	bl	80058c0 <HAL_TIM_PWM_Init>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8001f92:	f7ff fd6d 	bl	8001a70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f96:	2360      	movs	r3, #96	; 0x60
 8001f98:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fa6:	1d3b      	adds	r3, r7, #4
 8001fa8:	2204      	movs	r2, #4
 8001faa:	4619      	mov	r1, r3
 8001fac:	4807      	ldr	r0, [pc, #28]	; (8001fcc <MX_TIM9_Init+0x84>)
 8001fae:	f003 fd7d 	bl	8005aac <HAL_TIM_PWM_ConfigChannel>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8001fb8:	f7ff fd5a 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001fbc:	4803      	ldr	r0, [pc, #12]	; (8001fcc <MX_TIM9_Init+0x84>)
 8001fbe:	f000 f8d5 	bl	800216c <HAL_TIM_MspPostInit>

}
 8001fc2:	bf00      	nop
 8001fc4:	3720      	adds	r7, #32
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000274 	.word	0x20000274
 8001fd0:	40014000 	.word	0x40014000

08001fd4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b087      	sub	sp, #28
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a1f      	ldr	r2, [pc, #124]	; (8002060 <HAL_TIM_PWM_MspInit+0x8c>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d10e      	bne.n	8002004 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	617b      	str	r3, [r7, #20]
 8001fea:	4b1e      	ldr	r3, [pc, #120]	; (8002064 <HAL_TIM_PWM_MspInit+0x90>)
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fee:	4a1d      	ldr	r2, [pc, #116]	; (8002064 <HAL_TIM_PWM_MspInit+0x90>)
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ff6:	4b1b      	ldr	r3, [pc, #108]	; (8002064 <HAL_TIM_PWM_MspInit+0x90>)
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	617b      	str	r3, [r7, #20]
 8002000:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8002002:	e026      	b.n	8002052 <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM3)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a17      	ldr	r2, [pc, #92]	; (8002068 <HAL_TIM_PWM_MspInit+0x94>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d10e      	bne.n	800202c <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	613b      	str	r3, [r7, #16]
 8002012:	4b14      	ldr	r3, [pc, #80]	; (8002064 <HAL_TIM_PWM_MspInit+0x90>)
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	4a13      	ldr	r2, [pc, #76]	; (8002064 <HAL_TIM_PWM_MspInit+0x90>)
 8002018:	f043 0302 	orr.w	r3, r3, #2
 800201c:	6413      	str	r3, [r2, #64]	; 0x40
 800201e:	4b11      	ldr	r3, [pc, #68]	; (8002064 <HAL_TIM_PWM_MspInit+0x90>)
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	613b      	str	r3, [r7, #16]
 8002028:	693b      	ldr	r3, [r7, #16]
}
 800202a:	e012      	b.n	8002052 <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM9)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a0e      	ldr	r2, [pc, #56]	; (800206c <HAL_TIM_PWM_MspInit+0x98>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d10d      	bne.n	8002052 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	4b0a      	ldr	r3, [pc, #40]	; (8002064 <HAL_TIM_PWM_MspInit+0x90>)
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	4a09      	ldr	r2, [pc, #36]	; (8002064 <HAL_TIM_PWM_MspInit+0x90>)
 8002040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002044:	6453      	str	r3, [r2, #68]	; 0x44
 8002046:	4b07      	ldr	r3, [pc, #28]	; (8002064 <HAL_TIM_PWM_MspInit+0x90>)
 8002048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]
}
 8002052:	bf00      	nop
 8002054:	371c      	adds	r7, #28
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	40010000 	.word	0x40010000
 8002064:	40023800 	.word	0x40023800
 8002068:	40000400 	.word	0x40000400
 800206c:	40014000 	.word	0x40014000

08002070 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08c      	sub	sp, #48	; 0x30
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002078:	f107 031c 	add.w	r3, r7, #28
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	60da      	str	r2, [r3, #12]
 8002086:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM5)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a32      	ldr	r2, [pc, #200]	; (8002158 <HAL_TIM_Encoder_MspInit+0xe8>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d12c      	bne.n	80020ec <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	61bb      	str	r3, [r7, #24]
 8002096:	4b31      	ldr	r3, [pc, #196]	; (800215c <HAL_TIM_Encoder_MspInit+0xec>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	4a30      	ldr	r2, [pc, #192]	; (800215c <HAL_TIM_Encoder_MspInit+0xec>)
 800209c:	f043 0308 	orr.w	r3, r3, #8
 80020a0:	6413      	str	r3, [r2, #64]	; 0x40
 80020a2:	4b2e      	ldr	r3, [pc, #184]	; (800215c <HAL_TIM_Encoder_MspInit+0xec>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	f003 0308 	and.w	r3, r3, #8
 80020aa:	61bb      	str	r3, [r7, #24]
 80020ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	617b      	str	r3, [r7, #20]
 80020b2:	4b2a      	ldr	r3, [pc, #168]	; (800215c <HAL_TIM_Encoder_MspInit+0xec>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	4a29      	ldr	r2, [pc, #164]	; (800215c <HAL_TIM_Encoder_MspInit+0xec>)
 80020b8:	f043 0301 	orr.w	r3, r3, #1
 80020bc:	6313      	str	r3, [r2, #48]	; 0x30
 80020be:	4b27      	ldr	r3, [pc, #156]	; (800215c <HAL_TIM_Encoder_MspInit+0xec>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	617b      	str	r3, [r7, #20]
 80020c8:	697b      	ldr	r3, [r7, #20]
    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80020ca:	2303      	movs	r3, #3
 80020cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ce:	2302      	movs	r3, #2
 80020d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d2:	2300      	movs	r3, #0
 80020d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d6:	2300      	movs	r3, #0
 80020d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80020da:	2302      	movs	r3, #2
 80020dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020de:	f107 031c 	add.w	r3, r7, #28
 80020e2:	4619      	mov	r1, r3
 80020e4:	481e      	ldr	r0, [pc, #120]	; (8002160 <HAL_TIM_Encoder_MspInit+0xf0>)
 80020e6:	f001 fcb1 	bl	8003a4c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80020ea:	e030      	b.n	800214e <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM8)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a1c      	ldr	r2, [pc, #112]	; (8002164 <HAL_TIM_Encoder_MspInit+0xf4>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d12b      	bne.n	800214e <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	613b      	str	r3, [r7, #16]
 80020fa:	4b18      	ldr	r3, [pc, #96]	; (800215c <HAL_TIM_Encoder_MspInit+0xec>)
 80020fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fe:	4a17      	ldr	r2, [pc, #92]	; (800215c <HAL_TIM_Encoder_MspInit+0xec>)
 8002100:	f043 0302 	orr.w	r3, r3, #2
 8002104:	6453      	str	r3, [r2, #68]	; 0x44
 8002106:	4b15      	ldr	r3, [pc, #84]	; (800215c <HAL_TIM_Encoder_MspInit+0xec>)
 8002108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	613b      	str	r3, [r7, #16]
 8002110:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	4b11      	ldr	r3, [pc, #68]	; (800215c <HAL_TIM_Encoder_MspInit+0xec>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	4a10      	ldr	r2, [pc, #64]	; (800215c <HAL_TIM_Encoder_MspInit+0xec>)
 800211c:	f043 0304 	orr.w	r3, r3, #4
 8002120:	6313      	str	r3, [r2, #48]	; 0x30
 8002122:	4b0e      	ldr	r3, [pc, #56]	; (800215c <HAL_TIM_Encoder_MspInit+0xec>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	f003 0304 	and.w	r3, r3, #4
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800212e:	23c0      	movs	r3, #192	; 0xc0
 8002130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002132:	2302      	movs	r3, #2
 8002134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002136:	2300      	movs	r3, #0
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213a:	2300      	movs	r3, #0
 800213c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800213e:	2303      	movs	r3, #3
 8002140:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002142:	f107 031c 	add.w	r3, r7, #28
 8002146:	4619      	mov	r1, r3
 8002148:	4807      	ldr	r0, [pc, #28]	; (8002168 <HAL_TIM_Encoder_MspInit+0xf8>)
 800214a:	f001 fc7f 	bl	8003a4c <HAL_GPIO_Init>
}
 800214e:	bf00      	nop
 8002150:	3730      	adds	r7, #48	; 0x30
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40000c00 	.word	0x40000c00
 800215c:	40023800 	.word	0x40023800
 8002160:	40020000 	.word	0x40020000
 8002164:	40010400 	.word	0x40010400
 8002168:	40020800 	.word	0x40020800

0800216c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b08c      	sub	sp, #48	; 0x30
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002174:	f107 031c 	add.w	r3, r7, #28
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	609a      	str	r2, [r3, #8]
 8002180:	60da      	str	r2, [r3, #12]
 8002182:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a46      	ldr	r2, [pc, #280]	; (80022a4 <HAL_TIM_MspPostInit+0x138>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d11f      	bne.n	80021ce <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	61bb      	str	r3, [r7, #24]
 8002192:	4b45      	ldr	r3, [pc, #276]	; (80022a8 <HAL_TIM_MspPostInit+0x13c>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	4a44      	ldr	r2, [pc, #272]	; (80022a8 <HAL_TIM_MspPostInit+0x13c>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	6313      	str	r3, [r2, #48]	; 0x30
 800219e:	4b42      	ldr	r3, [pc, #264]	; (80022a8 <HAL_TIM_MspPostInit+0x13c>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	61bb      	str	r3, [r7, #24]
 80021a8:	69bb      	ldr	r3, [r7, #24]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80021aa:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80021ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b0:	2302      	movs	r3, #2
 80021b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b8:	2300      	movs	r3, #0
 80021ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80021bc:	2301      	movs	r3, #1
 80021be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c0:	f107 031c 	add.w	r3, r7, #28
 80021c4:	4619      	mov	r1, r3
 80021c6:	4839      	ldr	r0, [pc, #228]	; (80022ac <HAL_TIM_MspPostInit+0x140>)
 80021c8:	f001 fc40 	bl	8003a4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80021cc:	e065      	b.n	800229a <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM3)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a37      	ldr	r2, [pc, #220]	; (80022b0 <HAL_TIM_MspPostInit+0x144>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d13d      	bne.n	8002254 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]
 80021dc:	4b32      	ldr	r3, [pc, #200]	; (80022a8 <HAL_TIM_MspPostInit+0x13c>)
 80021de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e0:	4a31      	ldr	r2, [pc, #196]	; (80022a8 <HAL_TIM_MspPostInit+0x13c>)
 80021e2:	f043 0301 	orr.w	r3, r3, #1
 80021e6:	6313      	str	r3, [r2, #48]	; 0x30
 80021e8:	4b2f      	ldr	r3, [pc, #188]	; (80022a8 <HAL_TIM_MspPostInit+0x13c>)
 80021ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	617b      	str	r3, [r7, #20]
 80021f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021f4:	2300      	movs	r3, #0
 80021f6:	613b      	str	r3, [r7, #16]
 80021f8:	4b2b      	ldr	r3, [pc, #172]	; (80022a8 <HAL_TIM_MspPostInit+0x13c>)
 80021fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fc:	4a2a      	ldr	r2, [pc, #168]	; (80022a8 <HAL_TIM_MspPostInit+0x13c>)
 80021fe:	f043 0304 	orr.w	r3, r3, #4
 8002202:	6313      	str	r3, [r2, #48]	; 0x30
 8002204:	4b28      	ldr	r3, [pc, #160]	; (80022a8 <HAL_TIM_MspPostInit+0x13c>)
 8002206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002208:	f003 0304 	and.w	r3, r3, #4
 800220c:	613b      	str	r3, [r7, #16]
 800220e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002210:	2380      	movs	r3, #128	; 0x80
 8002212:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002214:	2302      	movs	r3, #2
 8002216:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002218:	2300      	movs	r3, #0
 800221a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221c:	2300      	movs	r3, #0
 800221e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002220:	2302      	movs	r3, #2
 8002222:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002224:	f107 031c 	add.w	r3, r7, #28
 8002228:	4619      	mov	r1, r3
 800222a:	4820      	ldr	r0, [pc, #128]	; (80022ac <HAL_TIM_MspPostInit+0x140>)
 800222c:	f001 fc0e 	bl	8003a4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002230:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002234:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002236:	2302      	movs	r3, #2
 8002238:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223a:	2300      	movs	r3, #0
 800223c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223e:	2300      	movs	r3, #0
 8002240:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002242:	2302      	movs	r3, #2
 8002244:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002246:	f107 031c 	add.w	r3, r7, #28
 800224a:	4619      	mov	r1, r3
 800224c:	4819      	ldr	r0, [pc, #100]	; (80022b4 <HAL_TIM_MspPostInit+0x148>)
 800224e:	f001 fbfd 	bl	8003a4c <HAL_GPIO_Init>
}
 8002252:	e022      	b.n	800229a <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM9)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a17      	ldr	r2, [pc, #92]	; (80022b8 <HAL_TIM_MspPostInit+0x14c>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d11d      	bne.n	800229a <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800225e:	2300      	movs	r3, #0
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	4b11      	ldr	r3, [pc, #68]	; (80022a8 <HAL_TIM_MspPostInit+0x13c>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	4a10      	ldr	r2, [pc, #64]	; (80022a8 <HAL_TIM_MspPostInit+0x13c>)
 8002268:	f043 0301 	orr.w	r3, r3, #1
 800226c:	6313      	str	r3, [r2, #48]	; 0x30
 800226e:	4b0e      	ldr	r3, [pc, #56]	; (80022a8 <HAL_TIM_MspPostInit+0x13c>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800227a:	2308      	movs	r3, #8
 800227c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227e:	2302      	movs	r3, #2
 8002280:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002282:	2300      	movs	r3, #0
 8002284:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002286:	2300      	movs	r3, #0
 8002288:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800228a:	2303      	movs	r3, #3
 800228c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800228e:	f107 031c 	add.w	r3, r7, #28
 8002292:	4619      	mov	r1, r3
 8002294:	4805      	ldr	r0, [pc, #20]	; (80022ac <HAL_TIM_MspPostInit+0x140>)
 8002296:	f001 fbd9 	bl	8003a4c <HAL_GPIO_Init>
}
 800229a:	bf00      	nop
 800229c:	3730      	adds	r7, #48	; 0x30
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40010000 	.word	0x40010000
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40020000 	.word	0x40020000
 80022b0:	40000400 	.word	0x40000400
 80022b4:	40020800 	.word	0x40020800
 80022b8:	40014000 	.word	0x40014000

080022bc <__NVIC_GetPriorityGrouping>:
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022c0:	4b04      	ldr	r3, [pc, #16]	; (80022d4 <__NVIC_GetPriorityGrouping+0x18>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	0a1b      	lsrs	r3, r3, #8
 80022c6:	f003 0307 	and.w	r3, r3, #7
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <__NVIC_EnableIRQ>:
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	db0b      	blt.n	8002302 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	f003 021f 	and.w	r2, r3, #31
 80022f0:	4907      	ldr	r1, [pc, #28]	; (8002310 <__NVIC_EnableIRQ+0x38>)
 80022f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f6:	095b      	lsrs	r3, r3, #5
 80022f8:	2001      	movs	r0, #1
 80022fa:	fa00 f202 	lsl.w	r2, r0, r2
 80022fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	e000e100 	.word	0xe000e100

08002314 <__NVIC_SetPriority>:
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	6039      	str	r1, [r7, #0]
 800231e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002324:	2b00      	cmp	r3, #0
 8002326:	db0a      	blt.n	800233e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	b2da      	uxtb	r2, r3
 800232c:	490c      	ldr	r1, [pc, #48]	; (8002360 <__NVIC_SetPriority+0x4c>)
 800232e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002332:	0112      	lsls	r2, r2, #4
 8002334:	b2d2      	uxtb	r2, r2
 8002336:	440b      	add	r3, r1
 8002338:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800233c:	e00a      	b.n	8002354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	b2da      	uxtb	r2, r3
 8002342:	4908      	ldr	r1, [pc, #32]	; (8002364 <__NVIC_SetPriority+0x50>)
 8002344:	79fb      	ldrb	r3, [r7, #7]
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	3b04      	subs	r3, #4
 800234c:	0112      	lsls	r2, r2, #4
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	440b      	add	r3, r1
 8002352:	761a      	strb	r2, [r3, #24]
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	e000e100 	.word	0xe000e100
 8002364:	e000ed00 	.word	0xe000ed00

08002368 <NVIC_EncodePriority>:
{
 8002368:	b480      	push	{r7}
 800236a:	b089      	sub	sp, #36	; 0x24
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	f1c3 0307 	rsb	r3, r3, #7
 8002382:	2b04      	cmp	r3, #4
 8002384:	bf28      	it	cs
 8002386:	2304      	movcs	r3, #4
 8002388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	3304      	adds	r3, #4
 800238e:	2b06      	cmp	r3, #6
 8002390:	d902      	bls.n	8002398 <NVIC_EncodePriority+0x30>
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	3b03      	subs	r3, #3
 8002396:	e000      	b.n	800239a <NVIC_EncodePriority+0x32>
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800239c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43da      	mvns	r2, r3
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	401a      	ands	r2, r3
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ba:	43d9      	mvns	r1, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c0:	4313      	orrs	r3, r2
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3724      	adds	r7, #36	; 0x24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
	...

080023d0 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 80023dc:	4a0d      	ldr	r2, [pc, #52]	; (8002414 <LL_DMA_SetDataTransferDirection+0x44>)
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	4413      	add	r3, r2
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	461a      	mov	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	4413      	add	r3, r2
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80023f0:	4908      	ldr	r1, [pc, #32]	; (8002414 <LL_DMA_SetDataTransferDirection+0x44>)
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	440b      	add	r3, r1
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	4619      	mov	r1, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	440b      	add	r3, r1
 80023fe:	4619      	mov	r1, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4313      	orrs	r3, r2
 8002404:	600b      	str	r3, [r1, #0]
}
 8002406:	bf00      	nop
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	08007e7c 	.word	0x08007e7c

08002418 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8002424:	4a0d      	ldr	r2, [pc, #52]	; (800245c <LL_DMA_SetMode+0x44>)
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	4413      	add	r3, r2
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	461a      	mov	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	4413      	add	r3, r2
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8002438:	4908      	ldr	r1, [pc, #32]	; (800245c <LL_DMA_SetMode+0x44>)
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	440b      	add	r3, r1
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	4619      	mov	r1, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	440b      	add	r3, r1
 8002446:	4619      	mov	r1, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4313      	orrs	r3, r2
 800244c:	600b      	str	r3, [r1, #0]
}
 800244e:	bf00      	nop
 8002450:	3714      	adds	r7, #20
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	08007e7c 	.word	0x08007e7c

08002460 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 800246c:	4a0d      	ldr	r2, [pc, #52]	; (80024a4 <LL_DMA_SetPeriphIncMode+0x44>)
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	4413      	add	r3, r2
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	461a      	mov	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	4413      	add	r3, r2
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002480:	4908      	ldr	r1, [pc, #32]	; (80024a4 <LL_DMA_SetPeriphIncMode+0x44>)
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	440b      	add	r3, r1
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	4619      	mov	r1, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	440b      	add	r3, r1
 800248e:	4619      	mov	r1, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4313      	orrs	r3, r2
 8002494:	600b      	str	r3, [r1, #0]
}
 8002496:	bf00      	nop
 8002498:	3714      	adds	r7, #20
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	08007e7c 	.word	0x08007e7c

080024a8 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 80024b4:	4a0d      	ldr	r2, [pc, #52]	; (80024ec <LL_DMA_SetMemoryIncMode+0x44>)
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	4413      	add	r3, r2
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	461a      	mov	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	4413      	add	r3, r2
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80024c8:	4908      	ldr	r1, [pc, #32]	; (80024ec <LL_DMA_SetMemoryIncMode+0x44>)
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	440b      	add	r3, r1
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	4619      	mov	r1, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	440b      	add	r3, r1
 80024d6:	4619      	mov	r1, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4313      	orrs	r3, r2
 80024dc:	600b      	str	r3, [r1, #0]
}
 80024de:	bf00      	nop
 80024e0:	3714      	adds	r7, #20
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	08007e7c 	.word	0x08007e7c

080024f0 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 80024fc:	4a0d      	ldr	r2, [pc, #52]	; (8002534 <LL_DMA_SetPeriphSize+0x44>)
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	4413      	add	r3, r2
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	461a      	mov	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	4413      	add	r3, r2
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8002510:	4908      	ldr	r1, [pc, #32]	; (8002534 <LL_DMA_SetPeriphSize+0x44>)
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	440b      	add	r3, r1
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	4619      	mov	r1, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	440b      	add	r3, r1
 800251e:	4619      	mov	r1, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4313      	orrs	r3, r2
 8002524:	600b      	str	r3, [r1, #0]
}
 8002526:	bf00      	nop
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	08007e7c 	.word	0x08007e7c

08002538 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8002544:	4a0d      	ldr	r2, [pc, #52]	; (800257c <LL_DMA_SetMemorySize+0x44>)
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	4413      	add	r3, r2
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	461a      	mov	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	4413      	add	r3, r2
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8002558:	4908      	ldr	r1, [pc, #32]	; (800257c <LL_DMA_SetMemorySize+0x44>)
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	440b      	add	r3, r1
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	4619      	mov	r1, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	440b      	add	r3, r1
 8002566:	4619      	mov	r1, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4313      	orrs	r3, r2
 800256c:	600b      	str	r3, [r1, #0]
}
 800256e:	bf00      	nop
 8002570:	3714      	adds	r7, #20
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	08007e7c 	.word	0x08007e7c

08002580 <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 800258c:	4a0d      	ldr	r2, [pc, #52]	; (80025c4 <LL_DMA_SetStreamPriorityLevel+0x44>)
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	4413      	add	r3, r2
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	461a      	mov	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	4413      	add	r3, r2
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025a0:	4908      	ldr	r1, [pc, #32]	; (80025c4 <LL_DMA_SetStreamPriorityLevel+0x44>)
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	440b      	add	r3, r1
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	4619      	mov	r1, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	440b      	add	r3, r1
 80025ae:	4619      	mov	r1, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	600b      	str	r3, [r1, #0]
}
 80025b6:	bf00      	nop
 80025b8:	3714      	adds	r7, #20
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	08007e7c 	.word	0x08007e7c

080025c8 <LL_DMA_SetChannelSelection>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 80025d4:	4a0d      	ldr	r2, [pc, #52]	; (800260c <LL_DMA_SetChannelSelection+0x44>)
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	4413      	add	r3, r2
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	461a      	mov	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	4413      	add	r3, r2
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80025e8:	4908      	ldr	r1, [pc, #32]	; (800260c <LL_DMA_SetChannelSelection+0x44>)
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	440b      	add	r3, r1
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	4619      	mov	r1, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	440b      	add	r3, r1
 80025f6:	4619      	mov	r1, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	600b      	str	r3, [r1, #0]
}
 80025fe:	bf00      	nop
 8002600:	3714      	adds	r7, #20
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	08007e7c 	.word	0x08007e7c

08002610 <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 800261a:	4a0c      	ldr	r2, [pc, #48]	; (800264c <LL_DMA_DisableFifoMode+0x3c>)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	4413      	add	r3, r2
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	461a      	mov	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4413      	add	r3, r2
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	4908      	ldr	r1, [pc, #32]	; (800264c <LL_DMA_DisableFifoMode+0x3c>)
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	440a      	add	r2, r1
 8002630:	7812      	ldrb	r2, [r2, #0]
 8002632:	4611      	mov	r1, r2
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	440a      	add	r2, r1
 8002638:	f023 0304 	bic.w	r3, r3, #4
 800263c:	6153      	str	r3, [r2, #20]
}
 800263e:	bf00      	nop
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	08007e7c 	.word	0x08007e7c

08002650 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	60da      	str	r2, [r3, #12]
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	695b      	ldr	r3, [r3, #20]
 8002688:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	615a      	str	r2, [r3, #20]
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <LL_AHB1_GRP1_EnableClock>:
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80026a4:	4b08      	ldr	r3, [pc, #32]	; (80026c8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80026a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026a8:	4907      	ldr	r1, [pc, #28]	; (80026c8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80026b0:	4b05      	ldr	r3, [pc, #20]	; (80026c8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80026b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4013      	ands	r3, r2
 80026b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80026ba:	68fb      	ldr	r3, [r7, #12]
}
 80026bc:	bf00      	nop
 80026be:	3714      	adds	r7, #20
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	40023800 	.word	0x40023800

080026cc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80026d4:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80026d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026d8:	4907      	ldr	r1, [pc, #28]	; (80026f8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4313      	orrs	r3, r2
 80026de:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80026e0:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80026e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4013      	ands	r3, r2
 80026e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80026ea:	68fb      	ldr	r3, [r7, #12]
}
 80026ec:	bf00      	nop
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	40023800 	.word	0x40023800

080026fc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b08e      	sub	sp, #56	; 0x38
 8002700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002702:	f107 031c 	add.w	r3, r7, #28
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	605a      	str	r2, [r3, #4]
 800270c:	609a      	str	r2, [r3, #8]
 800270e:	60da      	str	r2, [r3, #12]
 8002710:	611a      	str	r2, [r3, #16]
 8002712:	615a      	str	r2, [r3, #20]
 8002714:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002716:	1d3b      	adds	r3, r7, #4
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	605a      	str	r2, [r3, #4]
 800271e:	609a      	str	r2, [r3, #8]
 8002720:	60da      	str	r2, [r3, #12]
 8002722:	611a      	str	r2, [r3, #16]
 8002724:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8002726:	2010      	movs	r0, #16
 8002728:	f7ff ffd0 	bl	80026cc <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800272c:	2002      	movs	r0, #2
 800272e:	f7ff ffb5 	bl	800269c <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PB6   ------> USART1_TX
  PB7   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8002732:	23c0      	movs	r3, #192	; 0xc0
 8002734:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002736:	2302      	movs	r3, #2
 8002738:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800273a:	2303      	movs	r3, #3
 800273c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800273e:	2300      	movs	r3, #0
 8002740:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002742:	2300      	movs	r3, #0
 8002744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002746:	2307      	movs	r3, #7
 8002748:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800274a:	1d3b      	adds	r3, r7, #4
 800274c:	4619      	mov	r1, r3
 800274e:	4848      	ldr	r0, [pc, #288]	; (8002870 <MX_USART1_UART_Init+0x174>)
 8002750:	f004 febc 	bl	80074cc <LL_GPIO_Init>

  /* USART1 DMA Init */

  /* USART1_RX Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_2, LL_DMA_CHANNEL_4);
 8002754:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002758:	2102      	movs	r1, #2
 800275a:	4846      	ldr	r0, [pc, #280]	; (8002874 <MX_USART1_UART_Init+0x178>)
 800275c:	f7ff ff34 	bl	80025c8 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_2, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002760:	2200      	movs	r2, #0
 8002762:	2102      	movs	r1, #2
 8002764:	4843      	ldr	r0, [pc, #268]	; (8002874 <MX_USART1_UART_Init+0x178>)
 8002766:	f7ff fe33 	bl	80023d0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_2, LL_DMA_PRIORITY_VERYHIGH);
 800276a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800276e:	2102      	movs	r1, #2
 8002770:	4840      	ldr	r0, [pc, #256]	; (8002874 <MX_USART1_UART_Init+0x178>)
 8002772:	f7ff ff05 	bl	8002580 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_2, LL_DMA_MODE_CIRCULAR);
 8002776:	f44f 7280 	mov.w	r2, #256	; 0x100
 800277a:	2102      	movs	r1, #2
 800277c:	483d      	ldr	r0, [pc, #244]	; (8002874 <MX_USART1_UART_Init+0x178>)
 800277e:	f7ff fe4b 	bl	8002418 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_2, LL_DMA_PERIPH_NOINCREMENT);
 8002782:	2200      	movs	r2, #0
 8002784:	2102      	movs	r1, #2
 8002786:	483b      	ldr	r0, [pc, #236]	; (8002874 <MX_USART1_UART_Init+0x178>)
 8002788:	f7ff fe6a 	bl	8002460 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_2, LL_DMA_MEMORY_INCREMENT);
 800278c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002790:	2102      	movs	r1, #2
 8002792:	4838      	ldr	r0, [pc, #224]	; (8002874 <MX_USART1_UART_Init+0x178>)
 8002794:	f7ff fe88 	bl	80024a8 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_2, LL_DMA_PDATAALIGN_BYTE);
 8002798:	2200      	movs	r2, #0
 800279a:	2102      	movs	r1, #2
 800279c:	4835      	ldr	r0, [pc, #212]	; (8002874 <MX_USART1_UART_Init+0x178>)
 800279e:	f7ff fea7 	bl	80024f0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_2, LL_DMA_MDATAALIGN_BYTE);
 80027a2:	2200      	movs	r2, #0
 80027a4:	2102      	movs	r1, #2
 80027a6:	4833      	ldr	r0, [pc, #204]	; (8002874 <MX_USART1_UART_Init+0x178>)
 80027a8:	f7ff fec6 	bl	8002538 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_2);
 80027ac:	2102      	movs	r1, #2
 80027ae:	4831      	ldr	r0, [pc, #196]	; (8002874 <MX_USART1_UART_Init+0x178>)
 80027b0:	f7ff ff2e 	bl	8002610 <LL_DMA_DisableFifoMode>

  /* USART1_TX Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_7, LL_DMA_CHANNEL_4);
 80027b4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027b8:	2107      	movs	r1, #7
 80027ba:	482e      	ldr	r0, [pc, #184]	; (8002874 <MX_USART1_UART_Init+0x178>)
 80027bc:	f7ff ff04 	bl	80025c8 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80027c0:	2240      	movs	r2, #64	; 0x40
 80027c2:	2107      	movs	r1, #7
 80027c4:	482b      	ldr	r0, [pc, #172]	; (8002874 <MX_USART1_UART_Init+0x178>)
 80027c6:	f7ff fe03 	bl	80023d0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_7, LL_DMA_PRIORITY_HIGH);
 80027ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027ce:	2107      	movs	r1, #7
 80027d0:	4828      	ldr	r0, [pc, #160]	; (8002874 <MX_USART1_UART_Init+0x178>)
 80027d2:	f7ff fed5 	bl	8002580 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_7, LL_DMA_MODE_NORMAL);
 80027d6:	2200      	movs	r2, #0
 80027d8:	2107      	movs	r1, #7
 80027da:	4826      	ldr	r0, [pc, #152]	; (8002874 <MX_USART1_UART_Init+0x178>)
 80027dc:	f7ff fe1c 	bl	8002418 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_7, LL_DMA_PERIPH_NOINCREMENT);
 80027e0:	2200      	movs	r2, #0
 80027e2:	2107      	movs	r1, #7
 80027e4:	4823      	ldr	r0, [pc, #140]	; (8002874 <MX_USART1_UART_Init+0x178>)
 80027e6:	f7ff fe3b 	bl	8002460 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_7, LL_DMA_MEMORY_INCREMENT);
 80027ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027ee:	2107      	movs	r1, #7
 80027f0:	4820      	ldr	r0, [pc, #128]	; (8002874 <MX_USART1_UART_Init+0x178>)
 80027f2:	f7ff fe59 	bl	80024a8 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_7, LL_DMA_PDATAALIGN_BYTE);
 80027f6:	2200      	movs	r2, #0
 80027f8:	2107      	movs	r1, #7
 80027fa:	481e      	ldr	r0, [pc, #120]	; (8002874 <MX_USART1_UART_Init+0x178>)
 80027fc:	f7ff fe78 	bl	80024f0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_7, LL_DMA_MDATAALIGN_BYTE);
 8002800:	2200      	movs	r2, #0
 8002802:	2107      	movs	r1, #7
 8002804:	481b      	ldr	r0, [pc, #108]	; (8002874 <MX_USART1_UART_Init+0x178>)
 8002806:	f7ff fe97 	bl	8002538 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_7);
 800280a:	2107      	movs	r1, #7
 800280c:	4819      	ldr	r0, [pc, #100]	; (8002874 <MX_USART1_UART_Init+0x178>)
 800280e:	f7ff feff 	bl	8002610 <LL_DMA_DisableFifoMode>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002812:	f7ff fd53 	bl	80022bc <__NVIC_GetPriorityGrouping>
 8002816:	4603      	mov	r3, r0
 8002818:	2200      	movs	r2, #0
 800281a:	2100      	movs	r1, #0
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff fda3 	bl	8002368 <NVIC_EncodePriority>
 8002822:	4603      	mov	r3, r0
 8002824:	4619      	mov	r1, r3
 8002826:	2025      	movs	r0, #37	; 0x25
 8002828:	f7ff fd74 	bl	8002314 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 800282c:	2025      	movs	r0, #37	; 0x25
 800282e:	f7ff fd53 	bl	80022d8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002832:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002836:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002838:	2300      	movs	r3, #0
 800283a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800283c:	2300      	movs	r3, #0
 800283e:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002840:	2300      	movs	r3, #0
 8002842:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002844:	230c      	movs	r3, #12
 8002846:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002848:	2300      	movs	r3, #0
 800284a:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800284c:	2300      	movs	r3, #0
 800284e:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8002850:	f107 031c 	add.w	r3, r7, #28
 8002854:	4619      	mov	r1, r3
 8002856:	4808      	ldr	r0, [pc, #32]	; (8002878 <MX_USART1_UART_Init+0x17c>)
 8002858:	f005 fa4e 	bl	8007cf8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 800285c:	4806      	ldr	r0, [pc, #24]	; (8002878 <MX_USART1_UART_Init+0x17c>)
 800285e:	f7ff ff07 	bl	8002670 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8002862:	4805      	ldr	r0, [pc, #20]	; (8002878 <MX_USART1_UART_Init+0x17c>)
 8002864:	f7ff fef4 	bl	8002650 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002868:	bf00      	nop
 800286a:	3738      	adds	r7, #56	; 0x38
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40020400 	.word	0x40020400
 8002874:	40026400 	.word	0x40026400
 8002878:	40011000 	.word	0x40011000

0800287c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002880:	4b11      	ldr	r3, [pc, #68]	; (80028c8 <MX_USART3_UART_Init+0x4c>)
 8002882:	4a12      	ldr	r2, [pc, #72]	; (80028cc <MX_USART3_UART_Init+0x50>)
 8002884:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002886:	4b10      	ldr	r3, [pc, #64]	; (80028c8 <MX_USART3_UART_Init+0x4c>)
 8002888:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800288c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800288e:	4b0e      	ldr	r3, [pc, #56]	; (80028c8 <MX_USART3_UART_Init+0x4c>)
 8002890:	2200      	movs	r2, #0
 8002892:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002894:	4b0c      	ldr	r3, [pc, #48]	; (80028c8 <MX_USART3_UART_Init+0x4c>)
 8002896:	2200      	movs	r2, #0
 8002898:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800289a:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <MX_USART3_UART_Init+0x4c>)
 800289c:	2200      	movs	r2, #0
 800289e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80028a0:	4b09      	ldr	r3, [pc, #36]	; (80028c8 <MX_USART3_UART_Init+0x4c>)
 80028a2:	220c      	movs	r2, #12
 80028a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028a6:	4b08      	ldr	r3, [pc, #32]	; (80028c8 <MX_USART3_UART_Init+0x4c>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80028ac:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <MX_USART3_UART_Init+0x4c>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80028b2:	4805      	ldr	r0, [pc, #20]	; (80028c8 <MX_USART3_UART_Init+0x4c>)
 80028b4:	f003 fcda 	bl	800626c <HAL_UART_Init>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80028be:	f7ff f8d7 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80028c2:	bf00      	nop
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	200002bc 	.word	0x200002bc
 80028cc:	40004800 	.word	0x40004800

080028d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b08a      	sub	sp, #40	; 0x28
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d8:	f107 0314 	add.w	r3, r7, #20
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	605a      	str	r2, [r3, #4]
 80028e2:	609a      	str	r2, [r3, #8]
 80028e4:	60da      	str	r2, [r3, #12]
 80028e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a4d      	ldr	r2, [pc, #308]	; (8002a24 <HAL_UART_MspInit+0x154>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	f040 8093 	bne.w	8002a1a <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80028f4:	2300      	movs	r3, #0
 80028f6:	613b      	str	r3, [r7, #16]
 80028f8:	4b4b      	ldr	r3, [pc, #300]	; (8002a28 <HAL_UART_MspInit+0x158>)
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	4a4a      	ldr	r2, [pc, #296]	; (8002a28 <HAL_UART_MspInit+0x158>)
 80028fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002902:	6413      	str	r3, [r2, #64]	; 0x40
 8002904:	4b48      	ldr	r3, [pc, #288]	; (8002a28 <HAL_UART_MspInit+0x158>)
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800290c:	613b      	str	r3, [r7, #16]
 800290e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002910:	2300      	movs	r3, #0
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	4b44      	ldr	r3, [pc, #272]	; (8002a28 <HAL_UART_MspInit+0x158>)
 8002916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002918:	4a43      	ldr	r2, [pc, #268]	; (8002a28 <HAL_UART_MspInit+0x158>)
 800291a:	f043 0304 	orr.w	r3, r3, #4
 800291e:	6313      	str	r3, [r2, #48]	; 0x30
 8002920:	4b41      	ldr	r3, [pc, #260]	; (8002a28 <HAL_UART_MspInit+0x158>)
 8002922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002924:	f003 0304 	and.w	r3, r3, #4
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC5     ------> USART3_RX
    PC10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 800292c:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8002930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002932:	2302      	movs	r3, #2
 8002934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002936:	2300      	movs	r3, #0
 8002938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800293a:	2303      	movs	r3, #3
 800293c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800293e:	2307      	movs	r3, #7
 8002940:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002942:	f107 0314 	add.w	r3, r7, #20
 8002946:	4619      	mov	r1, r3
 8002948:	4838      	ldr	r0, [pc, #224]	; (8002a2c <HAL_UART_MspInit+0x15c>)
 800294a:	f001 f87f 	bl	8003a4c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800294e:	4b38      	ldr	r3, [pc, #224]	; (8002a30 <HAL_UART_MspInit+0x160>)
 8002950:	4a38      	ldr	r2, [pc, #224]	; (8002a34 <HAL_UART_MspInit+0x164>)
 8002952:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002954:	4b36      	ldr	r3, [pc, #216]	; (8002a30 <HAL_UART_MspInit+0x160>)
 8002956:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800295a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800295c:	4b34      	ldr	r3, [pc, #208]	; (8002a30 <HAL_UART_MspInit+0x160>)
 800295e:	2200      	movs	r2, #0
 8002960:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002962:	4b33      	ldr	r3, [pc, #204]	; (8002a30 <HAL_UART_MspInit+0x160>)
 8002964:	2200      	movs	r2, #0
 8002966:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002968:	4b31      	ldr	r3, [pc, #196]	; (8002a30 <HAL_UART_MspInit+0x160>)
 800296a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800296e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002970:	4b2f      	ldr	r3, [pc, #188]	; (8002a30 <HAL_UART_MspInit+0x160>)
 8002972:	2200      	movs	r2, #0
 8002974:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002976:	4b2e      	ldr	r3, [pc, #184]	; (8002a30 <HAL_UART_MspInit+0x160>)
 8002978:	2200      	movs	r2, #0
 800297a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800297c:	4b2c      	ldr	r3, [pc, #176]	; (8002a30 <HAL_UART_MspInit+0x160>)
 800297e:	2200      	movs	r2, #0
 8002980:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002982:	4b2b      	ldr	r3, [pc, #172]	; (8002a30 <HAL_UART_MspInit+0x160>)
 8002984:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002988:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800298a:	4b29      	ldr	r3, [pc, #164]	; (8002a30 <HAL_UART_MspInit+0x160>)
 800298c:	2200      	movs	r2, #0
 800298e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002990:	4827      	ldr	r0, [pc, #156]	; (8002a30 <HAL_UART_MspInit+0x160>)
 8002992:	f000 fcdf 	bl	8003354 <HAL_DMA_Init>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 800299c:	f7ff f868 	bl	8001a70 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a23      	ldr	r2, [pc, #140]	; (8002a30 <HAL_UART_MspInit+0x160>)
 80029a4:	639a      	str	r2, [r3, #56]	; 0x38
 80029a6:	4a22      	ldr	r2, [pc, #136]	; (8002a30 <HAL_UART_MspInit+0x160>)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80029ac:	4b22      	ldr	r3, [pc, #136]	; (8002a38 <HAL_UART_MspInit+0x168>)
 80029ae:	4a23      	ldr	r2, [pc, #140]	; (8002a3c <HAL_UART_MspInit+0x16c>)
 80029b0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80029b2:	4b21      	ldr	r3, [pc, #132]	; (8002a38 <HAL_UART_MspInit+0x168>)
 80029b4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029b8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029ba:	4b1f      	ldr	r3, [pc, #124]	; (8002a38 <HAL_UART_MspInit+0x168>)
 80029bc:	2240      	movs	r2, #64	; 0x40
 80029be:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029c0:	4b1d      	ldr	r3, [pc, #116]	; (8002a38 <HAL_UART_MspInit+0x168>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029c6:	4b1c      	ldr	r3, [pc, #112]	; (8002a38 <HAL_UART_MspInit+0x168>)
 80029c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029cc:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029ce:	4b1a      	ldr	r3, [pc, #104]	; (8002a38 <HAL_UART_MspInit+0x168>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029d4:	4b18      	ldr	r3, [pc, #96]	; (8002a38 <HAL_UART_MspInit+0x168>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80029da:	4b17      	ldr	r3, [pc, #92]	; (8002a38 <HAL_UART_MspInit+0x168>)
 80029dc:	2200      	movs	r2, #0
 80029de:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80029e0:	4b15      	ldr	r3, [pc, #84]	; (8002a38 <HAL_UART_MspInit+0x168>)
 80029e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80029e6:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029e8:	4b13      	ldr	r3, [pc, #76]	; (8002a38 <HAL_UART_MspInit+0x168>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80029ee:	4812      	ldr	r0, [pc, #72]	; (8002a38 <HAL_UART_MspInit+0x168>)
 80029f0:	f000 fcb0 	bl	8003354 <HAL_DMA_Init>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 80029fa:	f7ff f839 	bl	8001a70 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a0d      	ldr	r2, [pc, #52]	; (8002a38 <HAL_UART_MspInit+0x168>)
 8002a02:	635a      	str	r2, [r3, #52]	; 0x34
 8002a04:	4a0c      	ldr	r2, [pc, #48]	; (8002a38 <HAL_UART_MspInit+0x168>)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	2027      	movs	r0, #39	; 0x27
 8002a10:	f000 fc4d 	bl	80032ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002a14:	2027      	movs	r0, #39	; 0x27
 8002a16:	f000 fc66 	bl	80032e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002a1a:	bf00      	nop
 8002a1c:	3728      	adds	r7, #40	; 0x28
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	40004800 	.word	0x40004800
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	40020800 	.word	0x40020800
 8002a30:	20000300 	.word	0x20000300
 8002a34:	40026028 	.word	0x40026028
 8002a38:	20000360 	.word	0x20000360
 8002a3c:	40026058 	.word	0x40026058

08002a40 <CRC_Calculate>:

#define CRC_POLYNOMIAL (0x04C11DB7)
#define CRC_INITIAL    (0xFFFFFFFF)
#define COMPLEMENT_OUT (0)

uint32_t CRC_Calculate(uint8_t *data, uint32_t len){
 8002a40:	b480      	push	{r7}
 8002a42:	b087      	sub	sp, #28
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
	   uint32_t i, j;
	   uint32_t crc, msb;

	   crc = CRC_INITIAL;
 8002a4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a4e:	60fb      	str	r3, [r7, #12]
	   for(i = 0; i < len; i++) {
 8002a50:	2300      	movs	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]
 8002a54:	e020      	b.n	8002a98 <CRC_Calculate+0x58>
	      // xor next byte to upper bits of crc
	      crc ^= (((uint32_t)data[i])<<24);
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	061b      	lsls	r3, r3, #24
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	4053      	eors	r3, r2
 8002a64:	60fb      	str	r3, [r7, #12]
	      for (j = 0; j < 8; j++) {    // Do eight times.
 8002a66:	2300      	movs	r3, #0
 8002a68:	613b      	str	r3, [r7, #16]
 8002a6a:	e00f      	b.n	8002a8c <CRC_Calculate+0x4c>
	            msb = crc>>31;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	0fdb      	lsrs	r3, r3, #31
 8002a70:	60bb      	str	r3, [r7, #8]
	            crc <<= 1;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	60fb      	str	r3, [r7, #12]
	            crc ^= (0 - msb) & CRC_POLYNOMIAL;
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	425a      	negs	r2, r3
 8002a7c:	4b0c      	ldr	r3, [pc, #48]	; (8002ab0 <CRC_Calculate+0x70>)
 8002a7e:	4013      	ands	r3, r2
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	4053      	eors	r3, r2
 8002a84:	60fb      	str	r3, [r7, #12]
	      for (j = 0; j < 8; j++) {    // Do eight times.
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	613b      	str	r3, [r7, #16]
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	2b07      	cmp	r3, #7
 8002a90:	d9ec      	bls.n	8002a6c <CRC_Calculate+0x2c>
	   for(i = 0; i < len; i++) {
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	3301      	adds	r3, #1
 8002a96:	617b      	str	r3, [r7, #20]
 8002a98:	697a      	ldr	r2, [r7, #20]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d3da      	bcc.n	8002a56 <CRC_Calculate+0x16>
	      }
	   }
#if COMPLEMENT_OUT
	   return ~crc;
#else
	   return crc;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
#endif
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	371c      	adds	r7, #28
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	04c11db7 	.word	0x04c11db7

08002ab4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8002ab4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002aec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ab8:	480d      	ldr	r0, [pc, #52]	; (8002af0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002aba:	490e      	ldr	r1, [pc, #56]	; (8002af4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002abc:	4a0e      	ldr	r2, [pc, #56]	; (8002af8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ac0:	e002      	b.n	8002ac8 <LoopCopyDataInit>

08002ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ac6:	3304      	adds	r3, #4

08002ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002acc:	d3f9      	bcc.n	8002ac2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ace:	4a0b      	ldr	r2, [pc, #44]	; (8002afc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ad0:	4c0b      	ldr	r4, [pc, #44]	; (8002b00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ad4:	e001      	b.n	8002ada <LoopFillZerobss>

08002ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ad8:	3204      	adds	r2, #4

08002ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002adc:	d3fb      	bcc.n	8002ad6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ade:	f7ff f85d 	bl	8001b9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ae2:	f005 f98f 	bl	8007e04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ae6:	f7fe fe8b 	bl	8001800 <main>
  bx  lr    
 8002aea:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002aec:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8002af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002af4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002af8:	08007e9c 	.word	0x08007e9c
  ldr r2, =_sbss
 8002afc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002b00:	200003c4 	.word	0x200003c4

08002b04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b04:	e7fe      	b.n	8002b04 <ADC_IRQHandler>
	...

08002b08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b0c:	4b0e      	ldr	r3, [pc, #56]	; (8002b48 <HAL_Init+0x40>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a0d      	ldr	r2, [pc, #52]	; (8002b48 <HAL_Init+0x40>)
 8002b12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b18:	4b0b      	ldr	r3, [pc, #44]	; (8002b48 <HAL_Init+0x40>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a0a      	ldr	r2, [pc, #40]	; (8002b48 <HAL_Init+0x40>)
 8002b1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b24:	4b08      	ldr	r3, [pc, #32]	; (8002b48 <HAL_Init+0x40>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a07      	ldr	r2, [pc, #28]	; (8002b48 <HAL_Init+0x40>)
 8002b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b30:	2003      	movs	r0, #3
 8002b32:	f000 fbb1 	bl	8003298 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b36:	200f      	movs	r0, #15
 8002b38:	f000 f808 	bl	8002b4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b3c:	f7fe ff9e 	bl	8001a7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	40023c00 	.word	0x40023c00

08002b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b54:	4b12      	ldr	r3, [pc, #72]	; (8002ba0 <HAL_InitTick+0x54>)
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	4b12      	ldr	r3, [pc, #72]	; (8002ba4 <HAL_InitTick+0x58>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b62:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 fbc9 	bl	8003302 <HAL_SYSTICK_Config>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e00e      	b.n	8002b98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b0f      	cmp	r3, #15
 8002b7e:	d80a      	bhi.n	8002b96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b80:	2200      	movs	r2, #0
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b88:	f000 fb91 	bl	80032ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b8c:	4a06      	ldr	r2, [pc, #24]	; (8002ba8 <HAL_InitTick+0x5c>)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
 8002b94:	e000      	b.n	8002b98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	20000000 	.word	0x20000000
 8002ba4:	20000008 	.word	0x20000008
 8002ba8:	20000004 	.word	0x20000004

08002bac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bb0:	4b06      	ldr	r3, [pc, #24]	; (8002bcc <HAL_IncTick+0x20>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	4b06      	ldr	r3, [pc, #24]	; (8002bd0 <HAL_IncTick+0x24>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4413      	add	r3, r2
 8002bbc:	4a04      	ldr	r2, [pc, #16]	; (8002bd0 <HAL_IncTick+0x24>)
 8002bbe:	6013      	str	r3, [r2, #0]
}
 8002bc0:	bf00      	nop
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	20000008 	.word	0x20000008
 8002bd0:	200003c0 	.word	0x200003c0

08002bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8002bd8:	4b03      	ldr	r3, [pc, #12]	; (8002be8 <HAL_GetTick+0x14>)
 8002bda:	681b      	ldr	r3, [r3, #0]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	200003c0 	.word	0x200003c0

08002bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bf4:	f7ff ffee 	bl	8002bd4 <HAL_GetTick>
 8002bf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c04:	d005      	beq.n	8002c12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c06:	4b0a      	ldr	r3, [pc, #40]	; (8002c30 <HAL_Delay+0x44>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4413      	add	r3, r2
 8002c10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c12:	bf00      	nop
 8002c14:	f7ff ffde 	bl	8002bd4 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d8f7      	bhi.n	8002c14 <HAL_Delay+0x28>
  {
  }
}
 8002c24:	bf00      	nop
 8002c26:	bf00      	nop
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	20000008 	.word	0x20000008

08002c34 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e033      	b.n	8002cb2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d109      	bne.n	8002c66 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f7fe f81e 	bl	8000c94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	f003 0310 	and.w	r3, r3, #16
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d118      	bne.n	8002ca4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c7a:	f023 0302 	bic.w	r3, r3, #2
 8002c7e:	f043 0202 	orr.w	r2, r3, #2
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f93a 	bl	8002f00 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	f023 0303 	bic.w	r3, r3, #3
 8002c9a:	f043 0201 	orr.w	r2, r3, #1
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	641a      	str	r2, [r3, #64]	; 0x40
 8002ca2:	e001      	b.n	8002ca8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
	...

08002cbc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d101      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0x1c>
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	e105      	b.n	8002ee4 <HAL_ADC_ConfigChannel+0x228>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2b09      	cmp	r3, #9
 8002ce6:	d925      	bls.n	8002d34 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68d9      	ldr	r1, [r3, #12]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	4413      	add	r3, r2
 8002cfc:	3b1e      	subs	r3, #30
 8002cfe:	2207      	movs	r2, #7
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	43da      	mvns	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	400a      	ands	r2, r1
 8002d0c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68d9      	ldr	r1, [r3, #12]
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	689a      	ldr	r2, [r3, #8]
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	4618      	mov	r0, r3
 8002d20:	4603      	mov	r3, r0
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	4403      	add	r3, r0
 8002d26:	3b1e      	subs	r3, #30
 8002d28:	409a      	lsls	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	60da      	str	r2, [r3, #12]
 8002d32:	e022      	b.n	8002d7a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6919      	ldr	r1, [r3, #16]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	461a      	mov	r2, r3
 8002d42:	4613      	mov	r3, r2
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	4413      	add	r3, r2
 8002d48:	2207      	movs	r2, #7
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	43da      	mvns	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	400a      	ands	r2, r1
 8002d56:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6919      	ldr	r1, [r3, #16]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	689a      	ldr	r2, [r3, #8]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	4618      	mov	r0, r3
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	4403      	add	r3, r0
 8002d70:	409a      	lsls	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2b06      	cmp	r3, #6
 8002d80:	d824      	bhi.n	8002dcc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	4413      	add	r3, r2
 8002d92:	3b05      	subs	r3, #5
 8002d94:	221f      	movs	r2, #31
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	43da      	mvns	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	400a      	ands	r2, r1
 8002da2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	4618      	mov	r0, r3
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	4613      	mov	r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	4413      	add	r3, r2
 8002dbc:	3b05      	subs	r3, #5
 8002dbe:	fa00 f203 	lsl.w	r2, r0, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	635a      	str	r2, [r3, #52]	; 0x34
 8002dca:	e04c      	b.n	8002e66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	2b0c      	cmp	r3, #12
 8002dd2:	d824      	bhi.n	8002e1e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685a      	ldr	r2, [r3, #4]
 8002dde:	4613      	mov	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	4413      	add	r3, r2
 8002de4:	3b23      	subs	r3, #35	; 0x23
 8002de6:	221f      	movs	r2, #31
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	43da      	mvns	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	400a      	ands	r2, r1
 8002df4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	4618      	mov	r0, r3
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4413      	add	r3, r2
 8002e0e:	3b23      	subs	r3, #35	; 0x23
 8002e10:	fa00 f203 	lsl.w	r2, r0, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	631a      	str	r2, [r3, #48]	; 0x30
 8002e1c:	e023      	b.n	8002e66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	3b41      	subs	r3, #65	; 0x41
 8002e30:	221f      	movs	r2, #31
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	43da      	mvns	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	400a      	ands	r2, r1
 8002e3e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	4613      	mov	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	4413      	add	r3, r2
 8002e58:	3b41      	subs	r3, #65	; 0x41
 8002e5a:	fa00 f203 	lsl.w	r2, r0, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e66:	4b22      	ldr	r3, [pc, #136]	; (8002ef0 <HAL_ADC_ConfigChannel+0x234>)
 8002e68:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a21      	ldr	r2, [pc, #132]	; (8002ef4 <HAL_ADC_ConfigChannel+0x238>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d109      	bne.n	8002e88 <HAL_ADC_ConfigChannel+0x1cc>
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2b12      	cmp	r3, #18
 8002e7a:	d105      	bne.n	8002e88 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a19      	ldr	r2, [pc, #100]	; (8002ef4 <HAL_ADC_ConfigChannel+0x238>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d123      	bne.n	8002eda <HAL_ADC_ConfigChannel+0x21e>
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2b10      	cmp	r3, #16
 8002e98:	d003      	beq.n	8002ea2 <HAL_ADC_ConfigChannel+0x1e6>
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2b11      	cmp	r3, #17
 8002ea0:	d11b      	bne.n	8002eda <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2b10      	cmp	r3, #16
 8002eb4:	d111      	bne.n	8002eda <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002eb6:	4b10      	ldr	r3, [pc, #64]	; (8002ef8 <HAL_ADC_ConfigChannel+0x23c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a10      	ldr	r2, [pc, #64]	; (8002efc <HAL_ADC_ConfigChannel+0x240>)
 8002ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec0:	0c9a      	lsrs	r2, r3, #18
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	4413      	add	r3, r2
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ecc:	e002      	b.n	8002ed4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1f9      	bne.n	8002ece <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	40012300 	.word	0x40012300
 8002ef4:	40012000 	.word	0x40012000
 8002ef8:	20000000 	.word	0x20000000
 8002efc:	431bde83 	.word	0x431bde83

08002f00 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f08:	4b79      	ldr	r3, [pc, #484]	; (80030f0 <ADC_Init+0x1f0>)
 8002f0a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	431a      	orrs	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6859      	ldr	r1, [r3, #4]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	021a      	lsls	r2, r3, #8
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002f58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6859      	ldr	r1, [r3, #4]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6899      	ldr	r1, [r3, #8]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68da      	ldr	r2, [r3, #12]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f92:	4a58      	ldr	r2, [pc, #352]	; (80030f4 <ADC_Init+0x1f4>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d022      	beq.n	8002fde <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689a      	ldr	r2, [r3, #8]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fa6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6899      	ldr	r1, [r3, #8]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002fc8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	6899      	ldr	r1, [r3, #8]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	609a      	str	r2, [r3, #8]
 8002fdc:	e00f      	b.n	8002ffe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ffc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 0202 	bic.w	r2, r2, #2
 800300c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6899      	ldr	r1, [r3, #8]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	7e1b      	ldrb	r3, [r3, #24]
 8003018:	005a      	lsls	r2, r3, #1
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	430a      	orrs	r2, r1
 8003020:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d01b      	beq.n	8003064 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800303a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800304a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6859      	ldr	r1, [r3, #4]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	3b01      	subs	r3, #1
 8003058:	035a      	lsls	r2, r3, #13
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	430a      	orrs	r2, r1
 8003060:	605a      	str	r2, [r3, #4]
 8003062:	e007      	b.n	8003074 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003072:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003082:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	3b01      	subs	r3, #1
 8003090:	051a      	lsls	r2, r3, #20
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80030a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6899      	ldr	r1, [r3, #8]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030b6:	025a      	lsls	r2, r3, #9
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	430a      	orrs	r2, r1
 80030be:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689a      	ldr	r2, [r3, #8]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6899      	ldr	r1, [r3, #8]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	029a      	lsls	r2, r3, #10
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	430a      	orrs	r2, r1
 80030e2:	609a      	str	r2, [r3, #8]
}
 80030e4:	bf00      	nop
 80030e6:	3714      	adds	r7, #20
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr
 80030f0:	40012300 	.word	0x40012300
 80030f4:	0f000001 	.word	0x0f000001

080030f8 <__NVIC_SetPriorityGrouping>:
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f003 0307 	and.w	r3, r3, #7
 8003106:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003108:	4b0c      	ldr	r3, [pc, #48]	; (800313c <__NVIC_SetPriorityGrouping+0x44>)
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003114:	4013      	ands	r3, r2
 8003116:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003120:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003128:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800312a:	4a04      	ldr	r2, [pc, #16]	; (800313c <__NVIC_SetPriorityGrouping+0x44>)
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	60d3      	str	r3, [r2, #12]
}
 8003130:	bf00      	nop
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr
 800313c:	e000ed00 	.word	0xe000ed00

08003140 <__NVIC_GetPriorityGrouping>:
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003144:	4b04      	ldr	r3, [pc, #16]	; (8003158 <__NVIC_GetPriorityGrouping+0x18>)
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	0a1b      	lsrs	r3, r3, #8
 800314a:	f003 0307 	and.w	r3, r3, #7
}
 800314e:	4618      	mov	r0, r3
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	e000ed00 	.word	0xe000ed00

0800315c <__NVIC_EnableIRQ>:
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	4603      	mov	r3, r0
 8003164:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316a:	2b00      	cmp	r3, #0
 800316c:	db0b      	blt.n	8003186 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800316e:	79fb      	ldrb	r3, [r7, #7]
 8003170:	f003 021f 	and.w	r2, r3, #31
 8003174:	4907      	ldr	r1, [pc, #28]	; (8003194 <__NVIC_EnableIRQ+0x38>)
 8003176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317a:	095b      	lsrs	r3, r3, #5
 800317c:	2001      	movs	r0, #1
 800317e:	fa00 f202 	lsl.w	r2, r0, r2
 8003182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	e000e100 	.word	0xe000e100

08003198 <__NVIC_SetPriority>:
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	4603      	mov	r3, r0
 80031a0:	6039      	str	r1, [r7, #0]
 80031a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	db0a      	blt.n	80031c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	b2da      	uxtb	r2, r3
 80031b0:	490c      	ldr	r1, [pc, #48]	; (80031e4 <__NVIC_SetPriority+0x4c>)
 80031b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b6:	0112      	lsls	r2, r2, #4
 80031b8:	b2d2      	uxtb	r2, r2
 80031ba:	440b      	add	r3, r1
 80031bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80031c0:	e00a      	b.n	80031d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	b2da      	uxtb	r2, r3
 80031c6:	4908      	ldr	r1, [pc, #32]	; (80031e8 <__NVIC_SetPriority+0x50>)
 80031c8:	79fb      	ldrb	r3, [r7, #7]
 80031ca:	f003 030f 	and.w	r3, r3, #15
 80031ce:	3b04      	subs	r3, #4
 80031d0:	0112      	lsls	r2, r2, #4
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	440b      	add	r3, r1
 80031d6:	761a      	strb	r2, [r3, #24]
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	e000e100 	.word	0xe000e100
 80031e8:	e000ed00 	.word	0xe000ed00

080031ec <NVIC_EncodePriority>:
{
 80031ec:	b480      	push	{r7}
 80031ee:	b089      	sub	sp, #36	; 0x24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	f1c3 0307 	rsb	r3, r3, #7
 8003206:	2b04      	cmp	r3, #4
 8003208:	bf28      	it	cs
 800320a:	2304      	movcs	r3, #4
 800320c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	3304      	adds	r3, #4
 8003212:	2b06      	cmp	r3, #6
 8003214:	d902      	bls.n	800321c <NVIC_EncodePriority+0x30>
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	3b03      	subs	r3, #3
 800321a:	e000      	b.n	800321e <NVIC_EncodePriority+0x32>
 800321c:	2300      	movs	r3, #0
 800321e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003220:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	fa02 f303 	lsl.w	r3, r2, r3
 800322a:	43da      	mvns	r2, r3
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	401a      	ands	r2, r3
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003234:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	fa01 f303 	lsl.w	r3, r1, r3
 800323e:	43d9      	mvns	r1, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003244:	4313      	orrs	r3, r2
}
 8003246:	4618      	mov	r0, r3
 8003248:	3724      	adds	r7, #36	; 0x24
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
	...

08003254 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	3b01      	subs	r3, #1
 8003260:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003264:	d301      	bcc.n	800326a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003266:	2301      	movs	r3, #1
 8003268:	e00f      	b.n	800328a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800326a:	4a0a      	ldr	r2, [pc, #40]	; (8003294 <SysTick_Config+0x40>)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3b01      	subs	r3, #1
 8003270:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003272:	210f      	movs	r1, #15
 8003274:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003278:	f7ff ff8e 	bl	8003198 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800327c:	4b05      	ldr	r3, [pc, #20]	; (8003294 <SysTick_Config+0x40>)
 800327e:	2200      	movs	r2, #0
 8003280:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003282:	4b04      	ldr	r3, [pc, #16]	; (8003294 <SysTick_Config+0x40>)
 8003284:	2207      	movs	r2, #7
 8003286:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	e000e010 	.word	0xe000e010

08003298 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f7ff ff29 	bl	80030f8 <__NVIC_SetPriorityGrouping>
}
 80032a6:	bf00      	nop
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b086      	sub	sp, #24
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	4603      	mov	r3, r0
 80032b6:	60b9      	str	r1, [r7, #8]
 80032b8:	607a      	str	r2, [r7, #4]
 80032ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032bc:	2300      	movs	r3, #0
 80032be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032c0:	f7ff ff3e 	bl	8003140 <__NVIC_GetPriorityGrouping>
 80032c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	68b9      	ldr	r1, [r7, #8]
 80032ca:	6978      	ldr	r0, [r7, #20]
 80032cc:	f7ff ff8e 	bl	80031ec <NVIC_EncodePriority>
 80032d0:	4602      	mov	r2, r0
 80032d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032d6:	4611      	mov	r1, r2
 80032d8:	4618      	mov	r0, r3
 80032da:	f7ff ff5d 	bl	8003198 <__NVIC_SetPriority>
}
 80032de:	bf00      	nop
 80032e0:	3718      	adds	r7, #24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b082      	sub	sp, #8
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	4603      	mov	r3, r0
 80032ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff ff31 	bl	800315c <__NVIC_EnableIRQ>
}
 80032fa:	bf00      	nop
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b082      	sub	sp, #8
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7ff ffa2 	bl	8003254 <SysTick_Config>
 8003310:	4603      	mov	r3, r0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b082      	sub	sp, #8
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d101      	bne.n	800332c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e00e      	b.n	800334a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	795b      	ldrb	r3, [r3, #5]
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d105      	bne.n	8003342 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f7fd fddf 	bl	8000f00 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2201      	movs	r2, #1
 8003346:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
	...

08003354 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800335c:	2300      	movs	r3, #0
 800335e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003360:	f7ff fc38 	bl	8002bd4 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e099      	b.n	80034a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2202      	movs	r2, #2
 8003374:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 0201 	bic.w	r2, r2, #1
 800338e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003390:	e00f      	b.n	80033b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003392:	f7ff fc1f 	bl	8002bd4 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b05      	cmp	r3, #5
 800339e:	d908      	bls.n	80033b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2220      	movs	r2, #32
 80033a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2203      	movs	r2, #3
 80033aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e078      	b.n	80034a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1e8      	bne.n	8003392 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	4b38      	ldr	r3, [pc, #224]	; (80034ac <HAL_DMA_Init+0x158>)
 80033cc:	4013      	ands	r3, r2
 80033ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a1b      	ldr	r3, [r3, #32]
 80033fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	4313      	orrs	r3, r2
 8003402:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003408:	2b04      	cmp	r3, #4
 800340a:	d107      	bne.n	800341c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003414:	4313      	orrs	r3, r2
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	4313      	orrs	r3, r2
 800341a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	697a      	ldr	r2, [r7, #20]
 8003422:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	f023 0307 	bic.w	r3, r3, #7
 8003432:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	4313      	orrs	r3, r2
 800343c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	2b04      	cmp	r3, #4
 8003444:	d117      	bne.n	8003476 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	4313      	orrs	r3, r2
 800344e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00e      	beq.n	8003476 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 fa7b 	bl	8003954 <DMA_CheckFifoParam>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d008      	beq.n	8003476 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2240      	movs	r2, #64	; 0x40
 8003468:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003472:	2301      	movs	r3, #1
 8003474:	e016      	b.n	80034a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 fa32 	bl	80038e8 <DMA_CalcBaseAndBitshift>
 8003484:	4603      	mov	r3, r0
 8003486:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800348c:	223f      	movs	r2, #63	; 0x3f
 800348e:	409a      	lsls	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3718      	adds	r7, #24
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	f010803f 	.word	0xf010803f

080034b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034bc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80034be:	f7ff fb89 	bl	8002bd4 <HAL_GetTick>
 80034c2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d008      	beq.n	80034e2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2280      	movs	r2, #128	; 0x80
 80034d4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e052      	b.n	8003588 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 0216 	bic.w	r2, r2, #22
 80034f0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	695a      	ldr	r2, [r3, #20]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003500:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003506:	2b00      	cmp	r3, #0
 8003508:	d103      	bne.n	8003512 <HAL_DMA_Abort+0x62>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800350e:	2b00      	cmp	r3, #0
 8003510:	d007      	beq.n	8003522 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0208 	bic.w	r2, r2, #8
 8003520:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 0201 	bic.w	r2, r2, #1
 8003530:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003532:	e013      	b.n	800355c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003534:	f7ff fb4e 	bl	8002bd4 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b05      	cmp	r3, #5
 8003540:	d90c      	bls.n	800355c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2220      	movs	r2, #32
 8003546:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2203      	movs	r2, #3
 800354c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e015      	b.n	8003588 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1e4      	bne.n	8003534 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800356e:	223f      	movs	r2, #63	; 0x3f
 8003570:	409a      	lsls	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d004      	beq.n	80035ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2280      	movs	r2, #128	; 0x80
 80035a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e00c      	b.n	80035c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2205      	movs	r2, #5
 80035b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 0201 	bic.w	r2, r2, #1
 80035c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80035dc:	2300      	movs	r3, #0
 80035de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80035e0:	4b8e      	ldr	r3, [pc, #568]	; (800381c <HAL_DMA_IRQHandler+0x248>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a8e      	ldr	r2, [pc, #568]	; (8003820 <HAL_DMA_IRQHandler+0x24c>)
 80035e6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ea:	0a9b      	lsrs	r3, r3, #10
 80035ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035fe:	2208      	movs	r2, #8
 8003600:	409a      	lsls	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	4013      	ands	r3, r2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d01a      	beq.n	8003640 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b00      	cmp	r3, #0
 8003616:	d013      	beq.n	8003640 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 0204 	bic.w	r2, r2, #4
 8003626:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800362c:	2208      	movs	r2, #8
 800362e:	409a      	lsls	r2, r3
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003638:	f043 0201 	orr.w	r2, r3, #1
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003644:	2201      	movs	r2, #1
 8003646:	409a      	lsls	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	4013      	ands	r3, r2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d012      	beq.n	8003676 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00b      	beq.n	8003676 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003662:	2201      	movs	r2, #1
 8003664:	409a      	lsls	r2, r3
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800366e:	f043 0202 	orr.w	r2, r3, #2
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800367a:	2204      	movs	r2, #4
 800367c:	409a      	lsls	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	4013      	ands	r3, r2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d012      	beq.n	80036ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00b      	beq.n	80036ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003698:	2204      	movs	r2, #4
 800369a:	409a      	lsls	r2, r3
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a4:	f043 0204 	orr.w	r2, r3, #4
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b0:	2210      	movs	r2, #16
 80036b2:	409a      	lsls	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4013      	ands	r3, r2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d043      	beq.n	8003744 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0308 	and.w	r3, r3, #8
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d03c      	beq.n	8003744 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ce:	2210      	movs	r2, #16
 80036d0:	409a      	lsls	r2, r3
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d018      	beq.n	8003716 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d108      	bne.n	8003704 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d024      	beq.n	8003744 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	4798      	blx	r3
 8003702:	e01f      	b.n	8003744 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003708:	2b00      	cmp	r3, #0
 800370a:	d01b      	beq.n	8003744 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	4798      	blx	r3
 8003714:	e016      	b.n	8003744 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003720:	2b00      	cmp	r3, #0
 8003722:	d107      	bne.n	8003734 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f022 0208 	bic.w	r2, r2, #8
 8003732:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003738:	2b00      	cmp	r3, #0
 800373a:	d003      	beq.n	8003744 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003748:	2220      	movs	r2, #32
 800374a:	409a      	lsls	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	4013      	ands	r3, r2
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 808f 	beq.w	8003874 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0310 	and.w	r3, r3, #16
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 8087 	beq.w	8003874 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800376a:	2220      	movs	r2, #32
 800376c:	409a      	lsls	r2, r3
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b05      	cmp	r3, #5
 800377c:	d136      	bne.n	80037ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 0216 	bic.w	r2, r2, #22
 800378c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	695a      	ldr	r2, [r3, #20]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800379c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d103      	bne.n	80037ae <HAL_DMA_IRQHandler+0x1da>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d007      	beq.n	80037be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 0208 	bic.w	r2, r2, #8
 80037bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c2:	223f      	movs	r2, #63	; 0x3f
 80037c4:	409a      	lsls	r2, r3
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d07e      	beq.n	80038e0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	4798      	blx	r3
        }
        return;
 80037ea:	e079      	b.n	80038e0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d01d      	beq.n	8003836 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d10d      	bne.n	8003824 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380c:	2b00      	cmp	r3, #0
 800380e:	d031      	beq.n	8003874 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	4798      	blx	r3
 8003818:	e02c      	b.n	8003874 <HAL_DMA_IRQHandler+0x2a0>
 800381a:	bf00      	nop
 800381c:	20000000 	.word	0x20000000
 8003820:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003828:	2b00      	cmp	r3, #0
 800382a:	d023      	beq.n	8003874 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	4798      	blx	r3
 8003834:	e01e      	b.n	8003874 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10f      	bne.n	8003864 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f022 0210 	bic.w	r2, r2, #16
 8003852:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003878:	2b00      	cmp	r3, #0
 800387a:	d032      	beq.n	80038e2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	2b00      	cmp	r3, #0
 8003886:	d022      	beq.n	80038ce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2205      	movs	r2, #5
 800388c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 0201 	bic.w	r2, r2, #1
 800389e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	3301      	adds	r3, #1
 80038a4:	60bb      	str	r3, [r7, #8]
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d307      	bcc.n	80038bc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1f2      	bne.n	80038a0 <HAL_DMA_IRQHandler+0x2cc>
 80038ba:	e000      	b.n	80038be <HAL_DMA_IRQHandler+0x2ea>
          break;
 80038bc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d005      	beq.n	80038e2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	4798      	blx	r3
 80038de:	e000      	b.n	80038e2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80038e0:	bf00      	nop
    }
  }
}
 80038e2:	3718      	adds	r7, #24
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	3b10      	subs	r3, #16
 80038f8:	4a14      	ldr	r2, [pc, #80]	; (800394c <DMA_CalcBaseAndBitshift+0x64>)
 80038fa:	fba2 2303 	umull	r2, r3, r2, r3
 80038fe:	091b      	lsrs	r3, r3, #4
 8003900:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003902:	4a13      	ldr	r2, [pc, #76]	; (8003950 <DMA_CalcBaseAndBitshift+0x68>)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	4413      	add	r3, r2
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	461a      	mov	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2b03      	cmp	r3, #3
 8003914:	d909      	bls.n	800392a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800391e:	f023 0303 	bic.w	r3, r3, #3
 8003922:	1d1a      	adds	r2, r3, #4
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	659a      	str	r2, [r3, #88]	; 0x58
 8003928:	e007      	b.n	800393a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003932:	f023 0303 	bic.w	r3, r3, #3
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800393e:	4618      	mov	r0, r3
 8003940:	3714      	adds	r7, #20
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	aaaaaaab 	.word	0xaaaaaaab
 8003950:	08007e84 	.word	0x08007e84

08003954 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800395c:	2300      	movs	r3, #0
 800395e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003964:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d11f      	bne.n	80039ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	2b03      	cmp	r3, #3
 8003972:	d856      	bhi.n	8003a22 <DMA_CheckFifoParam+0xce>
 8003974:	a201      	add	r2, pc, #4	; (adr r2, 800397c <DMA_CheckFifoParam+0x28>)
 8003976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800397a:	bf00      	nop
 800397c:	0800398d 	.word	0x0800398d
 8003980:	0800399f 	.word	0x0800399f
 8003984:	0800398d 	.word	0x0800398d
 8003988:	08003a23 	.word	0x08003a23
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003990:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d046      	beq.n	8003a26 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800399c:	e043      	b.n	8003a26 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039a6:	d140      	bne.n	8003a2a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039ac:	e03d      	b.n	8003a2a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039b6:	d121      	bne.n	80039fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	2b03      	cmp	r3, #3
 80039bc:	d837      	bhi.n	8003a2e <DMA_CheckFifoParam+0xda>
 80039be:	a201      	add	r2, pc, #4	; (adr r2, 80039c4 <DMA_CheckFifoParam+0x70>)
 80039c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c4:	080039d5 	.word	0x080039d5
 80039c8:	080039db 	.word	0x080039db
 80039cc:	080039d5 	.word	0x080039d5
 80039d0:	080039ed 	.word	0x080039ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	73fb      	strb	r3, [r7, #15]
      break;
 80039d8:	e030      	b.n	8003a3c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d025      	beq.n	8003a32 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039ea:	e022      	b.n	8003a32 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039f4:	d11f      	bne.n	8003a36 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80039fa:	e01c      	b.n	8003a36 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d903      	bls.n	8003a0a <DMA_CheckFifoParam+0xb6>
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	2b03      	cmp	r3, #3
 8003a06:	d003      	beq.n	8003a10 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a08:	e018      	b.n	8003a3c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	73fb      	strb	r3, [r7, #15]
      break;
 8003a0e:	e015      	b.n	8003a3c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00e      	beq.n	8003a3a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a20:	e00b      	b.n	8003a3a <DMA_CheckFifoParam+0xe6>
      break;
 8003a22:	bf00      	nop
 8003a24:	e00a      	b.n	8003a3c <DMA_CheckFifoParam+0xe8>
      break;
 8003a26:	bf00      	nop
 8003a28:	e008      	b.n	8003a3c <DMA_CheckFifoParam+0xe8>
      break;
 8003a2a:	bf00      	nop
 8003a2c:	e006      	b.n	8003a3c <DMA_CheckFifoParam+0xe8>
      break;
 8003a2e:	bf00      	nop
 8003a30:	e004      	b.n	8003a3c <DMA_CheckFifoParam+0xe8>
      break;
 8003a32:	bf00      	nop
 8003a34:	e002      	b.n	8003a3c <DMA_CheckFifoParam+0xe8>
      break;   
 8003a36:	bf00      	nop
 8003a38:	e000      	b.n	8003a3c <DMA_CheckFifoParam+0xe8>
      break;
 8003a3a:	bf00      	nop
    }
  } 
  
  return status; 
 8003a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3714      	adds	r7, #20
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop

08003a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b089      	sub	sp, #36	; 0x24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a56:	2300      	movs	r3, #0
 8003a58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a62:	2300      	movs	r3, #0
 8003a64:	61fb      	str	r3, [r7, #28]
 8003a66:	e153      	b.n	8003d10 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a68:	2201      	movs	r2, #1
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	f040 8142 	bne.w	8003d0a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f003 0303 	and.w	r3, r3, #3
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d005      	beq.n	8003a9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d130      	bne.n	8003b00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	2203      	movs	r2, #3
 8003aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003aae:	43db      	mvns	r3, r3
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	68da      	ldr	r2, [r3, #12]
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac2:	69ba      	ldr	r2, [r7, #24]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	43db      	mvns	r3, r3
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	091b      	lsrs	r3, r3, #4
 8003aea:	f003 0201 	and.w	r2, r3, #1
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f003 0303 	and.w	r3, r3, #3
 8003b08:	2b03      	cmp	r3, #3
 8003b0a:	d017      	beq.n	8003b3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	2203      	movs	r2, #3
 8003b18:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1c:	43db      	mvns	r3, r3
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	4013      	ands	r3, r2
 8003b22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f003 0303 	and.w	r3, r3, #3
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d123      	bne.n	8003b90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	08da      	lsrs	r2, r3, #3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	3208      	adds	r2, #8
 8003b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	f003 0307 	and.w	r3, r3, #7
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	220f      	movs	r2, #15
 8003b60:	fa02 f303 	lsl.w	r3, r2, r3
 8003b64:	43db      	mvns	r3, r3
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	4013      	ands	r3, r2
 8003b6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	691a      	ldr	r2, [r3, #16]
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	f003 0307 	and.w	r3, r3, #7
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	08da      	lsrs	r2, r3, #3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	3208      	adds	r2, #8
 8003b8a:	69b9      	ldr	r1, [r7, #24]
 8003b8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	2203      	movs	r2, #3
 8003b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba0:	43db      	mvns	r3, r3
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f003 0203 	and.w	r2, r3, #3
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 809c 	beq.w	8003d0a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	60fb      	str	r3, [r7, #12]
 8003bd6:	4b54      	ldr	r3, [pc, #336]	; (8003d28 <HAL_GPIO_Init+0x2dc>)
 8003bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bda:	4a53      	ldr	r2, [pc, #332]	; (8003d28 <HAL_GPIO_Init+0x2dc>)
 8003bdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003be0:	6453      	str	r3, [r2, #68]	; 0x44
 8003be2:	4b51      	ldr	r3, [pc, #324]	; (8003d28 <HAL_GPIO_Init+0x2dc>)
 8003be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bea:	60fb      	str	r3, [r7, #12]
 8003bec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bee:	4a4f      	ldr	r2, [pc, #316]	; (8003d2c <HAL_GPIO_Init+0x2e0>)
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	089b      	lsrs	r3, r3, #2
 8003bf4:	3302      	adds	r3, #2
 8003bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	f003 0303 	and.w	r3, r3, #3
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	220f      	movs	r2, #15
 8003c06:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0a:	43db      	mvns	r3, r3
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a46      	ldr	r2, [pc, #280]	; (8003d30 <HAL_GPIO_Init+0x2e4>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d013      	beq.n	8003c42 <HAL_GPIO_Init+0x1f6>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a45      	ldr	r2, [pc, #276]	; (8003d34 <HAL_GPIO_Init+0x2e8>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d00d      	beq.n	8003c3e <HAL_GPIO_Init+0x1f2>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a44      	ldr	r2, [pc, #272]	; (8003d38 <HAL_GPIO_Init+0x2ec>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d007      	beq.n	8003c3a <HAL_GPIO_Init+0x1ee>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a43      	ldr	r2, [pc, #268]	; (8003d3c <HAL_GPIO_Init+0x2f0>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d101      	bne.n	8003c36 <HAL_GPIO_Init+0x1ea>
 8003c32:	2303      	movs	r3, #3
 8003c34:	e006      	b.n	8003c44 <HAL_GPIO_Init+0x1f8>
 8003c36:	2307      	movs	r3, #7
 8003c38:	e004      	b.n	8003c44 <HAL_GPIO_Init+0x1f8>
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	e002      	b.n	8003c44 <HAL_GPIO_Init+0x1f8>
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e000      	b.n	8003c44 <HAL_GPIO_Init+0x1f8>
 8003c42:	2300      	movs	r3, #0
 8003c44:	69fa      	ldr	r2, [r7, #28]
 8003c46:	f002 0203 	and.w	r2, r2, #3
 8003c4a:	0092      	lsls	r2, r2, #2
 8003c4c:	4093      	lsls	r3, r2
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c54:	4935      	ldr	r1, [pc, #212]	; (8003d2c <HAL_GPIO_Init+0x2e0>)
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	089b      	lsrs	r3, r3, #2
 8003c5a:	3302      	adds	r3, #2
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c62:	4b37      	ldr	r3, [pc, #220]	; (8003d40 <HAL_GPIO_Init+0x2f4>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	43db      	mvns	r3, r3
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d003      	beq.n	8003c86 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8003c7e:	69ba      	ldr	r2, [r7, #24]
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c86:	4a2e      	ldr	r2, [pc, #184]	; (8003d40 <HAL_GPIO_Init+0x2f4>)
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c8c:	4b2c      	ldr	r3, [pc, #176]	; (8003d40 <HAL_GPIO_Init+0x2f4>)
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	43db      	mvns	r3, r3
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d003      	beq.n	8003cb0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cb0:	4a23      	ldr	r2, [pc, #140]	; (8003d40 <HAL_GPIO_Init+0x2f4>)
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003cb6:	4b22      	ldr	r3, [pc, #136]	; (8003d40 <HAL_GPIO_Init+0x2f4>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	43db      	mvns	r3, r3
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d003      	beq.n	8003cda <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8003cd2:	69ba      	ldr	r2, [r7, #24]
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cda:	4a19      	ldr	r2, [pc, #100]	; (8003d40 <HAL_GPIO_Init+0x2f4>)
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ce0:	4b17      	ldr	r3, [pc, #92]	; (8003d40 <HAL_GPIO_Init+0x2f4>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	43db      	mvns	r3, r3
 8003cea:	69ba      	ldr	r2, [r7, #24]
 8003cec:	4013      	ands	r3, r2
 8003cee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d003      	beq.n	8003d04 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d04:	4a0e      	ldr	r2, [pc, #56]	; (8003d40 <HAL_GPIO_Init+0x2f4>)
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	61fb      	str	r3, [r7, #28]
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	2b0f      	cmp	r3, #15
 8003d14:	f67f aea8 	bls.w	8003a68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d18:	bf00      	nop
 8003d1a:	bf00      	nop
 8003d1c:	3724      	adds	r7, #36	; 0x24
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	40013800 	.word	0x40013800
 8003d30:	40020000 	.word	0x40020000
 8003d34:	40020400 	.word	0x40020400
 8003d38:	40020800 	.word	0x40020800
 8003d3c:	40020c00 	.word	0x40020c00
 8003d40:	40013c00 	.word	0x40013c00

08003d44 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d56:	887a      	ldrh	r2, [r7, #2]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	041a      	lsls	r2, r3, #16
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	43d9      	mvns	r1, r3
 8003d62:	887b      	ldrh	r3, [r7, #2]
 8003d64:	400b      	ands	r3, r1
 8003d66:	431a      	orrs	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	619a      	str	r2, [r3, #24]
}
 8003d6c:	bf00      	nop
 8003d6e:	3714      	adds	r7, #20
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e12b      	b.n	8003fe2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d106      	bne.n	8003da4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7fd fbbc 	bl	800151c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2224      	movs	r2, #36	; 0x24
 8003da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f022 0201 	bic.w	r2, r2, #1
 8003dba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003dda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ddc:	f001 fac4 	bl	8005368 <HAL_RCC_GetPCLK1Freq>
 8003de0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	4a81      	ldr	r2, [pc, #516]	; (8003fec <HAL_I2C_Init+0x274>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d807      	bhi.n	8003dfc <HAL_I2C_Init+0x84>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	4a80      	ldr	r2, [pc, #512]	; (8003ff0 <HAL_I2C_Init+0x278>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	bf94      	ite	ls
 8003df4:	2301      	movls	r3, #1
 8003df6:	2300      	movhi	r3, #0
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	e006      	b.n	8003e0a <HAL_I2C_Init+0x92>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	4a7d      	ldr	r2, [pc, #500]	; (8003ff4 <HAL_I2C_Init+0x27c>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	bf94      	ite	ls
 8003e04:	2301      	movls	r3, #1
 8003e06:	2300      	movhi	r3, #0
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d001      	beq.n	8003e12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e0e7      	b.n	8003fe2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	4a78      	ldr	r2, [pc, #480]	; (8003ff8 <HAL_I2C_Init+0x280>)
 8003e16:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1a:	0c9b      	lsrs	r3, r3, #18
 8003e1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68ba      	ldr	r2, [r7, #8]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	4a6a      	ldr	r2, [pc, #424]	; (8003fec <HAL_I2C_Init+0x274>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d802      	bhi.n	8003e4c <HAL_I2C_Init+0xd4>
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	3301      	adds	r3, #1
 8003e4a:	e009      	b.n	8003e60 <HAL_I2C_Init+0xe8>
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e52:	fb02 f303 	mul.w	r3, r2, r3
 8003e56:	4a69      	ldr	r2, [pc, #420]	; (8003ffc <HAL_I2C_Init+0x284>)
 8003e58:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5c:	099b      	lsrs	r3, r3, #6
 8003e5e:	3301      	adds	r3, #1
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	6812      	ldr	r2, [r2, #0]
 8003e64:	430b      	orrs	r3, r1
 8003e66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	69db      	ldr	r3, [r3, #28]
 8003e6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	495c      	ldr	r1, [pc, #368]	; (8003fec <HAL_I2C_Init+0x274>)
 8003e7c:	428b      	cmp	r3, r1
 8003e7e:	d819      	bhi.n	8003eb4 <HAL_I2C_Init+0x13c>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	1e59      	subs	r1, r3, #1
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e8e:	1c59      	adds	r1, r3, #1
 8003e90:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e94:	400b      	ands	r3, r1
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00a      	beq.n	8003eb0 <HAL_I2C_Init+0x138>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	1e59      	subs	r1, r3, #1
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eae:	e051      	b.n	8003f54 <HAL_I2C_Init+0x1dc>
 8003eb0:	2304      	movs	r3, #4
 8003eb2:	e04f      	b.n	8003f54 <HAL_I2C_Init+0x1dc>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d111      	bne.n	8003ee0 <HAL_I2C_Init+0x168>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	1e58      	subs	r0, r3, #1
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6859      	ldr	r1, [r3, #4]
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	005b      	lsls	r3, r3, #1
 8003ec8:	440b      	add	r3, r1
 8003eca:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ece:	3301      	adds	r3, #1
 8003ed0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	bf0c      	ite	eq
 8003ed8:	2301      	moveq	r3, #1
 8003eda:	2300      	movne	r3, #0
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	e012      	b.n	8003f06 <HAL_I2C_Init+0x18e>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	1e58      	subs	r0, r3, #1
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6859      	ldr	r1, [r3, #4]
 8003ee8:	460b      	mov	r3, r1
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	440b      	add	r3, r1
 8003eee:	0099      	lsls	r1, r3, #2
 8003ef0:	440b      	add	r3, r1
 8003ef2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	bf0c      	ite	eq
 8003f00:	2301      	moveq	r3, #1
 8003f02:	2300      	movne	r3, #0
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <HAL_I2C_Init+0x196>
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e022      	b.n	8003f54 <HAL_I2C_Init+0x1dc>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10e      	bne.n	8003f34 <HAL_I2C_Init+0x1bc>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	1e58      	subs	r0, r3, #1
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6859      	ldr	r1, [r3, #4]
 8003f1e:	460b      	mov	r3, r1
 8003f20:	005b      	lsls	r3, r3, #1
 8003f22:	440b      	add	r3, r1
 8003f24:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f28:	3301      	adds	r3, #1
 8003f2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f32:	e00f      	b.n	8003f54 <HAL_I2C_Init+0x1dc>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	1e58      	subs	r0, r3, #1
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6859      	ldr	r1, [r3, #4]
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	440b      	add	r3, r1
 8003f42:	0099      	lsls	r1, r3, #2
 8003f44:	440b      	add	r3, r1
 8003f46:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f54:	6879      	ldr	r1, [r7, #4]
 8003f56:	6809      	ldr	r1, [r1, #0]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	69da      	ldr	r2, [r3, #28]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	430a      	orrs	r2, r1
 8003f76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	6911      	ldr	r1, [r2, #16]
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	68d2      	ldr	r2, [r2, #12]
 8003f8e:	4311      	orrs	r1, r2
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	6812      	ldr	r2, [r2, #0]
 8003f94:	430b      	orrs	r3, r1
 8003f96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	695a      	ldr	r2, [r3, #20]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	431a      	orrs	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f042 0201 	orr.w	r2, r2, #1
 8003fc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2220      	movs	r2, #32
 8003fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3710      	adds	r7, #16
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	000186a0 	.word	0x000186a0
 8003ff0:	001e847f 	.word	0x001e847f
 8003ff4:	003d08ff 	.word	0x003d08ff
 8003ff8:	431bde83 	.word	0x431bde83
 8003ffc:	10624dd3 	.word	0x10624dd3

08004000 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b088      	sub	sp, #32
 8004004:	af02      	add	r7, sp, #8
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	607a      	str	r2, [r7, #4]
 800400a:	461a      	mov	r2, r3
 800400c:	460b      	mov	r3, r1
 800400e:	817b      	strh	r3, [r7, #10]
 8004010:	4613      	mov	r3, r2
 8004012:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004014:	f7fe fdde 	bl	8002bd4 <HAL_GetTick>
 8004018:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b20      	cmp	r3, #32
 8004024:	f040 80e0 	bne.w	80041e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	9300      	str	r3, [sp, #0]
 800402c:	2319      	movs	r3, #25
 800402e:	2201      	movs	r2, #1
 8004030:	4970      	ldr	r1, [pc, #448]	; (80041f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 fe02 	bl	8004c3c <I2C_WaitOnFlagUntilTimeout>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800403e:	2302      	movs	r3, #2
 8004040:	e0d3      	b.n	80041ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004048:	2b01      	cmp	r3, #1
 800404a:	d101      	bne.n	8004050 <HAL_I2C_Master_Transmit+0x50>
 800404c:	2302      	movs	r3, #2
 800404e:	e0cc      	b.n	80041ea <HAL_I2C_Master_Transmit+0x1ea>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b01      	cmp	r3, #1
 8004064:	d007      	beq.n	8004076 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f042 0201 	orr.w	r2, r2, #1
 8004074:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004084:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2221      	movs	r2, #33	; 0x21
 800408a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2210      	movs	r2, #16
 8004092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	893a      	ldrh	r2, [r7, #8]
 80040a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	4a50      	ldr	r2, [pc, #320]	; (80041f8 <HAL_I2C_Master_Transmit+0x1f8>)
 80040b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80040b8:	8979      	ldrh	r1, [r7, #10]
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	6a3a      	ldr	r2, [r7, #32]
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f000 fbbc 	bl	800483c <I2C_MasterRequestWrite>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e08d      	b.n	80041ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ce:	2300      	movs	r3, #0
 80040d0:	613b      	str	r3, [r7, #16]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	613b      	str	r3, [r7, #16]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	613b      	str	r3, [r7, #16]
 80040e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80040e4:	e066      	b.n	80041b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	6a39      	ldr	r1, [r7, #32]
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f000 fe7c 	bl	8004de8 <I2C_WaitOnTXEFlagUntilTimeout>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00d      	beq.n	8004112 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	2b04      	cmp	r3, #4
 80040fc:	d107      	bne.n	800410e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800410c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e06b      	b.n	80041ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004116:	781a      	ldrb	r2, [r3, #0]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004122:	1c5a      	adds	r2, r3, #1
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800412c:	b29b      	uxth	r3, r3
 800412e:	3b01      	subs	r3, #1
 8004130:	b29a      	uxth	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800413a:	3b01      	subs	r3, #1
 800413c:	b29a      	uxth	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	f003 0304 	and.w	r3, r3, #4
 800414c:	2b04      	cmp	r3, #4
 800414e:	d11b      	bne.n	8004188 <HAL_I2C_Master_Transmit+0x188>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004154:	2b00      	cmp	r3, #0
 8004156:	d017      	beq.n	8004188 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	781a      	ldrb	r2, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	1c5a      	adds	r2, r3, #1
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004172:	b29b      	uxth	r3, r3
 8004174:	3b01      	subs	r3, #1
 8004176:	b29a      	uxth	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004180:	3b01      	subs	r3, #1
 8004182:	b29a      	uxth	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	6a39      	ldr	r1, [r7, #32]
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f000 fe6c 	bl	8004e6a <I2C_WaitOnBTFFlagUntilTimeout>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00d      	beq.n	80041b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419c:	2b04      	cmp	r3, #4
 800419e:	d107      	bne.n	80041b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e01a      	b.n	80041ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d194      	bne.n	80040e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2220      	movs	r2, #32
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80041e4:	2300      	movs	r3, #0
 80041e6:	e000      	b.n	80041ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80041e8:	2302      	movs	r3, #2
  }
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3718      	adds	r7, #24
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	00100002 	.word	0x00100002
 80041f8:	ffff0000 	.word	0xffff0000

080041fc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b088      	sub	sp, #32
 8004200:	af02      	add	r7, sp, #8
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	4608      	mov	r0, r1
 8004206:	4611      	mov	r1, r2
 8004208:	461a      	mov	r2, r3
 800420a:	4603      	mov	r3, r0
 800420c:	817b      	strh	r3, [r7, #10]
 800420e:	460b      	mov	r3, r1
 8004210:	813b      	strh	r3, [r7, #8]
 8004212:	4613      	mov	r3, r2
 8004214:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004216:	f7fe fcdd 	bl	8002bd4 <HAL_GetTick>
 800421a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b20      	cmp	r3, #32
 8004226:	f040 80d9 	bne.w	80043dc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	2319      	movs	r3, #25
 8004230:	2201      	movs	r2, #1
 8004232:	496d      	ldr	r1, [pc, #436]	; (80043e8 <HAL_I2C_Mem_Write+0x1ec>)
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f000 fd01 	bl	8004c3c <I2C_WaitOnFlagUntilTimeout>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004240:	2302      	movs	r3, #2
 8004242:	e0cc      	b.n	80043de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800424a:	2b01      	cmp	r3, #1
 800424c:	d101      	bne.n	8004252 <HAL_I2C_Mem_Write+0x56>
 800424e:	2302      	movs	r3, #2
 8004250:	e0c5      	b.n	80043de <HAL_I2C_Mem_Write+0x1e2>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	2b01      	cmp	r3, #1
 8004266:	d007      	beq.n	8004278 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f042 0201 	orr.w	r2, r2, #1
 8004276:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004286:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2221      	movs	r2, #33	; 0x21
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2240      	movs	r2, #64	; 0x40
 8004294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6a3a      	ldr	r2, [r7, #32]
 80042a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80042a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	4a4d      	ldr	r2, [pc, #308]	; (80043ec <HAL_I2C_Mem_Write+0x1f0>)
 80042b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042ba:	88f8      	ldrh	r0, [r7, #6]
 80042bc:	893a      	ldrh	r2, [r7, #8]
 80042be:	8979      	ldrh	r1, [r7, #10]
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	9301      	str	r3, [sp, #4]
 80042c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c6:	9300      	str	r3, [sp, #0]
 80042c8:	4603      	mov	r3, r0
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f000 fb38 	bl	8004940 <I2C_RequestMemoryWrite>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d052      	beq.n	800437c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e081      	b.n	80043de <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f000 fd82 	bl	8004de8 <I2C_WaitOnTXEFlagUntilTimeout>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00d      	beq.n	8004306 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	2b04      	cmp	r3, #4
 80042f0:	d107      	bne.n	8004302 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004300:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e06b      	b.n	80043de <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430a:	781a      	ldrb	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004316:	1c5a      	adds	r2, r3, #1
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004320:	3b01      	subs	r3, #1
 8004322:	b29a      	uxth	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800432c:	b29b      	uxth	r3, r3
 800432e:	3b01      	subs	r3, #1
 8004330:	b29a      	uxth	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	695b      	ldr	r3, [r3, #20]
 800433c:	f003 0304 	and.w	r3, r3, #4
 8004340:	2b04      	cmp	r3, #4
 8004342:	d11b      	bne.n	800437c <HAL_I2C_Mem_Write+0x180>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004348:	2b00      	cmp	r3, #0
 800434a:	d017      	beq.n	800437c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004350:	781a      	ldrb	r2, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	1c5a      	adds	r2, r3, #1
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004366:	3b01      	subs	r3, #1
 8004368:	b29a      	uxth	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004372:	b29b      	uxth	r3, r3
 8004374:	3b01      	subs	r3, #1
 8004376:	b29a      	uxth	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1aa      	bne.n	80042da <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f000 fd6e 	bl	8004e6a <I2C_WaitOnBTFFlagUntilTimeout>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00d      	beq.n	80043b0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004398:	2b04      	cmp	r3, #4
 800439a:	d107      	bne.n	80043ac <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043aa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e016      	b.n	80043de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2220      	movs	r2, #32
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80043d8:	2300      	movs	r3, #0
 80043da:	e000      	b.n	80043de <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80043dc:	2302      	movs	r3, #2
  }
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3718      	adds	r7, #24
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	00100002 	.word	0x00100002
 80043ec:	ffff0000 	.word	0xffff0000

080043f0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b08c      	sub	sp, #48	; 0x30
 80043f4:	af02      	add	r7, sp, #8
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	4608      	mov	r0, r1
 80043fa:	4611      	mov	r1, r2
 80043fc:	461a      	mov	r2, r3
 80043fe:	4603      	mov	r3, r0
 8004400:	817b      	strh	r3, [r7, #10]
 8004402:	460b      	mov	r3, r1
 8004404:	813b      	strh	r3, [r7, #8]
 8004406:	4613      	mov	r3, r2
 8004408:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800440a:	f7fe fbe3 	bl	8002bd4 <HAL_GetTick>
 800440e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b20      	cmp	r3, #32
 800441a:	f040 8208 	bne.w	800482e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800441e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004420:	9300      	str	r3, [sp, #0]
 8004422:	2319      	movs	r3, #25
 8004424:	2201      	movs	r2, #1
 8004426:	497b      	ldr	r1, [pc, #492]	; (8004614 <HAL_I2C_Mem_Read+0x224>)
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f000 fc07 	bl	8004c3c <I2C_WaitOnFlagUntilTimeout>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d001      	beq.n	8004438 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004434:	2302      	movs	r3, #2
 8004436:	e1fb      	b.n	8004830 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800443e:	2b01      	cmp	r3, #1
 8004440:	d101      	bne.n	8004446 <HAL_I2C_Mem_Read+0x56>
 8004442:	2302      	movs	r3, #2
 8004444:	e1f4      	b.n	8004830 <HAL_I2C_Mem_Read+0x440>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b01      	cmp	r3, #1
 800445a:	d007      	beq.n	800446c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f042 0201 	orr.w	r2, r2, #1
 800446a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800447a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2222      	movs	r2, #34	; 0x22
 8004480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2240      	movs	r2, #64	; 0x40
 8004488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004496:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800449c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	4a5b      	ldr	r2, [pc, #364]	; (8004618 <HAL_I2C_Mem_Read+0x228>)
 80044ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044ae:	88f8      	ldrh	r0, [r7, #6]
 80044b0:	893a      	ldrh	r2, [r7, #8]
 80044b2:	8979      	ldrh	r1, [r7, #10]
 80044b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b6:	9301      	str	r3, [sp, #4]
 80044b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ba:	9300      	str	r3, [sp, #0]
 80044bc:	4603      	mov	r3, r0
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f000 fad4 	bl	8004a6c <I2C_RequestMemoryRead>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d001      	beq.n	80044ce <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e1b0      	b.n	8004830 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d113      	bne.n	80044fe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044d6:	2300      	movs	r3, #0
 80044d8:	623b      	str	r3, [r7, #32]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	695b      	ldr	r3, [r3, #20]
 80044e0:	623b      	str	r3, [r7, #32]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	623b      	str	r3, [r7, #32]
 80044ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044fa:	601a      	str	r2, [r3, #0]
 80044fc:	e184      	b.n	8004808 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004502:	2b01      	cmp	r3, #1
 8004504:	d11b      	bne.n	800453e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004514:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004516:	2300      	movs	r3, #0
 8004518:	61fb      	str	r3, [r7, #28]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	61fb      	str	r3, [r7, #28]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	61fb      	str	r3, [r7, #28]
 800452a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800453a:	601a      	str	r2, [r3, #0]
 800453c:	e164      	b.n	8004808 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004542:	2b02      	cmp	r3, #2
 8004544:	d11b      	bne.n	800457e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004554:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004564:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004566:	2300      	movs	r3, #0
 8004568:	61bb      	str	r3, [r7, #24]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	61bb      	str	r3, [r7, #24]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	61bb      	str	r3, [r7, #24]
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	e144      	b.n	8004808 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800457e:	2300      	movs	r3, #0
 8004580:	617b      	str	r3, [r7, #20]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	617b      	str	r3, [r7, #20]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	617b      	str	r3, [r7, #20]
 8004592:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004594:	e138      	b.n	8004808 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800459a:	2b03      	cmp	r3, #3
 800459c:	f200 80f1 	bhi.w	8004782 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d123      	bne.n	80045f0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f000 fc9d 	bl	8004eec <I2C_WaitOnRXNEFlagUntilTimeout>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d001      	beq.n	80045bc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e139      	b.n	8004830 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	691a      	ldr	r2, [r3, #16]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c6:	b2d2      	uxtb	r2, r2
 80045c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ce:	1c5a      	adds	r2, r3, #1
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d8:	3b01      	subs	r3, #1
 80045da:	b29a      	uxth	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	3b01      	subs	r3, #1
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045ee:	e10b      	b.n	8004808 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d14e      	bne.n	8004696 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fa:	9300      	str	r3, [sp, #0]
 80045fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045fe:	2200      	movs	r2, #0
 8004600:	4906      	ldr	r1, [pc, #24]	; (800461c <HAL_I2C_Mem_Read+0x22c>)
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f000 fb1a 	bl	8004c3c <I2C_WaitOnFlagUntilTimeout>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d008      	beq.n	8004620 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e10e      	b.n	8004830 <HAL_I2C_Mem_Read+0x440>
 8004612:	bf00      	nop
 8004614:	00100002 	.word	0x00100002
 8004618:	ffff0000 	.word	0xffff0000
 800461c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800462e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	691a      	ldr	r2, [r3, #16]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463a:	b2d2      	uxtb	r2, r2
 800463c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004642:	1c5a      	adds	r2, r3, #1
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800464c:	3b01      	subs	r3, #1
 800464e:	b29a      	uxth	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004658:	b29b      	uxth	r3, r3
 800465a:	3b01      	subs	r3, #1
 800465c:	b29a      	uxth	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	691a      	ldr	r2, [r3, #16]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466c:	b2d2      	uxtb	r2, r2
 800466e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004674:	1c5a      	adds	r2, r3, #1
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800467e:	3b01      	subs	r3, #1
 8004680:	b29a      	uxth	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800468a:	b29b      	uxth	r3, r3
 800468c:	3b01      	subs	r3, #1
 800468e:	b29a      	uxth	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004694:	e0b8      	b.n	8004808 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004698:	9300      	str	r3, [sp, #0]
 800469a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800469c:	2200      	movs	r2, #0
 800469e:	4966      	ldr	r1, [pc, #408]	; (8004838 <HAL_I2C_Mem_Read+0x448>)
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f000 facb 	bl	8004c3c <I2C_WaitOnFlagUntilTimeout>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d001      	beq.n	80046b0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e0bf      	b.n	8004830 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	691a      	ldr	r2, [r3, #16]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ca:	b2d2      	uxtb	r2, r2
 80046cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d2:	1c5a      	adds	r2, r3, #1
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046dc:	3b01      	subs	r3, #1
 80046de:	b29a      	uxth	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	3b01      	subs	r3, #1
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f4:	9300      	str	r3, [sp, #0]
 80046f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f8:	2200      	movs	r2, #0
 80046fa:	494f      	ldr	r1, [pc, #316]	; (8004838 <HAL_I2C_Mem_Read+0x448>)
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f000 fa9d 	bl	8004c3c <I2C_WaitOnFlagUntilTimeout>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d001      	beq.n	800470c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e091      	b.n	8004830 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800471a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	691a      	ldr	r2, [r3, #16]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004726:	b2d2      	uxtb	r2, r2
 8004728:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472e:	1c5a      	adds	r2, r3, #1
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004738:	3b01      	subs	r3, #1
 800473a:	b29a      	uxth	r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004744:	b29b      	uxth	r3, r3
 8004746:	3b01      	subs	r3, #1
 8004748:	b29a      	uxth	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	691a      	ldr	r2, [r3, #16]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004758:	b2d2      	uxtb	r2, r2
 800475a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004760:	1c5a      	adds	r2, r3, #1
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800476a:	3b01      	subs	r3, #1
 800476c:	b29a      	uxth	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004776:	b29b      	uxth	r3, r3
 8004778:	3b01      	subs	r3, #1
 800477a:	b29a      	uxth	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004780:	e042      	b.n	8004808 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004784:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f000 fbb0 	bl	8004eec <I2C_WaitOnRXNEFlagUntilTimeout>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e04c      	b.n	8004830 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	691a      	ldr	r2, [r3, #16]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a0:	b2d2      	uxtb	r2, r2
 80047a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a8:	1c5a      	adds	r2, r3, #1
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047b2:	3b01      	subs	r3, #1
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047be:	b29b      	uxth	r3, r3
 80047c0:	3b01      	subs	r3, #1
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	f003 0304 	and.w	r3, r3, #4
 80047d2:	2b04      	cmp	r3, #4
 80047d4:	d118      	bne.n	8004808 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	691a      	ldr	r2, [r3, #16]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e0:	b2d2      	uxtb	r2, r2
 80047e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e8:	1c5a      	adds	r2, r3, #1
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047f2:	3b01      	subs	r3, #1
 80047f4:	b29a      	uxth	r2, r3
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047fe:	b29b      	uxth	r3, r3
 8004800:	3b01      	subs	r3, #1
 8004802:	b29a      	uxth	r2, r3
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800480c:	2b00      	cmp	r3, #0
 800480e:	f47f aec2 	bne.w	8004596 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2220      	movs	r2, #32
 8004816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800482a:	2300      	movs	r3, #0
 800482c:	e000      	b.n	8004830 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800482e:	2302      	movs	r3, #2
  }
}
 8004830:	4618      	mov	r0, r3
 8004832:	3728      	adds	r7, #40	; 0x28
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	00010004 	.word	0x00010004

0800483c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b088      	sub	sp, #32
 8004840:	af02      	add	r7, sp, #8
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	607a      	str	r2, [r7, #4]
 8004846:	603b      	str	r3, [r7, #0]
 8004848:	460b      	mov	r3, r1
 800484a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004850:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	2b08      	cmp	r3, #8
 8004856:	d006      	beq.n	8004866 <I2C_MasterRequestWrite+0x2a>
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d003      	beq.n	8004866 <I2C_MasterRequestWrite+0x2a>
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004864:	d108      	bne.n	8004878 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004874:	601a      	str	r2, [r3, #0]
 8004876:	e00b      	b.n	8004890 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487c:	2b12      	cmp	r3, #18
 800487e:	d107      	bne.n	8004890 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800488e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	9300      	str	r3, [sp, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f000 f9cd 	bl	8004c3c <I2C_WaitOnFlagUntilTimeout>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00d      	beq.n	80048c4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048b6:	d103      	bne.n	80048c0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e035      	b.n	8004930 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048cc:	d108      	bne.n	80048e0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048ce:	897b      	ldrh	r3, [r7, #10]
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	461a      	mov	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80048dc:	611a      	str	r2, [r3, #16]
 80048de:	e01b      	b.n	8004918 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80048e0:	897b      	ldrh	r3, [r7, #10]
 80048e2:	11db      	asrs	r3, r3, #7
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	f003 0306 	and.w	r3, r3, #6
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	f063 030f 	orn	r3, r3, #15
 80048f0:	b2da      	uxtb	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	490e      	ldr	r1, [pc, #56]	; (8004938 <I2C_MasterRequestWrite+0xfc>)
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f000 f9f3 	bl	8004cea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d001      	beq.n	800490e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e010      	b.n	8004930 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800490e:	897b      	ldrh	r3, [r7, #10]
 8004910:	b2da      	uxtb	r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	4907      	ldr	r1, [pc, #28]	; (800493c <I2C_MasterRequestWrite+0x100>)
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	f000 f9e3 	bl	8004cea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d001      	beq.n	800492e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e000      	b.n	8004930 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3718      	adds	r7, #24
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	00010008 	.word	0x00010008
 800493c:	00010002 	.word	0x00010002

08004940 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b088      	sub	sp, #32
 8004944:	af02      	add	r7, sp, #8
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	4608      	mov	r0, r1
 800494a:	4611      	mov	r1, r2
 800494c:	461a      	mov	r2, r3
 800494e:	4603      	mov	r3, r0
 8004950:	817b      	strh	r3, [r7, #10]
 8004952:	460b      	mov	r3, r1
 8004954:	813b      	strh	r3, [r7, #8]
 8004956:	4613      	mov	r3, r2
 8004958:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004968:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800496a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496c:	9300      	str	r3, [sp, #0]
 800496e:	6a3b      	ldr	r3, [r7, #32]
 8004970:	2200      	movs	r2, #0
 8004972:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f000 f960 	bl	8004c3c <I2C_WaitOnFlagUntilTimeout>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00d      	beq.n	800499e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800498c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004990:	d103      	bne.n	800499a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004998:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e05f      	b.n	8004a5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800499e:	897b      	ldrh	r3, [r7, #10]
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	461a      	mov	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80049ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b0:	6a3a      	ldr	r2, [r7, #32]
 80049b2:	492d      	ldr	r1, [pc, #180]	; (8004a68 <I2C_RequestMemoryWrite+0x128>)
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f000 f998 	bl	8004cea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d001      	beq.n	80049c4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e04c      	b.n	8004a5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049c4:	2300      	movs	r3, #0
 80049c6:	617b      	str	r3, [r7, #20]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	617b      	str	r3, [r7, #20]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	617b      	str	r3, [r7, #20]
 80049d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049dc:	6a39      	ldr	r1, [r7, #32]
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f000 fa02 	bl	8004de8 <I2C_WaitOnTXEFlagUntilTimeout>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00d      	beq.n	8004a06 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ee:	2b04      	cmp	r3, #4
 80049f0:	d107      	bne.n	8004a02 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e02b      	b.n	8004a5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a06:	88fb      	ldrh	r3, [r7, #6]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d105      	bne.n	8004a18 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a0c:	893b      	ldrh	r3, [r7, #8]
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	611a      	str	r2, [r3, #16]
 8004a16:	e021      	b.n	8004a5c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a18:	893b      	ldrh	r3, [r7, #8]
 8004a1a:	0a1b      	lsrs	r3, r3, #8
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	b2da      	uxtb	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a28:	6a39      	ldr	r1, [r7, #32]
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	f000 f9dc 	bl	8004de8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00d      	beq.n	8004a52 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3a:	2b04      	cmp	r3, #4
 8004a3c:	d107      	bne.n	8004a4e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e005      	b.n	8004a5e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a52:	893b      	ldrh	r3, [r7, #8]
 8004a54:	b2da      	uxtb	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3718      	adds	r7, #24
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	00010002 	.word	0x00010002

08004a6c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b088      	sub	sp, #32
 8004a70:	af02      	add	r7, sp, #8
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	4608      	mov	r0, r1
 8004a76:	4611      	mov	r1, r2
 8004a78:	461a      	mov	r2, r3
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	817b      	strh	r3, [r7, #10]
 8004a7e:	460b      	mov	r3, r1
 8004a80:	813b      	strh	r3, [r7, #8]
 8004a82:	4613      	mov	r3, r2
 8004a84:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a94:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004aa4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	6a3b      	ldr	r3, [r7, #32]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	f000 f8c2 	bl	8004c3c <I2C_WaitOnFlagUntilTimeout>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00d      	beq.n	8004ada <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004acc:	d103      	bne.n	8004ad6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ad4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e0aa      	b.n	8004c30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ada:	897b      	ldrh	r3, [r7, #10]
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	461a      	mov	r2, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ae8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aec:	6a3a      	ldr	r2, [r7, #32]
 8004aee:	4952      	ldr	r1, [pc, #328]	; (8004c38 <I2C_RequestMemoryRead+0x1cc>)
 8004af0:	68f8      	ldr	r0, [r7, #12]
 8004af2:	f000 f8fa 	bl	8004cea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d001      	beq.n	8004b00 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e097      	b.n	8004c30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b00:	2300      	movs	r3, #0
 8004b02:	617b      	str	r3, [r7, #20]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	617b      	str	r3, [r7, #20]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	617b      	str	r3, [r7, #20]
 8004b14:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b18:	6a39      	ldr	r1, [r7, #32]
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f000 f964 	bl	8004de8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00d      	beq.n	8004b42 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2a:	2b04      	cmp	r3, #4
 8004b2c:	d107      	bne.n	8004b3e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b3c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e076      	b.n	8004c30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b42:	88fb      	ldrh	r3, [r7, #6]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d105      	bne.n	8004b54 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b48:	893b      	ldrh	r3, [r7, #8]
 8004b4a:	b2da      	uxtb	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	611a      	str	r2, [r3, #16]
 8004b52:	e021      	b.n	8004b98 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b54:	893b      	ldrh	r3, [r7, #8]
 8004b56:	0a1b      	lsrs	r3, r3, #8
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	b2da      	uxtb	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b64:	6a39      	ldr	r1, [r7, #32]
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f000 f93e 	bl	8004de8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00d      	beq.n	8004b8e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b76:	2b04      	cmp	r3, #4
 8004b78:	d107      	bne.n	8004b8a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b88:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e050      	b.n	8004c30 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b8e:	893b      	ldrh	r3, [r7, #8]
 8004b90:	b2da      	uxtb	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b9a:	6a39      	ldr	r1, [r7, #32]
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f000 f923 	bl	8004de8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d00d      	beq.n	8004bc4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bac:	2b04      	cmp	r3, #4
 8004bae:	d107      	bne.n	8004bc0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bbe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e035      	b.n	8004c30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bd2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd6:	9300      	str	r3, [sp, #0]
 8004bd8:	6a3b      	ldr	r3, [r7, #32]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	f000 f82b 	bl	8004c3c <I2C_WaitOnFlagUntilTimeout>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00d      	beq.n	8004c08 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bfa:	d103      	bne.n	8004c04 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c02:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e013      	b.n	8004c30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004c08:	897b      	ldrh	r3, [r7, #10]
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	f043 0301 	orr.w	r3, r3, #1
 8004c10:	b2da      	uxtb	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1a:	6a3a      	ldr	r2, [r7, #32]
 8004c1c:	4906      	ldr	r1, [pc, #24]	; (8004c38 <I2C_RequestMemoryRead+0x1cc>)
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f000 f863 	bl	8004cea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e000      	b.n	8004c30 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3718      	adds	r7, #24
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	00010002 	.word	0x00010002

08004c3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	603b      	str	r3, [r7, #0]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c4c:	e025      	b.n	8004c9a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c54:	d021      	beq.n	8004c9a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c56:	f7fd ffbd 	bl	8002bd4 <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	683a      	ldr	r2, [r7, #0]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d302      	bcc.n	8004c6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d116      	bne.n	8004c9a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2220      	movs	r2, #32
 8004c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c86:	f043 0220 	orr.w	r2, r3, #32
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e023      	b.n	8004ce2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	0c1b      	lsrs	r3, r3, #16
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d10d      	bne.n	8004cc0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	43da      	mvns	r2, r3
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	4013      	ands	r3, r2
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	bf0c      	ite	eq
 8004cb6:	2301      	moveq	r3, #1
 8004cb8:	2300      	movne	r3, #0
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	e00c      	b.n	8004cda <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	43da      	mvns	r2, r3
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	bf0c      	ite	eq
 8004cd2:	2301      	moveq	r3, #1
 8004cd4:	2300      	movne	r3, #0
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	461a      	mov	r2, r3
 8004cda:	79fb      	ldrb	r3, [r7, #7]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d0b6      	beq.n	8004c4e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b084      	sub	sp, #16
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	60f8      	str	r0, [r7, #12]
 8004cf2:	60b9      	str	r1, [r7, #8]
 8004cf4:	607a      	str	r2, [r7, #4]
 8004cf6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004cf8:	e051      	b.n	8004d9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	695b      	ldr	r3, [r3, #20]
 8004d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d08:	d123      	bne.n	8004d52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d18:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d22:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2220      	movs	r2, #32
 8004d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3e:	f043 0204 	orr.w	r2, r3, #4
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e046      	b.n	8004de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d58:	d021      	beq.n	8004d9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d5a:	f7fd ff3b 	bl	8002bd4 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d302      	bcc.n	8004d70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d116      	bne.n	8004d9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2220      	movs	r2, #32
 8004d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	f043 0220 	orr.w	r2, r3, #32
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e020      	b.n	8004de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	0c1b      	lsrs	r3, r3, #16
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d10c      	bne.n	8004dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	43da      	mvns	r2, r3
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	4013      	ands	r3, r2
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	bf14      	ite	ne
 8004dba:	2301      	movne	r3, #1
 8004dbc:	2300      	moveq	r3, #0
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	e00b      	b.n	8004dda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	43da      	mvns	r2, r3
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	4013      	ands	r3, r2
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	bf14      	ite	ne
 8004dd4:	2301      	movne	r3, #1
 8004dd6:	2300      	moveq	r3, #0
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d18d      	bne.n	8004cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004df4:	e02d      	b.n	8004e52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004df6:	68f8      	ldr	r0, [r7, #12]
 8004df8:	f000 f8ce 	bl	8004f98 <I2C_IsAcknowledgeFailed>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d001      	beq.n	8004e06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e02d      	b.n	8004e62 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e0c:	d021      	beq.n	8004e52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e0e:	f7fd fee1 	bl	8002bd4 <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	68ba      	ldr	r2, [r7, #8]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d302      	bcc.n	8004e24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d116      	bne.n	8004e52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2220      	movs	r2, #32
 8004e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3e:	f043 0220 	orr.w	r2, r3, #32
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e007      	b.n	8004e62 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e5c:	2b80      	cmp	r3, #128	; 0x80
 8004e5e:	d1ca      	bne.n	8004df6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b084      	sub	sp, #16
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	60f8      	str	r0, [r7, #12]
 8004e72:	60b9      	str	r1, [r7, #8]
 8004e74:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e76:	e02d      	b.n	8004ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e78:	68f8      	ldr	r0, [r7, #12]
 8004e7a:	f000 f88d 	bl	8004f98 <I2C_IsAcknowledgeFailed>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d001      	beq.n	8004e88 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e02d      	b.n	8004ee4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e8e:	d021      	beq.n	8004ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e90:	f7fd fea0 	bl	8002bd4 <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	68ba      	ldr	r2, [r7, #8]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d302      	bcc.n	8004ea6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d116      	bne.n	8004ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2220      	movs	r2, #32
 8004eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec0:	f043 0220 	orr.w	r2, r3, #32
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e007      	b.n	8004ee4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	f003 0304 	and.w	r3, r3, #4
 8004ede:	2b04      	cmp	r3, #4
 8004ee0:	d1ca      	bne.n	8004e78 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3710      	adds	r7, #16
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ef8:	e042      	b.n	8004f80 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	695b      	ldr	r3, [r3, #20]
 8004f00:	f003 0310 	and.w	r3, r3, #16
 8004f04:	2b10      	cmp	r3, #16
 8004f06:	d119      	bne.n	8004f3c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f06f 0210 	mvn.w	r2, #16
 8004f10:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e029      	b.n	8004f90 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f3c:	f7fd fe4a 	bl	8002bd4 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	68ba      	ldr	r2, [r7, #8]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d302      	bcc.n	8004f52 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d116      	bne.n	8004f80 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6c:	f043 0220 	orr.w	r2, r3, #32
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e007      	b.n	8004f90 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8a:	2b40      	cmp	r3, #64	; 0x40
 8004f8c:	d1b5      	bne.n	8004efa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004faa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fae:	d11b      	bne.n	8004fe8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fb8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd4:	f043 0204 	orr.w	r2, r3, #4
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e000      	b.n	8004fea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	370c      	adds	r7, #12
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
	...

08004ff8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d101      	bne.n	800500c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e0cc      	b.n	80051a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800500c:	4b68      	ldr	r3, [pc, #416]	; (80051b0 <HAL_RCC_ClockConfig+0x1b8>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0307 	and.w	r3, r3, #7
 8005014:	683a      	ldr	r2, [r7, #0]
 8005016:	429a      	cmp	r2, r3
 8005018:	d90c      	bls.n	8005034 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800501a:	4b65      	ldr	r3, [pc, #404]	; (80051b0 <HAL_RCC_ClockConfig+0x1b8>)
 800501c:	683a      	ldr	r2, [r7, #0]
 800501e:	b2d2      	uxtb	r2, r2
 8005020:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005022:	4b63      	ldr	r3, [pc, #396]	; (80051b0 <HAL_RCC_ClockConfig+0x1b8>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0307 	and.w	r3, r3, #7
 800502a:	683a      	ldr	r2, [r7, #0]
 800502c:	429a      	cmp	r2, r3
 800502e:	d001      	beq.n	8005034 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e0b8      	b.n	80051a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0302 	and.w	r3, r3, #2
 800503c:	2b00      	cmp	r3, #0
 800503e:	d020      	beq.n	8005082 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0304 	and.w	r3, r3, #4
 8005048:	2b00      	cmp	r3, #0
 800504a:	d005      	beq.n	8005058 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800504c:	4b59      	ldr	r3, [pc, #356]	; (80051b4 <HAL_RCC_ClockConfig+0x1bc>)
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	4a58      	ldr	r2, [pc, #352]	; (80051b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005052:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005056:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0308 	and.w	r3, r3, #8
 8005060:	2b00      	cmp	r3, #0
 8005062:	d005      	beq.n	8005070 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005064:	4b53      	ldr	r3, [pc, #332]	; (80051b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	4a52      	ldr	r2, [pc, #328]	; (80051b4 <HAL_RCC_ClockConfig+0x1bc>)
 800506a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800506e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005070:	4b50      	ldr	r3, [pc, #320]	; (80051b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	494d      	ldr	r1, [pc, #308]	; (80051b4 <HAL_RCC_ClockConfig+0x1bc>)
 800507e:	4313      	orrs	r3, r2
 8005080:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	2b00      	cmp	r3, #0
 800508c:	d044      	beq.n	8005118 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d107      	bne.n	80050a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005096:	4b47      	ldr	r3, [pc, #284]	; (80051b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d119      	bne.n	80050d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e07f      	b.n	80051a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d003      	beq.n	80050b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050b2:	2b03      	cmp	r3, #3
 80050b4:	d107      	bne.n	80050c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050b6:	4b3f      	ldr	r3, [pc, #252]	; (80051b4 <HAL_RCC_ClockConfig+0x1bc>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d109      	bne.n	80050d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e06f      	b.n	80051a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050c6:	4b3b      	ldr	r3, [pc, #236]	; (80051b4 <HAL_RCC_ClockConfig+0x1bc>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0302 	and.w	r3, r3, #2
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d101      	bne.n	80050d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e067      	b.n	80051a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050d6:	4b37      	ldr	r3, [pc, #220]	; (80051b4 <HAL_RCC_ClockConfig+0x1bc>)
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f023 0203 	bic.w	r2, r3, #3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	4934      	ldr	r1, [pc, #208]	; (80051b4 <HAL_RCC_ClockConfig+0x1bc>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050e8:	f7fd fd74 	bl	8002bd4 <HAL_GetTick>
 80050ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ee:	e00a      	b.n	8005106 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050f0:	f7fd fd70 	bl	8002bd4 <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80050fe:	4293      	cmp	r3, r2
 8005100:	d901      	bls.n	8005106 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e04f      	b.n	80051a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005106:	4b2b      	ldr	r3, [pc, #172]	; (80051b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f003 020c 	and.w	r2, r3, #12
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	429a      	cmp	r2, r3
 8005116:	d1eb      	bne.n	80050f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005118:	4b25      	ldr	r3, [pc, #148]	; (80051b0 <HAL_RCC_ClockConfig+0x1b8>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0307 	and.w	r3, r3, #7
 8005120:	683a      	ldr	r2, [r7, #0]
 8005122:	429a      	cmp	r2, r3
 8005124:	d20c      	bcs.n	8005140 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005126:	4b22      	ldr	r3, [pc, #136]	; (80051b0 <HAL_RCC_ClockConfig+0x1b8>)
 8005128:	683a      	ldr	r2, [r7, #0]
 800512a:	b2d2      	uxtb	r2, r2
 800512c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800512e:	4b20      	ldr	r3, [pc, #128]	; (80051b0 <HAL_RCC_ClockConfig+0x1b8>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0307 	and.w	r3, r3, #7
 8005136:	683a      	ldr	r2, [r7, #0]
 8005138:	429a      	cmp	r2, r3
 800513a:	d001      	beq.n	8005140 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e032      	b.n	80051a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0304 	and.w	r3, r3, #4
 8005148:	2b00      	cmp	r3, #0
 800514a:	d008      	beq.n	800515e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800514c:	4b19      	ldr	r3, [pc, #100]	; (80051b4 <HAL_RCC_ClockConfig+0x1bc>)
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	4916      	ldr	r1, [pc, #88]	; (80051b4 <HAL_RCC_ClockConfig+0x1bc>)
 800515a:	4313      	orrs	r3, r2
 800515c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0308 	and.w	r3, r3, #8
 8005166:	2b00      	cmp	r3, #0
 8005168:	d009      	beq.n	800517e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800516a:	4b12      	ldr	r3, [pc, #72]	; (80051b4 <HAL_RCC_ClockConfig+0x1bc>)
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	00db      	lsls	r3, r3, #3
 8005178:	490e      	ldr	r1, [pc, #56]	; (80051b4 <HAL_RCC_ClockConfig+0x1bc>)
 800517a:	4313      	orrs	r3, r2
 800517c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800517e:	f000 f821 	bl	80051c4 <HAL_RCC_GetSysClockFreq>
 8005182:	4602      	mov	r2, r0
 8005184:	4b0b      	ldr	r3, [pc, #44]	; (80051b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	091b      	lsrs	r3, r3, #4
 800518a:	f003 030f 	and.w	r3, r3, #15
 800518e:	490a      	ldr	r1, [pc, #40]	; (80051b8 <HAL_RCC_ClockConfig+0x1c0>)
 8005190:	5ccb      	ldrb	r3, [r1, r3]
 8005192:	fa22 f303 	lsr.w	r3, r2, r3
 8005196:	4a09      	ldr	r2, [pc, #36]	; (80051bc <HAL_RCC_ClockConfig+0x1c4>)
 8005198:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800519a:	4b09      	ldr	r3, [pc, #36]	; (80051c0 <HAL_RCC_ClockConfig+0x1c8>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4618      	mov	r0, r3
 80051a0:	f7fd fcd4 	bl	8002b4c <HAL_InitTick>

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3710      	adds	r7, #16
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	40023c00 	.word	0x40023c00
 80051b4:	40023800 	.word	0x40023800
 80051b8:	08007e64 	.word	0x08007e64
 80051bc:	20000000 	.word	0x20000000
 80051c0:	20000004 	.word	0x20000004

080051c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051c8:	b090      	sub	sp, #64	; 0x40
 80051ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80051cc:	2300      	movs	r3, #0
 80051ce:	637b      	str	r3, [r7, #52]	; 0x34
 80051d0:	2300      	movs	r3, #0
 80051d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051d4:	2300      	movs	r3, #0
 80051d6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80051d8:	2300      	movs	r3, #0
 80051da:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051dc:	4b59      	ldr	r3, [pc, #356]	; (8005344 <HAL_RCC_GetSysClockFreq+0x180>)
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f003 030c 	and.w	r3, r3, #12
 80051e4:	2b08      	cmp	r3, #8
 80051e6:	d00d      	beq.n	8005204 <HAL_RCC_GetSysClockFreq+0x40>
 80051e8:	2b08      	cmp	r3, #8
 80051ea:	f200 80a1 	bhi.w	8005330 <HAL_RCC_GetSysClockFreq+0x16c>
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d002      	beq.n	80051f8 <HAL_RCC_GetSysClockFreq+0x34>
 80051f2:	2b04      	cmp	r3, #4
 80051f4:	d003      	beq.n	80051fe <HAL_RCC_GetSysClockFreq+0x3a>
 80051f6:	e09b      	b.n	8005330 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051f8:	4b53      	ldr	r3, [pc, #332]	; (8005348 <HAL_RCC_GetSysClockFreq+0x184>)
 80051fa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80051fc:	e09b      	b.n	8005336 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051fe:	4b53      	ldr	r3, [pc, #332]	; (800534c <HAL_RCC_GetSysClockFreq+0x188>)
 8005200:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005202:	e098      	b.n	8005336 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005204:	4b4f      	ldr	r3, [pc, #316]	; (8005344 <HAL_RCC_GetSysClockFreq+0x180>)
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800520c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800520e:	4b4d      	ldr	r3, [pc, #308]	; (8005344 <HAL_RCC_GetSysClockFreq+0x180>)
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d028      	beq.n	800526c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800521a:	4b4a      	ldr	r3, [pc, #296]	; (8005344 <HAL_RCC_GetSysClockFreq+0x180>)
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	099b      	lsrs	r3, r3, #6
 8005220:	2200      	movs	r2, #0
 8005222:	623b      	str	r3, [r7, #32]
 8005224:	627a      	str	r2, [r7, #36]	; 0x24
 8005226:	6a3b      	ldr	r3, [r7, #32]
 8005228:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800522c:	2100      	movs	r1, #0
 800522e:	4b47      	ldr	r3, [pc, #284]	; (800534c <HAL_RCC_GetSysClockFreq+0x188>)
 8005230:	fb03 f201 	mul.w	r2, r3, r1
 8005234:	2300      	movs	r3, #0
 8005236:	fb00 f303 	mul.w	r3, r0, r3
 800523a:	4413      	add	r3, r2
 800523c:	4a43      	ldr	r2, [pc, #268]	; (800534c <HAL_RCC_GetSysClockFreq+0x188>)
 800523e:	fba0 1202 	umull	r1, r2, r0, r2
 8005242:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005244:	460a      	mov	r2, r1
 8005246:	62ba      	str	r2, [r7, #40]	; 0x28
 8005248:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800524a:	4413      	add	r3, r2
 800524c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800524e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005250:	2200      	movs	r2, #0
 8005252:	61bb      	str	r3, [r7, #24]
 8005254:	61fa      	str	r2, [r7, #28]
 8005256:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800525a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800525e:	f7fb fad9 	bl	8000814 <__aeabi_uldivmod>
 8005262:	4602      	mov	r2, r0
 8005264:	460b      	mov	r3, r1
 8005266:	4613      	mov	r3, r2
 8005268:	63fb      	str	r3, [r7, #60]	; 0x3c
 800526a:	e053      	b.n	8005314 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800526c:	4b35      	ldr	r3, [pc, #212]	; (8005344 <HAL_RCC_GetSysClockFreq+0x180>)
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	099b      	lsrs	r3, r3, #6
 8005272:	2200      	movs	r2, #0
 8005274:	613b      	str	r3, [r7, #16]
 8005276:	617a      	str	r2, [r7, #20]
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800527e:	f04f 0b00 	mov.w	fp, #0
 8005282:	4652      	mov	r2, sl
 8005284:	465b      	mov	r3, fp
 8005286:	f04f 0000 	mov.w	r0, #0
 800528a:	f04f 0100 	mov.w	r1, #0
 800528e:	0159      	lsls	r1, r3, #5
 8005290:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005294:	0150      	lsls	r0, r2, #5
 8005296:	4602      	mov	r2, r0
 8005298:	460b      	mov	r3, r1
 800529a:	ebb2 080a 	subs.w	r8, r2, sl
 800529e:	eb63 090b 	sbc.w	r9, r3, fp
 80052a2:	f04f 0200 	mov.w	r2, #0
 80052a6:	f04f 0300 	mov.w	r3, #0
 80052aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80052ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80052b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80052b6:	ebb2 0408 	subs.w	r4, r2, r8
 80052ba:	eb63 0509 	sbc.w	r5, r3, r9
 80052be:	f04f 0200 	mov.w	r2, #0
 80052c2:	f04f 0300 	mov.w	r3, #0
 80052c6:	00eb      	lsls	r3, r5, #3
 80052c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052cc:	00e2      	lsls	r2, r4, #3
 80052ce:	4614      	mov	r4, r2
 80052d0:	461d      	mov	r5, r3
 80052d2:	eb14 030a 	adds.w	r3, r4, sl
 80052d6:	603b      	str	r3, [r7, #0]
 80052d8:	eb45 030b 	adc.w	r3, r5, fp
 80052dc:	607b      	str	r3, [r7, #4]
 80052de:	f04f 0200 	mov.w	r2, #0
 80052e2:	f04f 0300 	mov.w	r3, #0
 80052e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052ea:	4629      	mov	r1, r5
 80052ec:	028b      	lsls	r3, r1, #10
 80052ee:	4621      	mov	r1, r4
 80052f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052f4:	4621      	mov	r1, r4
 80052f6:	028a      	lsls	r2, r1, #10
 80052f8:	4610      	mov	r0, r2
 80052fa:	4619      	mov	r1, r3
 80052fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052fe:	2200      	movs	r2, #0
 8005300:	60bb      	str	r3, [r7, #8]
 8005302:	60fa      	str	r2, [r7, #12]
 8005304:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005308:	f7fb fa84 	bl	8000814 <__aeabi_uldivmod>
 800530c:	4602      	mov	r2, r0
 800530e:	460b      	mov	r3, r1
 8005310:	4613      	mov	r3, r2
 8005312:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005314:	4b0b      	ldr	r3, [pc, #44]	; (8005344 <HAL_RCC_GetSysClockFreq+0x180>)
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	0c1b      	lsrs	r3, r3, #16
 800531a:	f003 0303 	and.w	r3, r3, #3
 800531e:	3301      	adds	r3, #1
 8005320:	005b      	lsls	r3, r3, #1
 8005322:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005324:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005328:	fbb2 f3f3 	udiv	r3, r2, r3
 800532c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800532e:	e002      	b.n	8005336 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005330:	4b05      	ldr	r3, [pc, #20]	; (8005348 <HAL_RCC_GetSysClockFreq+0x184>)
 8005332:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005334:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005338:	4618      	mov	r0, r3
 800533a:	3740      	adds	r7, #64	; 0x40
 800533c:	46bd      	mov	sp, r7
 800533e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005342:	bf00      	nop
 8005344:	40023800 	.word	0x40023800
 8005348:	00f42400 	.word	0x00f42400
 800534c:	00b71b00 	.word	0x00b71b00

08005350 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005350:	b480      	push	{r7}
 8005352:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005354:	4b03      	ldr	r3, [pc, #12]	; (8005364 <HAL_RCC_GetHCLKFreq+0x14>)
 8005356:	681b      	ldr	r3, [r3, #0]
}
 8005358:	4618      	mov	r0, r3
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	20000000 	.word	0x20000000

08005368 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800536c:	f7ff fff0 	bl	8005350 <HAL_RCC_GetHCLKFreq>
 8005370:	4602      	mov	r2, r0
 8005372:	4b05      	ldr	r3, [pc, #20]	; (8005388 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	0a9b      	lsrs	r3, r3, #10
 8005378:	f003 0307 	and.w	r3, r3, #7
 800537c:	4903      	ldr	r1, [pc, #12]	; (800538c <HAL_RCC_GetPCLK1Freq+0x24>)
 800537e:	5ccb      	ldrb	r3, [r1, r3]
 8005380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005384:	4618      	mov	r0, r3
 8005386:	bd80      	pop	{r7, pc}
 8005388:	40023800 	.word	0x40023800
 800538c:	08007e74 	.word	0x08007e74

08005390 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005394:	f7ff ffdc 	bl	8005350 <HAL_RCC_GetHCLKFreq>
 8005398:	4602      	mov	r2, r0
 800539a:	4b05      	ldr	r3, [pc, #20]	; (80053b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	0b5b      	lsrs	r3, r3, #13
 80053a0:	f003 0307 	and.w	r3, r3, #7
 80053a4:	4903      	ldr	r1, [pc, #12]	; (80053b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053a6:	5ccb      	ldrb	r3, [r1, r3]
 80053a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	40023800 	.word	0x40023800
 80053b4:	08007e74 	.word	0x08007e74

080053b8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d101      	bne.n	80053ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e273      	b.n	80058b2 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d075      	beq.n	80054c2 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80053d6:	4b88      	ldr	r3, [pc, #544]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f003 030c 	and.w	r3, r3, #12
 80053de:	2b04      	cmp	r3, #4
 80053e0:	d00c      	beq.n	80053fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053e2:	4b85      	ldr	r3, [pc, #532]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80053ea:	2b08      	cmp	r3, #8
 80053ec:	d112      	bne.n	8005414 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053ee:	4b82      	ldr	r3, [pc, #520]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053fa:	d10b      	bne.n	8005414 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053fc:	4b7e      	ldr	r3, [pc, #504]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d05b      	beq.n	80054c0 <HAL_RCC_OscConfig+0x108>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d157      	bne.n	80054c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e24e      	b.n	80058b2 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800541c:	d106      	bne.n	800542c <HAL_RCC_OscConfig+0x74>
 800541e:	4b76      	ldr	r3, [pc, #472]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a75      	ldr	r2, [pc, #468]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 8005424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005428:	6013      	str	r3, [r2, #0]
 800542a:	e01d      	b.n	8005468 <HAL_RCC_OscConfig+0xb0>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005434:	d10c      	bne.n	8005450 <HAL_RCC_OscConfig+0x98>
 8005436:	4b70      	ldr	r3, [pc, #448]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a6f      	ldr	r2, [pc, #444]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 800543c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005440:	6013      	str	r3, [r2, #0]
 8005442:	4b6d      	ldr	r3, [pc, #436]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a6c      	ldr	r2, [pc, #432]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 8005448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800544c:	6013      	str	r3, [r2, #0]
 800544e:	e00b      	b.n	8005468 <HAL_RCC_OscConfig+0xb0>
 8005450:	4b69      	ldr	r3, [pc, #420]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a68      	ldr	r2, [pc, #416]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 8005456:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800545a:	6013      	str	r3, [r2, #0]
 800545c:	4b66      	ldr	r3, [pc, #408]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a65      	ldr	r2, [pc, #404]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 8005462:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005466:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d013      	beq.n	8005498 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005470:	f7fd fbb0 	bl	8002bd4 <HAL_GetTick>
 8005474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005476:	e008      	b.n	800548a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005478:	f7fd fbac 	bl	8002bd4 <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	2b64      	cmp	r3, #100	; 0x64
 8005484:	d901      	bls.n	800548a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e213      	b.n	80058b2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800548a:	4b5b      	ldr	r3, [pc, #364]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d0f0      	beq.n	8005478 <HAL_RCC_OscConfig+0xc0>
 8005496:	e014      	b.n	80054c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005498:	f7fd fb9c 	bl	8002bd4 <HAL_GetTick>
 800549c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800549e:	e008      	b.n	80054b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054a0:	f7fd fb98 	bl	8002bd4 <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	2b64      	cmp	r3, #100	; 0x64
 80054ac:	d901      	bls.n	80054b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e1ff      	b.n	80058b2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054b2:	4b51      	ldr	r3, [pc, #324]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1f0      	bne.n	80054a0 <HAL_RCC_OscConfig+0xe8>
 80054be:	e000      	b.n	80054c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 0302 	and.w	r3, r3, #2
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d063      	beq.n	8005596 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80054ce:	4b4a      	ldr	r3, [pc, #296]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	f003 030c 	and.w	r3, r3, #12
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00b      	beq.n	80054f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054da:	4b47      	ldr	r3, [pc, #284]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80054e2:	2b08      	cmp	r3, #8
 80054e4:	d11c      	bne.n	8005520 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054e6:	4b44      	ldr	r3, [pc, #272]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d116      	bne.n	8005520 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054f2:	4b41      	ldr	r3, [pc, #260]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0302 	and.w	r3, r3, #2
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d005      	beq.n	800550a <HAL_RCC_OscConfig+0x152>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d001      	beq.n	800550a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e1d3      	b.n	80058b2 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800550a:	4b3b      	ldr	r3, [pc, #236]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	00db      	lsls	r3, r3, #3
 8005518:	4937      	ldr	r1, [pc, #220]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 800551a:	4313      	orrs	r3, r2
 800551c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800551e:	e03a      	b.n	8005596 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d020      	beq.n	800556a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005528:	4b34      	ldr	r3, [pc, #208]	; (80055fc <HAL_RCC_OscConfig+0x244>)
 800552a:	2201      	movs	r2, #1
 800552c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800552e:	f7fd fb51 	bl	8002bd4 <HAL_GetTick>
 8005532:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005534:	e008      	b.n	8005548 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005536:	f7fd fb4d 	bl	8002bd4 <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	2b02      	cmp	r3, #2
 8005542:	d901      	bls.n	8005548 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e1b4      	b.n	80058b2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005548:	4b2b      	ldr	r3, [pc, #172]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0302 	and.w	r3, r3, #2
 8005550:	2b00      	cmp	r3, #0
 8005552:	d0f0      	beq.n	8005536 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005554:	4b28      	ldr	r3, [pc, #160]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	00db      	lsls	r3, r3, #3
 8005562:	4925      	ldr	r1, [pc, #148]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 8005564:	4313      	orrs	r3, r2
 8005566:	600b      	str	r3, [r1, #0]
 8005568:	e015      	b.n	8005596 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800556a:	4b24      	ldr	r3, [pc, #144]	; (80055fc <HAL_RCC_OscConfig+0x244>)
 800556c:	2200      	movs	r2, #0
 800556e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005570:	f7fd fb30 	bl	8002bd4 <HAL_GetTick>
 8005574:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005576:	e008      	b.n	800558a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005578:	f7fd fb2c 	bl	8002bd4 <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	2b02      	cmp	r3, #2
 8005584:	d901      	bls.n	800558a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e193      	b.n	80058b2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800558a:	4b1b      	ldr	r3, [pc, #108]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0302 	and.w	r3, r3, #2
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1f0      	bne.n	8005578 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0308 	and.w	r3, r3, #8
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d036      	beq.n	8005610 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d016      	beq.n	80055d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055aa:	4b15      	ldr	r3, [pc, #84]	; (8005600 <HAL_RCC_OscConfig+0x248>)
 80055ac:	2201      	movs	r2, #1
 80055ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055b0:	f7fd fb10 	bl	8002bd4 <HAL_GetTick>
 80055b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055b6:	e008      	b.n	80055ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055b8:	f7fd fb0c 	bl	8002bd4 <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d901      	bls.n	80055ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e173      	b.n	80058b2 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055ca:	4b0b      	ldr	r3, [pc, #44]	; (80055f8 <HAL_RCC_OscConfig+0x240>)
 80055cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055ce:	f003 0302 	and.w	r3, r3, #2
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d0f0      	beq.n	80055b8 <HAL_RCC_OscConfig+0x200>
 80055d6:	e01b      	b.n	8005610 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055d8:	4b09      	ldr	r3, [pc, #36]	; (8005600 <HAL_RCC_OscConfig+0x248>)
 80055da:	2200      	movs	r2, #0
 80055dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055de:	f7fd faf9 	bl	8002bd4 <HAL_GetTick>
 80055e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055e4:	e00e      	b.n	8005604 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055e6:	f7fd faf5 	bl	8002bd4 <HAL_GetTick>
 80055ea:	4602      	mov	r2, r0
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d907      	bls.n	8005604 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80055f4:	2303      	movs	r3, #3
 80055f6:	e15c      	b.n	80058b2 <HAL_RCC_OscConfig+0x4fa>
 80055f8:	40023800 	.word	0x40023800
 80055fc:	42470000 	.word	0x42470000
 8005600:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005604:	4b8a      	ldr	r3, [pc, #552]	; (8005830 <HAL_RCC_OscConfig+0x478>)
 8005606:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005608:	f003 0302 	and.w	r3, r3, #2
 800560c:	2b00      	cmp	r3, #0
 800560e:	d1ea      	bne.n	80055e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0304 	and.w	r3, r3, #4
 8005618:	2b00      	cmp	r3, #0
 800561a:	f000 8097 	beq.w	800574c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800561e:	2300      	movs	r3, #0
 8005620:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005622:	4b83      	ldr	r3, [pc, #524]	; (8005830 <HAL_RCC_OscConfig+0x478>)
 8005624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d10f      	bne.n	800564e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800562e:	2300      	movs	r3, #0
 8005630:	60bb      	str	r3, [r7, #8]
 8005632:	4b7f      	ldr	r3, [pc, #508]	; (8005830 <HAL_RCC_OscConfig+0x478>)
 8005634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005636:	4a7e      	ldr	r2, [pc, #504]	; (8005830 <HAL_RCC_OscConfig+0x478>)
 8005638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800563c:	6413      	str	r3, [r2, #64]	; 0x40
 800563e:	4b7c      	ldr	r3, [pc, #496]	; (8005830 <HAL_RCC_OscConfig+0x478>)
 8005640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005646:	60bb      	str	r3, [r7, #8]
 8005648:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800564a:	2301      	movs	r3, #1
 800564c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800564e:	4b79      	ldr	r3, [pc, #484]	; (8005834 <HAL_RCC_OscConfig+0x47c>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005656:	2b00      	cmp	r3, #0
 8005658:	d118      	bne.n	800568c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800565a:	4b76      	ldr	r3, [pc, #472]	; (8005834 <HAL_RCC_OscConfig+0x47c>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a75      	ldr	r2, [pc, #468]	; (8005834 <HAL_RCC_OscConfig+0x47c>)
 8005660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005664:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005666:	f7fd fab5 	bl	8002bd4 <HAL_GetTick>
 800566a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800566c:	e008      	b.n	8005680 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800566e:	f7fd fab1 	bl	8002bd4 <HAL_GetTick>
 8005672:	4602      	mov	r2, r0
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	2b02      	cmp	r3, #2
 800567a:	d901      	bls.n	8005680 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800567c:	2303      	movs	r3, #3
 800567e:	e118      	b.n	80058b2 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005680:	4b6c      	ldr	r3, [pc, #432]	; (8005834 <HAL_RCC_OscConfig+0x47c>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005688:	2b00      	cmp	r3, #0
 800568a:	d0f0      	beq.n	800566e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	2b01      	cmp	r3, #1
 8005692:	d106      	bne.n	80056a2 <HAL_RCC_OscConfig+0x2ea>
 8005694:	4b66      	ldr	r3, [pc, #408]	; (8005830 <HAL_RCC_OscConfig+0x478>)
 8005696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005698:	4a65      	ldr	r2, [pc, #404]	; (8005830 <HAL_RCC_OscConfig+0x478>)
 800569a:	f043 0301 	orr.w	r3, r3, #1
 800569e:	6713      	str	r3, [r2, #112]	; 0x70
 80056a0:	e01c      	b.n	80056dc <HAL_RCC_OscConfig+0x324>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	2b05      	cmp	r3, #5
 80056a8:	d10c      	bne.n	80056c4 <HAL_RCC_OscConfig+0x30c>
 80056aa:	4b61      	ldr	r3, [pc, #388]	; (8005830 <HAL_RCC_OscConfig+0x478>)
 80056ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ae:	4a60      	ldr	r2, [pc, #384]	; (8005830 <HAL_RCC_OscConfig+0x478>)
 80056b0:	f043 0304 	orr.w	r3, r3, #4
 80056b4:	6713      	str	r3, [r2, #112]	; 0x70
 80056b6:	4b5e      	ldr	r3, [pc, #376]	; (8005830 <HAL_RCC_OscConfig+0x478>)
 80056b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ba:	4a5d      	ldr	r2, [pc, #372]	; (8005830 <HAL_RCC_OscConfig+0x478>)
 80056bc:	f043 0301 	orr.w	r3, r3, #1
 80056c0:	6713      	str	r3, [r2, #112]	; 0x70
 80056c2:	e00b      	b.n	80056dc <HAL_RCC_OscConfig+0x324>
 80056c4:	4b5a      	ldr	r3, [pc, #360]	; (8005830 <HAL_RCC_OscConfig+0x478>)
 80056c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c8:	4a59      	ldr	r2, [pc, #356]	; (8005830 <HAL_RCC_OscConfig+0x478>)
 80056ca:	f023 0301 	bic.w	r3, r3, #1
 80056ce:	6713      	str	r3, [r2, #112]	; 0x70
 80056d0:	4b57      	ldr	r3, [pc, #348]	; (8005830 <HAL_RCC_OscConfig+0x478>)
 80056d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d4:	4a56      	ldr	r2, [pc, #344]	; (8005830 <HAL_RCC_OscConfig+0x478>)
 80056d6:	f023 0304 	bic.w	r3, r3, #4
 80056da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d015      	beq.n	8005710 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056e4:	f7fd fa76 	bl	8002bd4 <HAL_GetTick>
 80056e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056ea:	e00a      	b.n	8005702 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056ec:	f7fd fa72 	bl	8002bd4 <HAL_GetTick>
 80056f0:	4602      	mov	r2, r0
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d901      	bls.n	8005702 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e0d7      	b.n	80058b2 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005702:	4b4b      	ldr	r3, [pc, #300]	; (8005830 <HAL_RCC_OscConfig+0x478>)
 8005704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005706:	f003 0302 	and.w	r3, r3, #2
 800570a:	2b00      	cmp	r3, #0
 800570c:	d0ee      	beq.n	80056ec <HAL_RCC_OscConfig+0x334>
 800570e:	e014      	b.n	800573a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005710:	f7fd fa60 	bl	8002bd4 <HAL_GetTick>
 8005714:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005716:	e00a      	b.n	800572e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005718:	f7fd fa5c 	bl	8002bd4 <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	f241 3288 	movw	r2, #5000	; 0x1388
 8005726:	4293      	cmp	r3, r2
 8005728:	d901      	bls.n	800572e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e0c1      	b.n	80058b2 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800572e:	4b40      	ldr	r3, [pc, #256]	; (8005830 <HAL_RCC_OscConfig+0x478>)
 8005730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005732:	f003 0302 	and.w	r3, r3, #2
 8005736:	2b00      	cmp	r3, #0
 8005738:	d1ee      	bne.n	8005718 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800573a:	7dfb      	ldrb	r3, [r7, #23]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d105      	bne.n	800574c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005740:	4b3b      	ldr	r3, [pc, #236]	; (8005830 <HAL_RCC_OscConfig+0x478>)
 8005742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005744:	4a3a      	ldr	r2, [pc, #232]	; (8005830 <HAL_RCC_OscConfig+0x478>)
 8005746:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800574a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	699b      	ldr	r3, [r3, #24]
 8005750:	2b00      	cmp	r3, #0
 8005752:	f000 80ad 	beq.w	80058b0 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005756:	4b36      	ldr	r3, [pc, #216]	; (8005830 <HAL_RCC_OscConfig+0x478>)
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f003 030c 	and.w	r3, r3, #12
 800575e:	2b08      	cmp	r3, #8
 8005760:	d060      	beq.n	8005824 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	2b02      	cmp	r3, #2
 8005768:	d145      	bne.n	80057f6 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800576a:	4b33      	ldr	r3, [pc, #204]	; (8005838 <HAL_RCC_OscConfig+0x480>)
 800576c:	2200      	movs	r2, #0
 800576e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005770:	f7fd fa30 	bl	8002bd4 <HAL_GetTick>
 8005774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005776:	e008      	b.n	800578a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005778:	f7fd fa2c 	bl	8002bd4 <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	2b02      	cmp	r3, #2
 8005784:	d901      	bls.n	800578a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e093      	b.n	80058b2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800578a:	4b29      	ldr	r3, [pc, #164]	; (8005830 <HAL_RCC_OscConfig+0x478>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1f0      	bne.n	8005778 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	69da      	ldr	r2, [r3, #28]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a1b      	ldr	r3, [r3, #32]
 800579e:	431a      	orrs	r2, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a4:	019b      	lsls	r3, r3, #6
 80057a6:	431a      	orrs	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ac:	085b      	lsrs	r3, r3, #1
 80057ae:	3b01      	subs	r3, #1
 80057b0:	041b      	lsls	r3, r3, #16
 80057b2:	431a      	orrs	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b8:	061b      	lsls	r3, r3, #24
 80057ba:	431a      	orrs	r2, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c0:	071b      	lsls	r3, r3, #28
 80057c2:	491b      	ldr	r1, [pc, #108]	; (8005830 <HAL_RCC_OscConfig+0x478>)
 80057c4:	4313      	orrs	r3, r2
 80057c6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057c8:	4b1b      	ldr	r3, [pc, #108]	; (8005838 <HAL_RCC_OscConfig+0x480>)
 80057ca:	2201      	movs	r2, #1
 80057cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ce:	f7fd fa01 	bl	8002bd4 <HAL_GetTick>
 80057d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057d4:	e008      	b.n	80057e8 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057d6:	f7fd f9fd 	bl	8002bd4 <HAL_GetTick>
 80057da:	4602      	mov	r2, r0
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d901      	bls.n	80057e8 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	e064      	b.n	80058b2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057e8:	4b11      	ldr	r3, [pc, #68]	; (8005830 <HAL_RCC_OscConfig+0x478>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d0f0      	beq.n	80057d6 <HAL_RCC_OscConfig+0x41e>
 80057f4:	e05c      	b.n	80058b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057f6:	4b10      	ldr	r3, [pc, #64]	; (8005838 <HAL_RCC_OscConfig+0x480>)
 80057f8:	2200      	movs	r2, #0
 80057fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057fc:	f7fd f9ea 	bl	8002bd4 <HAL_GetTick>
 8005800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005802:	e008      	b.n	8005816 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005804:	f7fd f9e6 	bl	8002bd4 <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	2b02      	cmp	r3, #2
 8005810:	d901      	bls.n	8005816 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e04d      	b.n	80058b2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005816:	4b06      	ldr	r3, [pc, #24]	; (8005830 <HAL_RCC_OscConfig+0x478>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1f0      	bne.n	8005804 <HAL_RCC_OscConfig+0x44c>
 8005822:	e045      	b.n	80058b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	2b01      	cmp	r3, #1
 800582a:	d107      	bne.n	800583c <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e040      	b.n	80058b2 <HAL_RCC_OscConfig+0x4fa>
 8005830:	40023800 	.word	0x40023800
 8005834:	40007000 	.word	0x40007000
 8005838:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800583c:	4b1f      	ldr	r3, [pc, #124]	; (80058bc <HAL_RCC_OscConfig+0x504>)
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	699b      	ldr	r3, [r3, #24]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d030      	beq.n	80058ac <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005854:	429a      	cmp	r2, r3
 8005856:	d129      	bne.n	80058ac <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005862:	429a      	cmp	r2, r3
 8005864:	d122      	bne.n	80058ac <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800586c:	4013      	ands	r3, r2
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005872:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005874:	4293      	cmp	r3, r2
 8005876:	d119      	bne.n	80058ac <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005882:	085b      	lsrs	r3, r3, #1
 8005884:	3b01      	subs	r3, #1
 8005886:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005888:	429a      	cmp	r2, r3
 800588a:	d10f      	bne.n	80058ac <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005896:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005898:	429a      	cmp	r2, r3
 800589a:	d107      	bne.n	80058ac <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d001      	beq.n	80058b0 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e000      	b.n	80058b2 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3718      	adds	r7, #24
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	40023800 	.word	0x40023800

080058c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d101      	bne.n	80058d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e041      	b.n	8005956 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d106      	bne.n	80058ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f7fc fb74 	bl	8001fd4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2202      	movs	r2, #2
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	3304      	adds	r3, #4
 80058fc:	4619      	mov	r1, r3
 80058fe:	4610      	mov	r0, r2
 8005900:	f000 f996 	bl	8005c30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3708      	adds	r7, #8
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b086      	sub	sp, #24
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
 8005966:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d101      	bne.n	8005972 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e097      	b.n	8005aa2 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005978:	b2db      	uxtb	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d106      	bne.n	800598c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f7fc fb72 	bl	8002070 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2202      	movs	r2, #2
 8005990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	6812      	ldr	r2, [r2, #0]
 800599e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059a2:	f023 0307 	bic.w	r3, r3, #7
 80059a6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	3304      	adds	r3, #4
 80059b0:	4619      	mov	r1, r3
 80059b2:	4610      	mov	r0, r2
 80059b4:	f000 f93c 	bl	8005c30 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	6a1b      	ldr	r3, [r3, #32]
 80059ce:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	697a      	ldr	r2, [r7, #20]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059e0:	f023 0303 	bic.w	r3, r3, #3
 80059e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	689a      	ldr	r2, [r3, #8]
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	021b      	lsls	r3, r3, #8
 80059f0:	4313      	orrs	r3, r2
 80059f2:	693a      	ldr	r2, [r7, #16]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80059fe:	f023 030c 	bic.w	r3, r3, #12
 8005a02:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	68da      	ldr	r2, [r3, #12]
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	69db      	ldr	r3, [r3, #28]
 8005a18:	021b      	lsls	r3, r3, #8
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	011a      	lsls	r2, r3, #4
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	6a1b      	ldr	r3, [r3, #32]
 8005a2c:	031b      	lsls	r3, r3, #12
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005a3c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005a44:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	685a      	ldr	r2, [r3, #4]
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	011b      	lsls	r3, r3, #4
 8005a50:	4313      	orrs	r3, r2
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	697a      	ldr	r2, [r7, #20]
 8005a5e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3718      	adds	r7, #24
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
	...

08005aac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b086      	sub	sp, #24
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d101      	bne.n	8005aca <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005ac6:	2302      	movs	r3, #2
 8005ac8:	e0ae      	b.n	8005c28 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2b0c      	cmp	r3, #12
 8005ad6:	f200 809f 	bhi.w	8005c18 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005ada:	a201      	add	r2, pc, #4	; (adr r2, 8005ae0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae0:	08005b15 	.word	0x08005b15
 8005ae4:	08005c19 	.word	0x08005c19
 8005ae8:	08005c19 	.word	0x08005c19
 8005aec:	08005c19 	.word	0x08005c19
 8005af0:	08005b55 	.word	0x08005b55
 8005af4:	08005c19 	.word	0x08005c19
 8005af8:	08005c19 	.word	0x08005c19
 8005afc:	08005c19 	.word	0x08005c19
 8005b00:	08005b97 	.word	0x08005b97
 8005b04:	08005c19 	.word	0x08005c19
 8005b08:	08005c19 	.word	0x08005c19
 8005b0c:	08005c19 	.word	0x08005c19
 8005b10:	08005bd7 	.word	0x08005bd7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68b9      	ldr	r1, [r7, #8]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f000 f928 	bl	8005d70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	699a      	ldr	r2, [r3, #24]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f042 0208 	orr.w	r2, r2, #8
 8005b2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	699a      	ldr	r2, [r3, #24]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f022 0204 	bic.w	r2, r2, #4
 8005b3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	6999      	ldr	r1, [r3, #24]
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	691a      	ldr	r2, [r3, #16]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	619a      	str	r2, [r3, #24]
      break;
 8005b52:	e064      	b.n	8005c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68b9      	ldr	r1, [r7, #8]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f000 f978 	bl	8005e50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	699a      	ldr	r2, [r3, #24]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	699a      	ldr	r2, [r3, #24]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	6999      	ldr	r1, [r3, #24]
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	021a      	lsls	r2, r3, #8
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	430a      	orrs	r2, r1
 8005b92:	619a      	str	r2, [r3, #24]
      break;
 8005b94:	e043      	b.n	8005c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68b9      	ldr	r1, [r7, #8]
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f000 f9cd 	bl	8005f3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	69da      	ldr	r2, [r3, #28]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f042 0208 	orr.w	r2, r2, #8
 8005bb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	69da      	ldr	r2, [r3, #28]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f022 0204 	bic.w	r2, r2, #4
 8005bc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	69d9      	ldr	r1, [r3, #28]
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	691a      	ldr	r2, [r3, #16]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	61da      	str	r2, [r3, #28]
      break;
 8005bd4:	e023      	b.n	8005c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68b9      	ldr	r1, [r7, #8]
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f000 fa21 	bl	8006024 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	69da      	ldr	r2, [r3, #28]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	69da      	ldr	r2, [r3, #28]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	69d9      	ldr	r1, [r3, #28]
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	021a      	lsls	r2, r3, #8
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	430a      	orrs	r2, r1
 8005c14:	61da      	str	r2, [r3, #28]
      break;
 8005c16:	e002      	b.n	8005c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3718      	adds	r7, #24
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a40      	ldr	r2, [pc, #256]	; (8005d44 <TIM_Base_SetConfig+0x114>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d013      	beq.n	8005c70 <TIM_Base_SetConfig+0x40>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c4e:	d00f      	beq.n	8005c70 <TIM_Base_SetConfig+0x40>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a3d      	ldr	r2, [pc, #244]	; (8005d48 <TIM_Base_SetConfig+0x118>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d00b      	beq.n	8005c70 <TIM_Base_SetConfig+0x40>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a3c      	ldr	r2, [pc, #240]	; (8005d4c <TIM_Base_SetConfig+0x11c>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d007      	beq.n	8005c70 <TIM_Base_SetConfig+0x40>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a3b      	ldr	r2, [pc, #236]	; (8005d50 <TIM_Base_SetConfig+0x120>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d003      	beq.n	8005c70 <TIM_Base_SetConfig+0x40>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a3a      	ldr	r2, [pc, #232]	; (8005d54 <TIM_Base_SetConfig+0x124>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d108      	bne.n	8005c82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a2f      	ldr	r2, [pc, #188]	; (8005d44 <TIM_Base_SetConfig+0x114>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d02b      	beq.n	8005ce2 <TIM_Base_SetConfig+0xb2>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c90:	d027      	beq.n	8005ce2 <TIM_Base_SetConfig+0xb2>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a2c      	ldr	r2, [pc, #176]	; (8005d48 <TIM_Base_SetConfig+0x118>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d023      	beq.n	8005ce2 <TIM_Base_SetConfig+0xb2>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a2b      	ldr	r2, [pc, #172]	; (8005d4c <TIM_Base_SetConfig+0x11c>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d01f      	beq.n	8005ce2 <TIM_Base_SetConfig+0xb2>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a2a      	ldr	r2, [pc, #168]	; (8005d50 <TIM_Base_SetConfig+0x120>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d01b      	beq.n	8005ce2 <TIM_Base_SetConfig+0xb2>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a29      	ldr	r2, [pc, #164]	; (8005d54 <TIM_Base_SetConfig+0x124>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d017      	beq.n	8005ce2 <TIM_Base_SetConfig+0xb2>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a28      	ldr	r2, [pc, #160]	; (8005d58 <TIM_Base_SetConfig+0x128>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d013      	beq.n	8005ce2 <TIM_Base_SetConfig+0xb2>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a27      	ldr	r2, [pc, #156]	; (8005d5c <TIM_Base_SetConfig+0x12c>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d00f      	beq.n	8005ce2 <TIM_Base_SetConfig+0xb2>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a26      	ldr	r2, [pc, #152]	; (8005d60 <TIM_Base_SetConfig+0x130>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d00b      	beq.n	8005ce2 <TIM_Base_SetConfig+0xb2>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a25      	ldr	r2, [pc, #148]	; (8005d64 <TIM_Base_SetConfig+0x134>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d007      	beq.n	8005ce2 <TIM_Base_SetConfig+0xb2>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a24      	ldr	r2, [pc, #144]	; (8005d68 <TIM_Base_SetConfig+0x138>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d003      	beq.n	8005ce2 <TIM_Base_SetConfig+0xb2>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a23      	ldr	r2, [pc, #140]	; (8005d6c <TIM_Base_SetConfig+0x13c>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d108      	bne.n	8005cf4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ce8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	689a      	ldr	r2, [r3, #8]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a0a      	ldr	r2, [pc, #40]	; (8005d44 <TIM_Base_SetConfig+0x114>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d003      	beq.n	8005d28 <TIM_Base_SetConfig+0xf8>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a0c      	ldr	r2, [pc, #48]	; (8005d54 <TIM_Base_SetConfig+0x124>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d103      	bne.n	8005d30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	691a      	ldr	r2, [r3, #16]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	615a      	str	r2, [r3, #20]
}
 8005d36:	bf00      	nop
 8005d38:	3714      	adds	r7, #20
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	40010000 	.word	0x40010000
 8005d48:	40000400 	.word	0x40000400
 8005d4c:	40000800 	.word	0x40000800
 8005d50:	40000c00 	.word	0x40000c00
 8005d54:	40010400 	.word	0x40010400
 8005d58:	40014000 	.word	0x40014000
 8005d5c:	40014400 	.word	0x40014400
 8005d60:	40014800 	.word	0x40014800
 8005d64:	40001800 	.word	0x40001800
 8005d68:	40001c00 	.word	0x40001c00
 8005d6c:	40002000 	.word	0x40002000

08005d70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b087      	sub	sp, #28
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	f023 0201 	bic.w	r2, r3, #1
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f023 0303 	bic.w	r3, r3, #3
 8005da6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	f023 0302 	bic.w	r3, r3, #2
 8005db8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	697a      	ldr	r2, [r7, #20]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a20      	ldr	r2, [pc, #128]	; (8005e48 <TIM_OC1_SetConfig+0xd8>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d003      	beq.n	8005dd4 <TIM_OC1_SetConfig+0x64>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a1f      	ldr	r2, [pc, #124]	; (8005e4c <TIM_OC1_SetConfig+0xdc>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d10c      	bne.n	8005dee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	f023 0308 	bic.w	r3, r3, #8
 8005dda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	697a      	ldr	r2, [r7, #20]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	f023 0304 	bic.w	r3, r3, #4
 8005dec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a15      	ldr	r2, [pc, #84]	; (8005e48 <TIM_OC1_SetConfig+0xd8>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d003      	beq.n	8005dfe <TIM_OC1_SetConfig+0x8e>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a14      	ldr	r2, [pc, #80]	; (8005e4c <TIM_OC1_SetConfig+0xdc>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d111      	bne.n	8005e22 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	693a      	ldr	r2, [r7, #16]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	693a      	ldr	r2, [r7, #16]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	685a      	ldr	r2, [r3, #4]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	697a      	ldr	r2, [r7, #20]
 8005e3a:	621a      	str	r2, [r3, #32]
}
 8005e3c:	bf00      	nop
 8005e3e:	371c      	adds	r7, #28
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr
 8005e48:	40010000 	.word	0x40010000
 8005e4c:	40010400 	.word	0x40010400

08005e50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b087      	sub	sp, #28
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	f023 0210 	bic.w	r2, r3, #16
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	699b      	ldr	r3, [r3, #24]
 8005e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	021b      	lsls	r3, r3, #8
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	f023 0320 	bic.w	r3, r3, #32
 8005e9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	011b      	lsls	r3, r3, #4
 8005ea2:	697a      	ldr	r2, [r7, #20]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a22      	ldr	r2, [pc, #136]	; (8005f34 <TIM_OC2_SetConfig+0xe4>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d003      	beq.n	8005eb8 <TIM_OC2_SetConfig+0x68>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a21      	ldr	r2, [pc, #132]	; (8005f38 <TIM_OC2_SetConfig+0xe8>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d10d      	bne.n	8005ed4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ebe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	011b      	lsls	r3, r3, #4
 8005ec6:	697a      	ldr	r2, [r7, #20]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ed2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a17      	ldr	r2, [pc, #92]	; (8005f34 <TIM_OC2_SetConfig+0xe4>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d003      	beq.n	8005ee4 <TIM_OC2_SetConfig+0x94>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a16      	ldr	r2, [pc, #88]	; (8005f38 <TIM_OC2_SetConfig+0xe8>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d113      	bne.n	8005f0c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005eea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	695b      	ldr	r3, [r3, #20]
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	693a      	ldr	r2, [r7, #16]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	699b      	ldr	r3, [r3, #24]
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	685a      	ldr	r2, [r3, #4]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	621a      	str	r2, [r3, #32]
}
 8005f26:	bf00      	nop
 8005f28:	371c      	adds	r7, #28
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	40010000 	.word	0x40010000
 8005f38:	40010400 	.word	0x40010400

08005f3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b087      	sub	sp, #28
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a1b      	ldr	r3, [r3, #32]
 8005f4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a1b      	ldr	r3, [r3, #32]
 8005f56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	69db      	ldr	r3, [r3, #28]
 8005f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f023 0303 	bic.w	r3, r3, #3
 8005f72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	68fa      	ldr	r2, [r7, #12]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	021b      	lsls	r3, r3, #8
 8005f8c:	697a      	ldr	r2, [r7, #20]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a21      	ldr	r2, [pc, #132]	; (800601c <TIM_OC3_SetConfig+0xe0>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d003      	beq.n	8005fa2 <TIM_OC3_SetConfig+0x66>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a20      	ldr	r2, [pc, #128]	; (8006020 <TIM_OC3_SetConfig+0xe4>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d10d      	bne.n	8005fbe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fa8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	021b      	lsls	r3, r3, #8
 8005fb0:	697a      	ldr	r2, [r7, #20]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a16      	ldr	r2, [pc, #88]	; (800601c <TIM_OC3_SetConfig+0xe0>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d003      	beq.n	8005fce <TIM_OC3_SetConfig+0x92>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a15      	ldr	r2, [pc, #84]	; (8006020 <TIM_OC3_SetConfig+0xe4>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d113      	bne.n	8005ff6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	011b      	lsls	r3, r3, #4
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	011b      	lsls	r3, r3, #4
 8005ff0:	693a      	ldr	r2, [r7, #16]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	685a      	ldr	r2, [r3, #4]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	697a      	ldr	r2, [r7, #20]
 800600e:	621a      	str	r2, [r3, #32]
}
 8006010:	bf00      	nop
 8006012:	371c      	adds	r7, #28
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr
 800601c:	40010000 	.word	0x40010000
 8006020:	40010400 	.word	0x40010400

08006024 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006024:	b480      	push	{r7}
 8006026:	b087      	sub	sp, #28
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a1b      	ldr	r3, [r3, #32]
 8006032:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a1b      	ldr	r3, [r3, #32]
 800603e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	69db      	ldr	r3, [r3, #28]
 800604a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800605a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	021b      	lsls	r3, r3, #8
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	4313      	orrs	r3, r2
 8006066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800606e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	031b      	lsls	r3, r3, #12
 8006076:	693a      	ldr	r2, [r7, #16]
 8006078:	4313      	orrs	r3, r2
 800607a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a12      	ldr	r2, [pc, #72]	; (80060c8 <TIM_OC4_SetConfig+0xa4>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d003      	beq.n	800608c <TIM_OC4_SetConfig+0x68>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a11      	ldr	r2, [pc, #68]	; (80060cc <TIM_OC4_SetConfig+0xa8>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d109      	bne.n	80060a0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006092:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	695b      	ldr	r3, [r3, #20]
 8006098:	019b      	lsls	r3, r3, #6
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	4313      	orrs	r3, r2
 800609e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	697a      	ldr	r2, [r7, #20]
 80060a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	685a      	ldr	r2, [r3, #4]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	693a      	ldr	r2, [r7, #16]
 80060b8:	621a      	str	r2, [r3, #32]
}
 80060ba:	bf00      	nop
 80060bc:	371c      	adds	r7, #28
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	40010000 	.word	0x40010000
 80060cc:	40010400 	.word	0x40010400

080060d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d101      	bne.n	80060e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060e4:	2302      	movs	r3, #2
 80060e6:	e05a      	b.n	800619e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2202      	movs	r2, #2
 80060f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800610e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	4313      	orrs	r3, r2
 8006118:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a21      	ldr	r2, [pc, #132]	; (80061ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d022      	beq.n	8006172 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006134:	d01d      	beq.n	8006172 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a1d      	ldr	r2, [pc, #116]	; (80061b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d018      	beq.n	8006172 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a1b      	ldr	r2, [pc, #108]	; (80061b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d013      	beq.n	8006172 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a1a      	ldr	r2, [pc, #104]	; (80061b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d00e      	beq.n	8006172 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a18      	ldr	r2, [pc, #96]	; (80061bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d009      	beq.n	8006172 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a17      	ldr	r2, [pc, #92]	; (80061c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d004      	beq.n	8006172 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a15      	ldr	r2, [pc, #84]	; (80061c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d10c      	bne.n	800618c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006178:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	68ba      	ldr	r2, [r7, #8]
 8006180:	4313      	orrs	r3, r2
 8006182:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68ba      	ldr	r2, [r7, #8]
 800618a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3714      	adds	r7, #20
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr
 80061aa:	bf00      	nop
 80061ac:	40010000 	.word	0x40010000
 80061b0:	40000400 	.word	0x40000400
 80061b4:	40000800 	.word	0x40000800
 80061b8:	40000c00 	.word	0x40000c00
 80061bc:	40010400 	.word	0x40010400
 80061c0:	40014000 	.word	0x40014000
 80061c4:	40001800 	.word	0x40001800

080061c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b085      	sub	sp, #20
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80061d2:	2300      	movs	r3, #0
 80061d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d101      	bne.n	80061e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80061e0:	2302      	movs	r3, #2
 80061e2:	e03d      	b.n	8006260 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	4313      	orrs	r3, r2
 8006206:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	4313      	orrs	r3, r2
 8006214:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4313      	orrs	r3, r2
 8006222:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	4313      	orrs	r3, r2
 8006230:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	695b      	ldr	r3, [r3, #20]
 800623c:	4313      	orrs	r3, r2
 800623e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	69db      	ldr	r3, [r3, #28]
 800624a:	4313      	orrs	r3, r2
 800624c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	3714      	adds	r7, #20
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d101      	bne.n	800627e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e03f      	b.n	80062fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006284:	b2db      	uxtb	r3, r3
 8006286:	2b00      	cmp	r3, #0
 8006288:	d106      	bne.n	8006298 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f7fc fb1c 	bl	80028d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2224      	movs	r2, #36	; 0x24
 800629c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68da      	ldr	r2, [r3, #12]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 fc7b 	bl	8006bac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	691a      	ldr	r2, [r3, #16]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	695a      	ldr	r2, [r3, #20]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68da      	ldr	r2, [r3, #12]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2220      	movs	r2, #32
 80062f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2220      	movs	r2, #32
 80062f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3708      	adds	r7, #8
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
	...

08006308 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b0ba      	sub	sp, #232	; 0xe8
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	695b      	ldr	r3, [r3, #20]
 800632a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800632e:	2300      	movs	r3, #0
 8006330:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006334:	2300      	movs	r3, #0
 8006336:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800633a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800633e:	f003 030f 	and.w	r3, r3, #15
 8006342:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006346:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10f      	bne.n	800636e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800634e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006352:	f003 0320 	and.w	r3, r3, #32
 8006356:	2b00      	cmp	r3, #0
 8006358:	d009      	beq.n	800636e <HAL_UART_IRQHandler+0x66>
 800635a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800635e:	f003 0320 	and.w	r3, r3, #32
 8006362:	2b00      	cmp	r3, #0
 8006364:	d003      	beq.n	800636e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 fb65 	bl	8006a36 <UART_Receive_IT>
      return;
 800636c:	e256      	b.n	800681c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800636e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006372:	2b00      	cmp	r3, #0
 8006374:	f000 80de 	beq.w	8006534 <HAL_UART_IRQHandler+0x22c>
 8006378:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800637c:	f003 0301 	and.w	r3, r3, #1
 8006380:	2b00      	cmp	r3, #0
 8006382:	d106      	bne.n	8006392 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006388:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800638c:	2b00      	cmp	r3, #0
 800638e:	f000 80d1 	beq.w	8006534 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006396:	f003 0301 	and.w	r3, r3, #1
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00b      	beq.n	80063b6 <HAL_UART_IRQHandler+0xae>
 800639e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d005      	beq.n	80063b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ae:	f043 0201 	orr.w	r2, r3, #1
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ba:	f003 0304 	and.w	r3, r3, #4
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00b      	beq.n	80063da <HAL_UART_IRQHandler+0xd2>
 80063c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063c6:	f003 0301 	and.w	r3, r3, #1
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d005      	beq.n	80063da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d2:	f043 0202 	orr.w	r2, r3, #2
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063de:	f003 0302 	and.w	r3, r3, #2
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00b      	beq.n	80063fe <HAL_UART_IRQHandler+0xf6>
 80063e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063ea:	f003 0301 	and.w	r3, r3, #1
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d005      	beq.n	80063fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f6:	f043 0204 	orr.w	r2, r3, #4
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80063fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006402:	f003 0308 	and.w	r3, r3, #8
 8006406:	2b00      	cmp	r3, #0
 8006408:	d011      	beq.n	800642e <HAL_UART_IRQHandler+0x126>
 800640a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800640e:	f003 0320 	and.w	r3, r3, #32
 8006412:	2b00      	cmp	r3, #0
 8006414:	d105      	bne.n	8006422 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006416:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800641a:	f003 0301 	and.w	r3, r3, #1
 800641e:	2b00      	cmp	r3, #0
 8006420:	d005      	beq.n	800642e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006426:	f043 0208 	orr.w	r2, r3, #8
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006432:	2b00      	cmp	r3, #0
 8006434:	f000 81ed 	beq.w	8006812 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800643c:	f003 0320 	and.w	r3, r3, #32
 8006440:	2b00      	cmp	r3, #0
 8006442:	d008      	beq.n	8006456 <HAL_UART_IRQHandler+0x14e>
 8006444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006448:	f003 0320 	and.w	r3, r3, #32
 800644c:	2b00      	cmp	r3, #0
 800644e:	d002      	beq.n	8006456 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 faf0 	bl	8006a36 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	695b      	ldr	r3, [r3, #20]
 800645c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006460:	2b40      	cmp	r3, #64	; 0x40
 8006462:	bf0c      	ite	eq
 8006464:	2301      	moveq	r3, #1
 8006466:	2300      	movne	r3, #0
 8006468:	b2db      	uxtb	r3, r3
 800646a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006472:	f003 0308 	and.w	r3, r3, #8
 8006476:	2b00      	cmp	r3, #0
 8006478:	d103      	bne.n	8006482 <HAL_UART_IRQHandler+0x17a>
 800647a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800647e:	2b00      	cmp	r3, #0
 8006480:	d04f      	beq.n	8006522 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 f9f8 	bl	8006878 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	695b      	ldr	r3, [r3, #20]
 800648e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006492:	2b40      	cmp	r3, #64	; 0x40
 8006494:	d141      	bne.n	800651a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	3314      	adds	r3, #20
 800649c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064a4:	e853 3f00 	ldrex	r3, [r3]
 80064a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80064ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80064b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	3314      	adds	r3, #20
 80064be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80064c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80064c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80064ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80064d2:	e841 2300 	strex	r3, r2, [r1]
 80064d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80064da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1d9      	bne.n	8006496 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d013      	beq.n	8006512 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ee:	4a7d      	ldr	r2, [pc, #500]	; (80066e4 <HAL_UART_IRQHandler+0x3dc>)
 80064f0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f6:	4618      	mov	r0, r3
 80064f8:	f7fd f84a 	bl	8003590 <HAL_DMA_Abort_IT>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d016      	beq.n	8006530 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800650c:	4610      	mov	r0, r2
 800650e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006510:	e00e      	b.n	8006530 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 f99a 	bl	800684c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006518:	e00a      	b.n	8006530 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f996 	bl	800684c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006520:	e006      	b.n	8006530 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 f992 	bl	800684c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800652e:	e170      	b.n	8006812 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006530:	bf00      	nop
    return;
 8006532:	e16e      	b.n	8006812 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006538:	2b01      	cmp	r3, #1
 800653a:	f040 814a 	bne.w	80067d2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800653e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006542:	f003 0310 	and.w	r3, r3, #16
 8006546:	2b00      	cmp	r3, #0
 8006548:	f000 8143 	beq.w	80067d2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800654c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006550:	f003 0310 	and.w	r3, r3, #16
 8006554:	2b00      	cmp	r3, #0
 8006556:	f000 813c 	beq.w	80067d2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800655a:	2300      	movs	r3, #0
 800655c:	60bb      	str	r3, [r7, #8]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	60bb      	str	r3, [r7, #8]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	60bb      	str	r3, [r7, #8]
 800656e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800657a:	2b40      	cmp	r3, #64	; 0x40
 800657c:	f040 80b4 	bne.w	80066e8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800658c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006590:	2b00      	cmp	r3, #0
 8006592:	f000 8140 	beq.w	8006816 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800659a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800659e:	429a      	cmp	r2, r3
 80065a0:	f080 8139 	bcs.w	8006816 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80065aa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b0:	69db      	ldr	r3, [r3, #28]
 80065b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065b6:	f000 8088 	beq.w	80066ca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	330c      	adds	r3, #12
 80065c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80065c8:	e853 3f00 	ldrex	r3, [r3]
 80065cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80065d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80065d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	330c      	adds	r3, #12
 80065e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80065e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80065ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80065f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80065f6:	e841 2300 	strex	r3, r2, [r1]
 80065fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80065fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006602:	2b00      	cmp	r3, #0
 8006604:	d1d9      	bne.n	80065ba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	3314      	adds	r3, #20
 800660c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006610:	e853 3f00 	ldrex	r3, [r3]
 8006614:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006616:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006618:	f023 0301 	bic.w	r3, r3, #1
 800661c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	3314      	adds	r3, #20
 8006626:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800662a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800662e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006630:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006632:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006636:	e841 2300 	strex	r3, r2, [r1]
 800663a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800663c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800663e:	2b00      	cmp	r3, #0
 8006640:	d1e1      	bne.n	8006606 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	3314      	adds	r3, #20
 8006648:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800664c:	e853 3f00 	ldrex	r3, [r3]
 8006650:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006652:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006654:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006658:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	3314      	adds	r3, #20
 8006662:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006666:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006668:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800666c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800666e:	e841 2300 	strex	r3, r2, [r1]
 8006672:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006674:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1e3      	bne.n	8006642 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2220      	movs	r2, #32
 800667e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	330c      	adds	r3, #12
 800668e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006692:	e853 3f00 	ldrex	r3, [r3]
 8006696:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006698:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800669a:	f023 0310 	bic.w	r3, r3, #16
 800669e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	330c      	adds	r3, #12
 80066a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80066ac:	65ba      	str	r2, [r7, #88]	; 0x58
 80066ae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80066b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80066b4:	e841 2300 	strex	r3, r2, [r1]
 80066b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80066ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1e3      	bne.n	8006688 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c4:	4618      	mov	r0, r3
 80066c6:	f7fc fef3 	bl	80034b0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	4619      	mov	r1, r3
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 f8c0 	bl	8006860 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80066e0:	e099      	b.n	8006816 <HAL_UART_IRQHandler+0x50e>
 80066e2:	bf00      	nop
 80066e4:	0800693f 	.word	0x0800693f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	1ad3      	subs	r3, r2, r3
 80066f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	2b00      	cmp	r3, #0
 8006700:	f000 808b 	beq.w	800681a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006704:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006708:	2b00      	cmp	r3, #0
 800670a:	f000 8086 	beq.w	800681a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	330c      	adds	r3, #12
 8006714:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006718:	e853 3f00 	ldrex	r3, [r3]
 800671c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800671e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006720:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006724:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	330c      	adds	r3, #12
 800672e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006732:	647a      	str	r2, [r7, #68]	; 0x44
 8006734:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006736:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006738:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800673a:	e841 2300 	strex	r3, r2, [r1]
 800673e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006742:	2b00      	cmp	r3, #0
 8006744:	d1e3      	bne.n	800670e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	3314      	adds	r3, #20
 800674c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800674e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006750:	e853 3f00 	ldrex	r3, [r3]
 8006754:	623b      	str	r3, [r7, #32]
   return(result);
 8006756:	6a3b      	ldr	r3, [r7, #32]
 8006758:	f023 0301 	bic.w	r3, r3, #1
 800675c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	3314      	adds	r3, #20
 8006766:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800676a:	633a      	str	r2, [r7, #48]	; 0x30
 800676c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800676e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006770:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006772:	e841 2300 	strex	r3, r2, [r1]
 8006776:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677a:	2b00      	cmp	r3, #0
 800677c:	d1e3      	bne.n	8006746 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2220      	movs	r2, #32
 8006782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	330c      	adds	r3, #12
 8006792:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	e853 3f00 	ldrex	r3, [r3]
 800679a:	60fb      	str	r3, [r7, #12]
   return(result);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f023 0310 	bic.w	r3, r3, #16
 80067a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	330c      	adds	r3, #12
 80067ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80067b0:	61fa      	str	r2, [r7, #28]
 80067b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b4:	69b9      	ldr	r1, [r7, #24]
 80067b6:	69fa      	ldr	r2, [r7, #28]
 80067b8:	e841 2300 	strex	r3, r2, [r1]
 80067bc:	617b      	str	r3, [r7, #20]
   return(result);
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d1e3      	bne.n	800678c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80067c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80067c8:	4619      	mov	r1, r3
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f848 	bl	8006860 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80067d0:	e023      	b.n	800681a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80067d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d009      	beq.n	80067f2 <HAL_UART_IRQHandler+0x4ea>
 80067de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d003      	beq.n	80067f2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 f8bb 	bl	8006966 <UART_Transmit_IT>
    return;
 80067f0:	e014      	b.n	800681c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80067f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d00e      	beq.n	800681c <HAL_UART_IRQHandler+0x514>
 80067fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006806:	2b00      	cmp	r3, #0
 8006808:	d008      	beq.n	800681c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 f8fb 	bl	8006a06 <UART_EndTransmit_IT>
    return;
 8006810:	e004      	b.n	800681c <HAL_UART_IRQHandler+0x514>
    return;
 8006812:	bf00      	nop
 8006814:	e002      	b.n	800681c <HAL_UART_IRQHandler+0x514>
      return;
 8006816:	bf00      	nop
 8006818:	e000      	b.n	800681c <HAL_UART_IRQHandler+0x514>
      return;
 800681a:	bf00      	nop
  }
}
 800681c:	37e8      	adds	r7, #232	; 0xe8
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop

08006824 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800682c:	bf00      	nop
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006840:	bf00      	nop
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006854:	bf00      	nop
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006860:	b480      	push	{r7}
 8006862:	b083      	sub	sp, #12
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	460b      	mov	r3, r1
 800686a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800686c:	bf00      	nop
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006878:	b480      	push	{r7}
 800687a:	b095      	sub	sp, #84	; 0x54
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	330c      	adds	r3, #12
 8006886:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800688a:	e853 3f00 	ldrex	r3, [r3]
 800688e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006892:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006896:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	330c      	adds	r3, #12
 800689e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80068a0:	643a      	str	r2, [r7, #64]	; 0x40
 80068a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80068a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068a8:	e841 2300 	strex	r3, r2, [r1]
 80068ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d1e5      	bne.n	8006880 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	3314      	adds	r3, #20
 80068ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068bc:	6a3b      	ldr	r3, [r7, #32]
 80068be:	e853 3f00 	ldrex	r3, [r3]
 80068c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	f023 0301 	bic.w	r3, r3, #1
 80068ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	3314      	adds	r3, #20
 80068d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068dc:	e841 2300 	strex	r3, r2, [r1]
 80068e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d1e5      	bne.n	80068b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d119      	bne.n	8006924 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	330c      	adds	r3, #12
 80068f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	e853 3f00 	ldrex	r3, [r3]
 80068fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	f023 0310 	bic.w	r3, r3, #16
 8006906:	647b      	str	r3, [r7, #68]	; 0x44
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	330c      	adds	r3, #12
 800690e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006910:	61ba      	str	r2, [r7, #24]
 8006912:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006914:	6979      	ldr	r1, [r7, #20]
 8006916:	69ba      	ldr	r2, [r7, #24]
 8006918:	e841 2300 	strex	r3, r2, [r1]
 800691c:	613b      	str	r3, [r7, #16]
   return(result);
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d1e5      	bne.n	80068f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2220      	movs	r2, #32
 8006928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006932:	bf00      	nop
 8006934:	3754      	adds	r7, #84	; 0x54
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr

0800693e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800693e:	b580      	push	{r7, lr}
 8006940:	b084      	sub	sp, #16
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800694a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2200      	movs	r2, #0
 8006950:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f7ff ff77 	bl	800684c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800695e:	bf00      	nop
 8006960:	3710      	adds	r7, #16
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006966:	b480      	push	{r7}
 8006968:	b085      	sub	sp, #20
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006974:	b2db      	uxtb	r3, r3
 8006976:	2b21      	cmp	r3, #33	; 0x21
 8006978:	d13e      	bne.n	80069f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006982:	d114      	bne.n	80069ae <UART_Transmit_IT+0x48>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d110      	bne.n	80069ae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6a1b      	ldr	r3, [r3, #32]
 8006990:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	881b      	ldrh	r3, [r3, #0]
 8006996:	461a      	mov	r2, r3
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a1b      	ldr	r3, [r3, #32]
 80069a6:	1c9a      	adds	r2, r3, #2
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	621a      	str	r2, [r3, #32]
 80069ac:	e008      	b.n	80069c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a1b      	ldr	r3, [r3, #32]
 80069b2:	1c59      	adds	r1, r3, #1
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	6211      	str	r1, [r2, #32]
 80069b8:	781a      	ldrb	r2, [r3, #0]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	3b01      	subs	r3, #1
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	4619      	mov	r1, r3
 80069ce:	84d1      	strh	r1, [r2, #38]	; 0x26
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d10f      	bne.n	80069f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68da      	ldr	r2, [r3, #12]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68da      	ldr	r2, [r3, #12]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80069f4:	2300      	movs	r3, #0
 80069f6:	e000      	b.n	80069fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80069f8:	2302      	movs	r3, #2
  }
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3714      	adds	r7, #20
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr

08006a06 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b082      	sub	sp, #8
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	68da      	ldr	r2, [r3, #12]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a1c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2220      	movs	r2, #32
 8006a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f7ff fefc 	bl	8006824 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3708      	adds	r7, #8
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b08c      	sub	sp, #48	; 0x30
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	2b22      	cmp	r3, #34	; 0x22
 8006a48:	f040 80ab 	bne.w	8006ba2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a54:	d117      	bne.n	8006a86 <UART_Receive_IT+0x50>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d113      	bne.n	8006a86 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a66:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a74:	b29a      	uxth	r2, r3
 8006a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a78:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a7e:	1c9a      	adds	r2, r3, #2
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	629a      	str	r2, [r3, #40]	; 0x28
 8006a84:	e026      	b.n	8006ad4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a98:	d007      	beq.n	8006aaa <UART_Receive_IT+0x74>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d10a      	bne.n	8006ab8 <UART_Receive_IT+0x82>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d106      	bne.n	8006ab8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	b2da      	uxtb	r2, r3
 8006ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab4:	701a      	strb	r2, [r3, #0]
 8006ab6:	e008      	b.n	8006aca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ac4:	b2da      	uxtb	r2, r3
 8006ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ace:	1c5a      	adds	r2, r3, #1
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	3b01      	subs	r3, #1
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d15a      	bne.n	8006b9e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	68da      	ldr	r2, [r3, #12]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f022 0220 	bic.w	r2, r2, #32
 8006af6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	68da      	ldr	r2, [r3, #12]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	695a      	ldr	r2, [r3, #20]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f022 0201 	bic.w	r2, r2, #1
 8006b16:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2220      	movs	r2, #32
 8006b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d135      	bne.n	8006b94 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	330c      	adds	r3, #12
 8006b34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	e853 3f00 	ldrex	r3, [r3]
 8006b3c:	613b      	str	r3, [r7, #16]
   return(result);
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	f023 0310 	bic.w	r3, r3, #16
 8006b44:	627b      	str	r3, [r7, #36]	; 0x24
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	330c      	adds	r3, #12
 8006b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b4e:	623a      	str	r2, [r7, #32]
 8006b50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b52:	69f9      	ldr	r1, [r7, #28]
 8006b54:	6a3a      	ldr	r2, [r7, #32]
 8006b56:	e841 2300 	strex	r3, r2, [r1]
 8006b5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1e5      	bne.n	8006b2e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 0310 	and.w	r3, r3, #16
 8006b6c:	2b10      	cmp	r3, #16
 8006b6e:	d10a      	bne.n	8006b86 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b70:	2300      	movs	r3, #0
 8006b72:	60fb      	str	r3, [r7, #12]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	60fb      	str	r3, [r7, #12]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	60fb      	str	r3, [r7, #12]
 8006b84:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f7ff fe67 	bl	8006860 <HAL_UARTEx_RxEventCallback>
 8006b92:	e002      	b.n	8006b9a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f7ff fe4f 	bl	8006838 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	e002      	b.n	8006ba4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	e000      	b.n	8006ba4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006ba2:	2302      	movs	r3, #2
  }
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3730      	adds	r7, #48	; 0x30
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bb0:	b0c0      	sub	sp, #256	; 0x100
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	691b      	ldr	r3, [r3, #16]
 8006bc0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bc8:	68d9      	ldr	r1, [r3, #12]
 8006bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	ea40 0301 	orr.w	r3, r0, r1
 8006bd4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bda:	689a      	ldr	r2, [r3, #8]
 8006bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	431a      	orrs	r2, r3
 8006be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006be8:	695b      	ldr	r3, [r3, #20]
 8006bea:	431a      	orrs	r2, r3
 8006bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bf0:	69db      	ldr	r3, [r3, #28]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006c04:	f021 010c 	bic.w	r1, r1, #12
 8006c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c12:	430b      	orrs	r3, r1
 8006c14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	695b      	ldr	r3, [r3, #20]
 8006c1e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c26:	6999      	ldr	r1, [r3, #24]
 8006c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	ea40 0301 	orr.w	r3, r0, r1
 8006c32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	4b8f      	ldr	r3, [pc, #572]	; (8006e78 <UART_SetConfig+0x2cc>)
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d005      	beq.n	8006c4c <UART_SetConfig+0xa0>
 8006c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	4b8d      	ldr	r3, [pc, #564]	; (8006e7c <UART_SetConfig+0x2d0>)
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d104      	bne.n	8006c56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c4c:	f7fe fba0 	bl	8005390 <HAL_RCC_GetPCLK2Freq>
 8006c50:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006c54:	e003      	b.n	8006c5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c56:	f7fe fb87 	bl	8005368 <HAL_RCC_GetPCLK1Freq>
 8006c5a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c62:	69db      	ldr	r3, [r3, #28]
 8006c64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c68:	f040 810c 	bne.w	8006e84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c70:	2200      	movs	r2, #0
 8006c72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c76:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006c7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006c7e:	4622      	mov	r2, r4
 8006c80:	462b      	mov	r3, r5
 8006c82:	1891      	adds	r1, r2, r2
 8006c84:	65b9      	str	r1, [r7, #88]	; 0x58
 8006c86:	415b      	adcs	r3, r3
 8006c88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006c8e:	4621      	mov	r1, r4
 8006c90:	eb12 0801 	adds.w	r8, r2, r1
 8006c94:	4629      	mov	r1, r5
 8006c96:	eb43 0901 	adc.w	r9, r3, r1
 8006c9a:	f04f 0200 	mov.w	r2, #0
 8006c9e:	f04f 0300 	mov.w	r3, #0
 8006ca2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ca6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006caa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006cae:	4690      	mov	r8, r2
 8006cb0:	4699      	mov	r9, r3
 8006cb2:	4623      	mov	r3, r4
 8006cb4:	eb18 0303 	adds.w	r3, r8, r3
 8006cb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006cbc:	462b      	mov	r3, r5
 8006cbe:	eb49 0303 	adc.w	r3, r9, r3
 8006cc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006cd2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006cd6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006cda:	460b      	mov	r3, r1
 8006cdc:	18db      	adds	r3, r3, r3
 8006cde:	653b      	str	r3, [r7, #80]	; 0x50
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	eb42 0303 	adc.w	r3, r2, r3
 8006ce6:	657b      	str	r3, [r7, #84]	; 0x54
 8006ce8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006cec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006cf0:	f7f9 fd90 	bl	8000814 <__aeabi_uldivmod>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	460b      	mov	r3, r1
 8006cf8:	4b61      	ldr	r3, [pc, #388]	; (8006e80 <UART_SetConfig+0x2d4>)
 8006cfa:	fba3 2302 	umull	r2, r3, r3, r2
 8006cfe:	095b      	lsrs	r3, r3, #5
 8006d00:	011c      	lsls	r4, r3, #4
 8006d02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d06:	2200      	movs	r2, #0
 8006d08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d0c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006d10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006d14:	4642      	mov	r2, r8
 8006d16:	464b      	mov	r3, r9
 8006d18:	1891      	adds	r1, r2, r2
 8006d1a:	64b9      	str	r1, [r7, #72]	; 0x48
 8006d1c:	415b      	adcs	r3, r3
 8006d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006d24:	4641      	mov	r1, r8
 8006d26:	eb12 0a01 	adds.w	sl, r2, r1
 8006d2a:	4649      	mov	r1, r9
 8006d2c:	eb43 0b01 	adc.w	fp, r3, r1
 8006d30:	f04f 0200 	mov.w	r2, #0
 8006d34:	f04f 0300 	mov.w	r3, #0
 8006d38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d44:	4692      	mov	sl, r2
 8006d46:	469b      	mov	fp, r3
 8006d48:	4643      	mov	r3, r8
 8006d4a:	eb1a 0303 	adds.w	r3, sl, r3
 8006d4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d52:	464b      	mov	r3, r9
 8006d54:	eb4b 0303 	adc.w	r3, fp, r3
 8006d58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d68:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006d6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006d70:	460b      	mov	r3, r1
 8006d72:	18db      	adds	r3, r3, r3
 8006d74:	643b      	str	r3, [r7, #64]	; 0x40
 8006d76:	4613      	mov	r3, r2
 8006d78:	eb42 0303 	adc.w	r3, r2, r3
 8006d7c:	647b      	str	r3, [r7, #68]	; 0x44
 8006d7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006d82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006d86:	f7f9 fd45 	bl	8000814 <__aeabi_uldivmod>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	4611      	mov	r1, r2
 8006d90:	4b3b      	ldr	r3, [pc, #236]	; (8006e80 <UART_SetConfig+0x2d4>)
 8006d92:	fba3 2301 	umull	r2, r3, r3, r1
 8006d96:	095b      	lsrs	r3, r3, #5
 8006d98:	2264      	movs	r2, #100	; 0x64
 8006d9a:	fb02 f303 	mul.w	r3, r2, r3
 8006d9e:	1acb      	subs	r3, r1, r3
 8006da0:	00db      	lsls	r3, r3, #3
 8006da2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006da6:	4b36      	ldr	r3, [pc, #216]	; (8006e80 <UART_SetConfig+0x2d4>)
 8006da8:	fba3 2302 	umull	r2, r3, r3, r2
 8006dac:	095b      	lsrs	r3, r3, #5
 8006dae:	005b      	lsls	r3, r3, #1
 8006db0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006db4:	441c      	add	r4, r3
 8006db6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006dc0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006dc4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006dc8:	4642      	mov	r2, r8
 8006dca:	464b      	mov	r3, r9
 8006dcc:	1891      	adds	r1, r2, r2
 8006dce:	63b9      	str	r1, [r7, #56]	; 0x38
 8006dd0:	415b      	adcs	r3, r3
 8006dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006dd8:	4641      	mov	r1, r8
 8006dda:	1851      	adds	r1, r2, r1
 8006ddc:	6339      	str	r1, [r7, #48]	; 0x30
 8006dde:	4649      	mov	r1, r9
 8006de0:	414b      	adcs	r3, r1
 8006de2:	637b      	str	r3, [r7, #52]	; 0x34
 8006de4:	f04f 0200 	mov.w	r2, #0
 8006de8:	f04f 0300 	mov.w	r3, #0
 8006dec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006df0:	4659      	mov	r1, fp
 8006df2:	00cb      	lsls	r3, r1, #3
 8006df4:	4651      	mov	r1, sl
 8006df6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006dfa:	4651      	mov	r1, sl
 8006dfc:	00ca      	lsls	r2, r1, #3
 8006dfe:	4610      	mov	r0, r2
 8006e00:	4619      	mov	r1, r3
 8006e02:	4603      	mov	r3, r0
 8006e04:	4642      	mov	r2, r8
 8006e06:	189b      	adds	r3, r3, r2
 8006e08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e0c:	464b      	mov	r3, r9
 8006e0e:	460a      	mov	r2, r1
 8006e10:	eb42 0303 	adc.w	r3, r2, r3
 8006e14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006e24:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006e28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006e2c:	460b      	mov	r3, r1
 8006e2e:	18db      	adds	r3, r3, r3
 8006e30:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e32:	4613      	mov	r3, r2
 8006e34:	eb42 0303 	adc.w	r3, r2, r3
 8006e38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006e42:	f7f9 fce7 	bl	8000814 <__aeabi_uldivmod>
 8006e46:	4602      	mov	r2, r0
 8006e48:	460b      	mov	r3, r1
 8006e4a:	4b0d      	ldr	r3, [pc, #52]	; (8006e80 <UART_SetConfig+0x2d4>)
 8006e4c:	fba3 1302 	umull	r1, r3, r3, r2
 8006e50:	095b      	lsrs	r3, r3, #5
 8006e52:	2164      	movs	r1, #100	; 0x64
 8006e54:	fb01 f303 	mul.w	r3, r1, r3
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	00db      	lsls	r3, r3, #3
 8006e5c:	3332      	adds	r3, #50	; 0x32
 8006e5e:	4a08      	ldr	r2, [pc, #32]	; (8006e80 <UART_SetConfig+0x2d4>)
 8006e60:	fba2 2303 	umull	r2, r3, r2, r3
 8006e64:	095b      	lsrs	r3, r3, #5
 8006e66:	f003 0207 	and.w	r2, r3, #7
 8006e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4422      	add	r2, r4
 8006e72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e74:	e106      	b.n	8007084 <UART_SetConfig+0x4d8>
 8006e76:	bf00      	nop
 8006e78:	40011000 	.word	0x40011000
 8006e7c:	40011400 	.word	0x40011400
 8006e80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006e8e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006e92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006e96:	4642      	mov	r2, r8
 8006e98:	464b      	mov	r3, r9
 8006e9a:	1891      	adds	r1, r2, r2
 8006e9c:	6239      	str	r1, [r7, #32]
 8006e9e:	415b      	adcs	r3, r3
 8006ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ea2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006ea6:	4641      	mov	r1, r8
 8006ea8:	1854      	adds	r4, r2, r1
 8006eaa:	4649      	mov	r1, r9
 8006eac:	eb43 0501 	adc.w	r5, r3, r1
 8006eb0:	f04f 0200 	mov.w	r2, #0
 8006eb4:	f04f 0300 	mov.w	r3, #0
 8006eb8:	00eb      	lsls	r3, r5, #3
 8006eba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ebe:	00e2      	lsls	r2, r4, #3
 8006ec0:	4614      	mov	r4, r2
 8006ec2:	461d      	mov	r5, r3
 8006ec4:	4643      	mov	r3, r8
 8006ec6:	18e3      	adds	r3, r4, r3
 8006ec8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006ecc:	464b      	mov	r3, r9
 8006ece:	eb45 0303 	adc.w	r3, r5, r3
 8006ed2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006ee2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006ee6:	f04f 0200 	mov.w	r2, #0
 8006eea:	f04f 0300 	mov.w	r3, #0
 8006eee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006ef2:	4629      	mov	r1, r5
 8006ef4:	008b      	lsls	r3, r1, #2
 8006ef6:	4621      	mov	r1, r4
 8006ef8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006efc:	4621      	mov	r1, r4
 8006efe:	008a      	lsls	r2, r1, #2
 8006f00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006f04:	f7f9 fc86 	bl	8000814 <__aeabi_uldivmod>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	4b60      	ldr	r3, [pc, #384]	; (8007090 <UART_SetConfig+0x4e4>)
 8006f0e:	fba3 2302 	umull	r2, r3, r3, r2
 8006f12:	095b      	lsrs	r3, r3, #5
 8006f14:	011c      	lsls	r4, r3, #4
 8006f16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006f20:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006f24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006f28:	4642      	mov	r2, r8
 8006f2a:	464b      	mov	r3, r9
 8006f2c:	1891      	adds	r1, r2, r2
 8006f2e:	61b9      	str	r1, [r7, #24]
 8006f30:	415b      	adcs	r3, r3
 8006f32:	61fb      	str	r3, [r7, #28]
 8006f34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f38:	4641      	mov	r1, r8
 8006f3a:	1851      	adds	r1, r2, r1
 8006f3c:	6139      	str	r1, [r7, #16]
 8006f3e:	4649      	mov	r1, r9
 8006f40:	414b      	adcs	r3, r1
 8006f42:	617b      	str	r3, [r7, #20]
 8006f44:	f04f 0200 	mov.w	r2, #0
 8006f48:	f04f 0300 	mov.w	r3, #0
 8006f4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f50:	4659      	mov	r1, fp
 8006f52:	00cb      	lsls	r3, r1, #3
 8006f54:	4651      	mov	r1, sl
 8006f56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f5a:	4651      	mov	r1, sl
 8006f5c:	00ca      	lsls	r2, r1, #3
 8006f5e:	4610      	mov	r0, r2
 8006f60:	4619      	mov	r1, r3
 8006f62:	4603      	mov	r3, r0
 8006f64:	4642      	mov	r2, r8
 8006f66:	189b      	adds	r3, r3, r2
 8006f68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f6c:	464b      	mov	r3, r9
 8006f6e:	460a      	mov	r2, r1
 8006f70:	eb42 0303 	adc.w	r3, r2, r3
 8006f74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	67bb      	str	r3, [r7, #120]	; 0x78
 8006f82:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006f84:	f04f 0200 	mov.w	r2, #0
 8006f88:	f04f 0300 	mov.w	r3, #0
 8006f8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006f90:	4649      	mov	r1, r9
 8006f92:	008b      	lsls	r3, r1, #2
 8006f94:	4641      	mov	r1, r8
 8006f96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f9a:	4641      	mov	r1, r8
 8006f9c:	008a      	lsls	r2, r1, #2
 8006f9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006fa2:	f7f9 fc37 	bl	8000814 <__aeabi_uldivmod>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	460b      	mov	r3, r1
 8006faa:	4611      	mov	r1, r2
 8006fac:	4b38      	ldr	r3, [pc, #224]	; (8007090 <UART_SetConfig+0x4e4>)
 8006fae:	fba3 2301 	umull	r2, r3, r3, r1
 8006fb2:	095b      	lsrs	r3, r3, #5
 8006fb4:	2264      	movs	r2, #100	; 0x64
 8006fb6:	fb02 f303 	mul.w	r3, r2, r3
 8006fba:	1acb      	subs	r3, r1, r3
 8006fbc:	011b      	lsls	r3, r3, #4
 8006fbe:	3332      	adds	r3, #50	; 0x32
 8006fc0:	4a33      	ldr	r2, [pc, #204]	; (8007090 <UART_SetConfig+0x4e4>)
 8006fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fc6:	095b      	lsrs	r3, r3, #5
 8006fc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fcc:	441c      	add	r4, r3
 8006fce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	673b      	str	r3, [r7, #112]	; 0x70
 8006fd6:	677a      	str	r2, [r7, #116]	; 0x74
 8006fd8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006fdc:	4642      	mov	r2, r8
 8006fde:	464b      	mov	r3, r9
 8006fe0:	1891      	adds	r1, r2, r2
 8006fe2:	60b9      	str	r1, [r7, #8]
 8006fe4:	415b      	adcs	r3, r3
 8006fe6:	60fb      	str	r3, [r7, #12]
 8006fe8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006fec:	4641      	mov	r1, r8
 8006fee:	1851      	adds	r1, r2, r1
 8006ff0:	6039      	str	r1, [r7, #0]
 8006ff2:	4649      	mov	r1, r9
 8006ff4:	414b      	adcs	r3, r1
 8006ff6:	607b      	str	r3, [r7, #4]
 8006ff8:	f04f 0200 	mov.w	r2, #0
 8006ffc:	f04f 0300 	mov.w	r3, #0
 8007000:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007004:	4659      	mov	r1, fp
 8007006:	00cb      	lsls	r3, r1, #3
 8007008:	4651      	mov	r1, sl
 800700a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800700e:	4651      	mov	r1, sl
 8007010:	00ca      	lsls	r2, r1, #3
 8007012:	4610      	mov	r0, r2
 8007014:	4619      	mov	r1, r3
 8007016:	4603      	mov	r3, r0
 8007018:	4642      	mov	r2, r8
 800701a:	189b      	adds	r3, r3, r2
 800701c:	66bb      	str	r3, [r7, #104]	; 0x68
 800701e:	464b      	mov	r3, r9
 8007020:	460a      	mov	r2, r1
 8007022:	eb42 0303 	adc.w	r3, r2, r3
 8007026:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	663b      	str	r3, [r7, #96]	; 0x60
 8007032:	667a      	str	r2, [r7, #100]	; 0x64
 8007034:	f04f 0200 	mov.w	r2, #0
 8007038:	f04f 0300 	mov.w	r3, #0
 800703c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007040:	4649      	mov	r1, r9
 8007042:	008b      	lsls	r3, r1, #2
 8007044:	4641      	mov	r1, r8
 8007046:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800704a:	4641      	mov	r1, r8
 800704c:	008a      	lsls	r2, r1, #2
 800704e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007052:	f7f9 fbdf 	bl	8000814 <__aeabi_uldivmod>
 8007056:	4602      	mov	r2, r0
 8007058:	460b      	mov	r3, r1
 800705a:	4b0d      	ldr	r3, [pc, #52]	; (8007090 <UART_SetConfig+0x4e4>)
 800705c:	fba3 1302 	umull	r1, r3, r3, r2
 8007060:	095b      	lsrs	r3, r3, #5
 8007062:	2164      	movs	r1, #100	; 0x64
 8007064:	fb01 f303 	mul.w	r3, r1, r3
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	011b      	lsls	r3, r3, #4
 800706c:	3332      	adds	r3, #50	; 0x32
 800706e:	4a08      	ldr	r2, [pc, #32]	; (8007090 <UART_SetConfig+0x4e4>)
 8007070:	fba2 2303 	umull	r2, r3, r2, r3
 8007074:	095b      	lsrs	r3, r3, #5
 8007076:	f003 020f 	and.w	r2, r3, #15
 800707a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4422      	add	r2, r4
 8007082:	609a      	str	r2, [r3, #8]
}
 8007084:	bf00      	nop
 8007086:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800708a:	46bd      	mov	sp, r7
 800708c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007090:	51eb851f 	.word	0x51eb851f

08007094 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 800709c:	4b05      	ldr	r3, [pc, #20]	; (80070b4 <LL_EXTI_EnableIT_0_31+0x20>)
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	4904      	ldr	r1, [pc, #16]	; (80070b4 <LL_EXTI_EnableIT_0_31+0x20>)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	600b      	str	r3, [r1, #0]
}
 80070a8:	bf00      	nop
 80070aa:	370c      	adds	r7, #12
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr
 80070b4:	40013c00 	.word	0x40013c00

080070b8 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80070c0:	4b06      	ldr	r3, [pc, #24]	; (80070dc <LL_EXTI_DisableIT_0_31+0x24>)
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	43db      	mvns	r3, r3
 80070c8:	4904      	ldr	r1, [pc, #16]	; (80070dc <LL_EXTI_DisableIT_0_31+0x24>)
 80070ca:	4013      	ands	r3, r2
 80070cc:	600b      	str	r3, [r1, #0]
}
 80070ce:	bf00      	nop
 80070d0:	370c      	adds	r7, #12
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr
 80070da:	bf00      	nop
 80070dc:	40013c00 	.word	0x40013c00

080070e0 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80070e8:	4b05      	ldr	r3, [pc, #20]	; (8007100 <LL_EXTI_EnableEvent_0_31+0x20>)
 80070ea:	685a      	ldr	r2, [r3, #4]
 80070ec:	4904      	ldr	r1, [pc, #16]	; (8007100 <LL_EXTI_EnableEvent_0_31+0x20>)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4313      	orrs	r3, r2
 80070f2:	604b      	str	r3, [r1, #4]

}
 80070f4:	bf00      	nop
 80070f6:	370c      	adds	r7, #12
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr
 8007100:	40013c00 	.word	0x40013c00

08007104 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 800710c:	4b06      	ldr	r3, [pc, #24]	; (8007128 <LL_EXTI_DisableEvent_0_31+0x24>)
 800710e:	685a      	ldr	r2, [r3, #4]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	43db      	mvns	r3, r3
 8007114:	4904      	ldr	r1, [pc, #16]	; (8007128 <LL_EXTI_DisableEvent_0_31+0x24>)
 8007116:	4013      	ands	r3, r2
 8007118:	604b      	str	r3, [r1, #4]
}
 800711a:	bf00      	nop
 800711c:	370c      	adds	r7, #12
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr
 8007126:	bf00      	nop
 8007128:	40013c00 	.word	0x40013c00

0800712c <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800712c:	b480      	push	{r7}
 800712e:	b083      	sub	sp, #12
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8007134:	4b05      	ldr	r3, [pc, #20]	; (800714c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007136:	689a      	ldr	r2, [r3, #8]
 8007138:	4904      	ldr	r1, [pc, #16]	; (800714c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4313      	orrs	r3, r2
 800713e:	608b      	str	r3, [r1, #8]

}
 8007140:	bf00      	nop
 8007142:	370c      	adds	r7, #12
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr
 800714c:	40013c00 	.word	0x40013c00

08007150 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8007158:	4b06      	ldr	r3, [pc, #24]	; (8007174 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800715a:	689a      	ldr	r2, [r3, #8]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	43db      	mvns	r3, r3
 8007160:	4904      	ldr	r1, [pc, #16]	; (8007174 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007162:	4013      	ands	r3, r2
 8007164:	608b      	str	r3, [r1, #8]

}
 8007166:	bf00      	nop
 8007168:	370c      	adds	r7, #12
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop
 8007174:	40013c00 	.word	0x40013c00

08007178 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8007180:	4b05      	ldr	r3, [pc, #20]	; (8007198 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007182:	68da      	ldr	r2, [r3, #12]
 8007184:	4904      	ldr	r1, [pc, #16]	; (8007198 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4313      	orrs	r3, r2
 800718a:	60cb      	str	r3, [r1, #12]
}
 800718c:	bf00      	nop
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr
 8007198:	40013c00 	.word	0x40013c00

0800719c <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80071a4:	4b06      	ldr	r3, [pc, #24]	; (80071c0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80071a6:	68da      	ldr	r2, [r3, #12]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	43db      	mvns	r3, r3
 80071ac:	4904      	ldr	r1, [pc, #16]	; (80071c0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80071ae:	4013      	ands	r3, r2
 80071b0:	60cb      	str	r3, [r1, #12]
}
 80071b2:	bf00      	nop
 80071b4:	370c      	adds	r7, #12
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop
 80071c0:	40013c00 	.word	0x40013c00

080071c4 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80071cc:	2300      	movs	r3, #0
 80071ce:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	791b      	ldrb	r3, [r3, #4]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d065      	beq.n	80072a4 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d06b      	beq.n	80072b8 <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	795b      	ldrb	r3, [r3, #5]
 80071e4:	2b02      	cmp	r3, #2
 80071e6:	d01c      	beq.n	8007222 <LL_EXTI_Init+0x5e>
 80071e8:	2b02      	cmp	r3, #2
 80071ea:	dc25      	bgt.n	8007238 <LL_EXTI_Init+0x74>
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d002      	beq.n	80071f6 <LL_EXTI_Init+0x32>
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d00b      	beq.n	800720c <LL_EXTI_Init+0x48>
 80071f4:	e020      	b.n	8007238 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4618      	mov	r0, r3
 80071fc:	f7ff ff82 	bl	8007104 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4618      	mov	r0, r3
 8007206:	f7ff ff45 	bl	8007094 <LL_EXTI_EnableIT_0_31>
          break;
 800720a:	e018      	b.n	800723e <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4618      	mov	r0, r3
 8007212:	f7ff ff51 	bl	80070b8 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4618      	mov	r0, r3
 800721c:	f7ff ff60 	bl	80070e0 <LL_EXTI_EnableEvent_0_31>
          break;
 8007220:	e00d      	b.n	800723e <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4618      	mov	r0, r3
 8007228:	f7ff ff34 	bl	8007094 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4618      	mov	r0, r3
 8007232:	f7ff ff55 	bl	80070e0 <LL_EXTI_EnableEvent_0_31>
          break;
 8007236:	e002      	b.n	800723e <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	73fb      	strb	r3, [r7, #15]
          break;
 800723c:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	799b      	ldrb	r3, [r3, #6]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d038      	beq.n	80072b8 <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	799b      	ldrb	r3, [r3, #6]
 800724a:	2b03      	cmp	r3, #3
 800724c:	d01c      	beq.n	8007288 <LL_EXTI_Init+0xc4>
 800724e:	2b03      	cmp	r3, #3
 8007250:	dc25      	bgt.n	800729e <LL_EXTI_Init+0xda>
 8007252:	2b01      	cmp	r3, #1
 8007254:	d002      	beq.n	800725c <LL_EXTI_Init+0x98>
 8007256:	2b02      	cmp	r3, #2
 8007258:	d00b      	beq.n	8007272 <LL_EXTI_Init+0xae>
 800725a:	e020      	b.n	800729e <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4618      	mov	r0, r3
 8007262:	f7ff ff9b 	bl	800719c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4618      	mov	r0, r3
 800726c:	f7ff ff5e 	bl	800712c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8007270:	e022      	b.n	80072b8 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4618      	mov	r0, r3
 8007278:	f7ff ff6a 	bl	8007150 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4618      	mov	r0, r3
 8007282:	f7ff ff79 	bl	8007178 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8007286:	e017      	b.n	80072b8 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4618      	mov	r0, r3
 800728e:	f7ff ff4d 	bl	800712c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4618      	mov	r0, r3
 8007298:	f7ff ff6e 	bl	8007178 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800729c:	e00c      	b.n	80072b8 <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	73fb      	strb	r3, [r7, #15]
            break;
 80072a2:	e009      	b.n	80072b8 <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4618      	mov	r0, r3
 80072aa:	f7ff ff05 	bl	80070b8 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7ff ff26 	bl	8007104 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 80072b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3710      	adds	r7, #16
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}

080072c2 <LL_GPIO_SetPinMode>:
{
 80072c2:	b480      	push	{r7}
 80072c4:	b089      	sub	sp, #36	; 0x24
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	60f8      	str	r0, [r7, #12]
 80072ca:	60b9      	str	r1, [r7, #8]
 80072cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	fa93 f3a3 	rbit	r3, r3
 80072dc:	613b      	str	r3, [r7, #16]
  return result;
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	fab3 f383 	clz	r3, r3
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	005b      	lsls	r3, r3, #1
 80072e8:	2103      	movs	r1, #3
 80072ea:	fa01 f303 	lsl.w	r3, r1, r3
 80072ee:	43db      	mvns	r3, r3
 80072f0:	401a      	ands	r2, r3
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072f6:	69fb      	ldr	r3, [r7, #28]
 80072f8:	fa93 f3a3 	rbit	r3, r3
 80072fc:	61bb      	str	r3, [r7, #24]
  return result;
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	fab3 f383 	clz	r3, r3
 8007304:	b2db      	uxtb	r3, r3
 8007306:	005b      	lsls	r3, r3, #1
 8007308:	6879      	ldr	r1, [r7, #4]
 800730a:	fa01 f303 	lsl.w	r3, r1, r3
 800730e:	431a      	orrs	r2, r3
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	601a      	str	r2, [r3, #0]
}
 8007314:	bf00      	nop
 8007316:	3724      	adds	r7, #36	; 0x24
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <LL_GPIO_SetPinOutputType>:
{
 8007320:	b480      	push	{r7}
 8007322:	b085      	sub	sp, #20
 8007324:	af00      	add	r7, sp, #0
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	685a      	ldr	r2, [r3, #4]
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	43db      	mvns	r3, r3
 8007334:	401a      	ands	r2, r3
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	6879      	ldr	r1, [r7, #4]
 800733a:	fb01 f303 	mul.w	r3, r1, r3
 800733e:	431a      	orrs	r2, r3
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	605a      	str	r2, [r3, #4]
}
 8007344:	bf00      	nop
 8007346:	3714      	adds	r7, #20
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <LL_GPIO_SetPinSpeed>:
{
 8007350:	b480      	push	{r7}
 8007352:	b089      	sub	sp, #36	; 0x24
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	689a      	ldr	r2, [r3, #8]
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	fa93 f3a3 	rbit	r3, r3
 800736a:	613b      	str	r3, [r7, #16]
  return result;
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	fab3 f383 	clz	r3, r3
 8007372:	b2db      	uxtb	r3, r3
 8007374:	005b      	lsls	r3, r3, #1
 8007376:	2103      	movs	r1, #3
 8007378:	fa01 f303 	lsl.w	r3, r1, r3
 800737c:	43db      	mvns	r3, r3
 800737e:	401a      	ands	r2, r3
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	fa93 f3a3 	rbit	r3, r3
 800738a:	61bb      	str	r3, [r7, #24]
  return result;
 800738c:	69bb      	ldr	r3, [r7, #24]
 800738e:	fab3 f383 	clz	r3, r3
 8007392:	b2db      	uxtb	r3, r3
 8007394:	005b      	lsls	r3, r3, #1
 8007396:	6879      	ldr	r1, [r7, #4]
 8007398:	fa01 f303 	lsl.w	r3, r1, r3
 800739c:	431a      	orrs	r2, r3
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	609a      	str	r2, [r3, #8]
}
 80073a2:	bf00      	nop
 80073a4:	3724      	adds	r7, #36	; 0x24
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr

080073ae <LL_GPIO_SetPinPull>:
{
 80073ae:	b480      	push	{r7}
 80073b0:	b089      	sub	sp, #36	; 0x24
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	60f8      	str	r0, [r7, #12]
 80073b6:	60b9      	str	r1, [r7, #8]
 80073b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	68da      	ldr	r2, [r3, #12]
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	fa93 f3a3 	rbit	r3, r3
 80073c8:	613b      	str	r3, [r7, #16]
  return result;
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	fab3 f383 	clz	r3, r3
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	005b      	lsls	r3, r3, #1
 80073d4:	2103      	movs	r1, #3
 80073d6:	fa01 f303 	lsl.w	r3, r1, r3
 80073da:	43db      	mvns	r3, r3
 80073dc:	401a      	ands	r2, r3
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	fa93 f3a3 	rbit	r3, r3
 80073e8:	61bb      	str	r3, [r7, #24]
  return result;
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	fab3 f383 	clz	r3, r3
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	005b      	lsls	r3, r3, #1
 80073f4:	6879      	ldr	r1, [r7, #4]
 80073f6:	fa01 f303 	lsl.w	r3, r1, r3
 80073fa:	431a      	orrs	r2, r3
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	60da      	str	r2, [r3, #12]
}
 8007400:	bf00      	nop
 8007402:	3724      	adds	r7, #36	; 0x24
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <LL_GPIO_SetAFPin_0_7>:
{
 800740c:	b480      	push	{r7}
 800740e:	b089      	sub	sp, #36	; 0x24
 8007410:	af00      	add	r7, sp, #0
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6a1a      	ldr	r2, [r3, #32]
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	fa93 f3a3 	rbit	r3, r3
 8007426:	613b      	str	r3, [r7, #16]
  return result;
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	fab3 f383 	clz	r3, r3
 800742e:	b2db      	uxtb	r3, r3
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	210f      	movs	r1, #15
 8007434:	fa01 f303 	lsl.w	r3, r1, r3
 8007438:	43db      	mvns	r3, r3
 800743a:	401a      	ands	r2, r3
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	fa93 f3a3 	rbit	r3, r3
 8007446:	61bb      	str	r3, [r7, #24]
  return result;
 8007448:	69bb      	ldr	r3, [r7, #24]
 800744a:	fab3 f383 	clz	r3, r3
 800744e:	b2db      	uxtb	r3, r3
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	6879      	ldr	r1, [r7, #4]
 8007454:	fa01 f303 	lsl.w	r3, r1, r3
 8007458:	431a      	orrs	r2, r3
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	621a      	str	r2, [r3, #32]
}
 800745e:	bf00      	nop
 8007460:	3724      	adds	r7, #36	; 0x24
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr

0800746a <LL_GPIO_SetAFPin_8_15>:
{
 800746a:	b480      	push	{r7}
 800746c:	b089      	sub	sp, #36	; 0x24
 800746e:	af00      	add	r7, sp, #0
 8007470:	60f8      	str	r0, [r7, #12]
 8007472:	60b9      	str	r1, [r7, #8]
 8007474:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	0a1b      	lsrs	r3, r3, #8
 800747e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	fa93 f3a3 	rbit	r3, r3
 8007486:	613b      	str	r3, [r7, #16]
  return result;
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	fab3 f383 	clz	r3, r3
 800748e:	b2db      	uxtb	r3, r3
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	210f      	movs	r1, #15
 8007494:	fa01 f303 	lsl.w	r3, r1, r3
 8007498:	43db      	mvns	r3, r3
 800749a:	401a      	ands	r2, r3
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	0a1b      	lsrs	r3, r3, #8
 80074a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	fa93 f3a3 	rbit	r3, r3
 80074a8:	61bb      	str	r3, [r7, #24]
  return result;
 80074aa:	69bb      	ldr	r3, [r7, #24]
 80074ac:	fab3 f383 	clz	r3, r3
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	6879      	ldr	r1, [r7, #4]
 80074b6:	fa01 f303 	lsl.w	r3, r1, r3
 80074ba:	431a      	orrs	r2, r3
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	625a      	str	r2, [r3, #36]	; 0x24
}
 80074c0:	bf00      	nop
 80074c2:	3724      	adds	r7, #36	; 0x24
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b088      	sub	sp, #32
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80074d6:	2300      	movs	r3, #0
 80074d8:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80074da:	2300      	movs	r3, #0
 80074dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	fa93 f3a3 	rbit	r3, r3
 80074ea:	613b      	str	r3, [r7, #16]
  return result;
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	fab3 f383 	clz	r3, r3
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80074f6:	e050      	b.n	800759a <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	2101      	movs	r1, #1
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	fa01 f303 	lsl.w	r3, r1, r3
 8007504:	4013      	ands	r3, r2
 8007506:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d042      	beq.n	8007594 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	2b01      	cmp	r3, #1
 8007514:	d003      	beq.n	800751e <LL_GPIO_Init+0x52>
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	2b02      	cmp	r3, #2
 800751c:	d10d      	bne.n	800753a <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	461a      	mov	r2, r3
 8007524:	69b9      	ldr	r1, [r7, #24]
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f7ff ff12 	bl	8007350 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	461a      	mov	r2, r3
 8007532:	69b9      	ldr	r1, [r7, #24]
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f7ff fef3 	bl	8007320 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	691b      	ldr	r3, [r3, #16]
 800753e:	461a      	mov	r2, r3
 8007540:	69b9      	ldr	r1, [r7, #24]
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f7ff ff33 	bl	80073ae <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	2b02      	cmp	r3, #2
 800754e:	d11a      	bne.n	8007586 <LL_GPIO_Init+0xba>
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	fa93 f3a3 	rbit	r3, r3
 800755a:	60bb      	str	r3, [r7, #8]
  return result;
 800755c:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800755e:	fab3 f383 	clz	r3, r3
 8007562:	b2db      	uxtb	r3, r3
 8007564:	2b07      	cmp	r3, #7
 8007566:	d807      	bhi.n	8007578 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	695b      	ldr	r3, [r3, #20]
 800756c:	461a      	mov	r2, r3
 800756e:	69b9      	ldr	r1, [r7, #24]
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f7ff ff4b 	bl	800740c <LL_GPIO_SetAFPin_0_7>
 8007576:	e006      	b.n	8007586 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	695b      	ldr	r3, [r3, #20]
 800757c:	461a      	mov	r2, r3
 800757e:	69b9      	ldr	r1, [r7, #24]
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f7ff ff72 	bl	800746a <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	461a      	mov	r2, r3
 800758c:	69b9      	ldr	r1, [r7, #24]
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f7ff fe97 	bl	80072c2 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8007594:	69fb      	ldr	r3, [r7, #28]
 8007596:	3301      	adds	r3, #1
 8007598:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	fa22 f303 	lsr.w	r3, r2, r3
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d1a7      	bne.n	80074f8 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3720      	adds	r7, #32
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
	...

080075b4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80075b4:	b480      	push	{r7}
 80075b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80075b8:	4b04      	ldr	r3, [pc, #16]	; (80075cc <LL_RCC_GetSysClkSource+0x18>)
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	f003 030c 	and.w	r3, r3, #12
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr
 80075ca:	bf00      	nop
 80075cc:	40023800 	.word	0x40023800

080075d0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80075d0:	b480      	push	{r7}
 80075d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80075d4:	4b04      	ldr	r3, [pc, #16]	; (80075e8 <LL_RCC_GetAHBPrescaler+0x18>)
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80075dc:	4618      	mov	r0, r3
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr
 80075e6:	bf00      	nop
 80075e8:	40023800 	.word	0x40023800

080075ec <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80075ec:	b480      	push	{r7}
 80075ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80075f0:	4b04      	ldr	r3, [pc, #16]	; (8007604 <LL_RCC_GetAPB1Prescaler+0x18>)
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr
 8007602:	bf00      	nop
 8007604:	40023800 	.word	0x40023800

08007608 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8007608:	b480      	push	{r7}
 800760a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800760c:	4b04      	ldr	r3, [pc, #16]	; (8007620 <LL_RCC_GetAPB2Prescaler+0x18>)
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8007614:	4618      	mov	r0, r3
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr
 800761e:	bf00      	nop
 8007620:	40023800 	.word	0x40023800

08007624 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8007624:	b480      	push	{r7}
 8007626:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8007628:	4b04      	ldr	r3, [pc, #16]	; (800763c <LL_RCC_PLL_GetMainSource+0x18>)
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8007630:	4618      	mov	r0, r3
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr
 800763a:	bf00      	nop
 800763c:	40023800 	.word	0x40023800

08007640 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8007640:	b480      	push	{r7}
 8007642:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8007644:	4b04      	ldr	r3, [pc, #16]	; (8007658 <LL_RCC_PLL_GetN+0x18>)
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	099b      	lsrs	r3, r3, #6
 800764a:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800764e:	4618      	mov	r0, r3
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr
 8007658:	40023800 	.word	0x40023800

0800765c <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 800765c:	b480      	push	{r7}
 800765e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8007660:	4b04      	ldr	r3, [pc, #16]	; (8007674 <LL_RCC_PLL_GetP+0x18>)
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8007668:	4618      	mov	r0, r3
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr
 8007672:	bf00      	nop
 8007674:	40023800 	.word	0x40023800

08007678 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8007678:	b480      	push	{r7}
 800767a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800767c:	4b04      	ldr	r3, [pc, #16]	; (8007690 <LL_RCC_PLL_GetDivider+0x18>)
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8007684:	4618      	mov	r0, r3
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr
 800768e:	bf00      	nop
 8007690:	40023800 	.word	0x40023800

08007694 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800769c:	f000 f820 	bl	80076e0 <RCC_GetSystemClockFreq>
 80076a0:	4602      	mov	r2, r0
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4618      	mov	r0, r3
 80076ac:	f000 f840 	bl	8007730 <RCC_GetHCLKClockFreq>
 80076b0:	4602      	mov	r2, r0
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	4618      	mov	r0, r3
 80076bc:	f000 f84e 	bl	800775c <RCC_GetPCLK1ClockFreq>
 80076c0:	4602      	mov	r2, r0
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	4618      	mov	r0, r3
 80076cc:	f000 f85a 	bl	8007784 <RCC_GetPCLK2ClockFreq>
 80076d0:	4602      	mov	r2, r0
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	60da      	str	r2, [r3, #12]
}
 80076d6:	bf00      	nop
 80076d8:	3708      	adds	r7, #8
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
	...

080076e0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80076e6:	2300      	movs	r3, #0
 80076e8:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80076ea:	f7ff ff63 	bl	80075b4 <LL_RCC_GetSysClkSource>
 80076ee:	4603      	mov	r3, r0
 80076f0:	2b08      	cmp	r3, #8
 80076f2:	d00c      	beq.n	800770e <RCC_GetSystemClockFreq+0x2e>
 80076f4:	2b08      	cmp	r3, #8
 80076f6:	d80f      	bhi.n	8007718 <RCC_GetSystemClockFreq+0x38>
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d002      	beq.n	8007702 <RCC_GetSystemClockFreq+0x22>
 80076fc:	2b04      	cmp	r3, #4
 80076fe:	d003      	beq.n	8007708 <RCC_GetSystemClockFreq+0x28>
 8007700:	e00a      	b.n	8007718 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8007702:	4b09      	ldr	r3, [pc, #36]	; (8007728 <RCC_GetSystemClockFreq+0x48>)
 8007704:	607b      	str	r3, [r7, #4]
      break;
 8007706:	e00a      	b.n	800771e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8007708:	4b08      	ldr	r3, [pc, #32]	; (800772c <RCC_GetSystemClockFreq+0x4c>)
 800770a:	607b      	str	r3, [r7, #4]
      break;
 800770c:	e007      	b.n	800771e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800770e:	2008      	movs	r0, #8
 8007710:	f000 f84c 	bl	80077ac <RCC_PLL_GetFreqDomain_SYS>
 8007714:	6078      	str	r0, [r7, #4]
      break;
 8007716:	e002      	b.n	800771e <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8007718:	4b03      	ldr	r3, [pc, #12]	; (8007728 <RCC_GetSystemClockFreq+0x48>)
 800771a:	607b      	str	r3, [r7, #4]
      break;
 800771c:	bf00      	nop
  }

  return frequency;
 800771e:	687b      	ldr	r3, [r7, #4]
}
 8007720:	4618      	mov	r0, r3
 8007722:	3708      	adds	r7, #8
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}
 8007728:	00f42400 	.word	0x00f42400
 800772c:	00b71b00 	.word	0x00b71b00

08007730 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8007738:	f7ff ff4a 	bl	80075d0 <LL_RCC_GetAHBPrescaler>
 800773c:	4603      	mov	r3, r0
 800773e:	091b      	lsrs	r3, r3, #4
 8007740:	f003 030f 	and.w	r3, r3, #15
 8007744:	4a04      	ldr	r2, [pc, #16]	; (8007758 <RCC_GetHCLKClockFreq+0x28>)
 8007746:	5cd3      	ldrb	r3, [r2, r3]
 8007748:	461a      	mov	r2, r3
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	40d3      	lsrs	r3, r2
}
 800774e:	4618      	mov	r0, r3
 8007750:	3708      	adds	r7, #8
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	08007e64 	.word	0x08007e64

0800775c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b082      	sub	sp, #8
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8007764:	f7ff ff42 	bl	80075ec <LL_RCC_GetAPB1Prescaler>
 8007768:	4603      	mov	r3, r0
 800776a:	0a9b      	lsrs	r3, r3, #10
 800776c:	4a04      	ldr	r2, [pc, #16]	; (8007780 <RCC_GetPCLK1ClockFreq+0x24>)
 800776e:	5cd3      	ldrb	r3, [r2, r3]
 8007770:	461a      	mov	r2, r3
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	40d3      	lsrs	r3, r2
}
 8007776:	4618      	mov	r0, r3
 8007778:	3708      	adds	r7, #8
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
 800777e:	bf00      	nop
 8007780:	08007e74 	.word	0x08007e74

08007784 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800778c:	f7ff ff3c 	bl	8007608 <LL_RCC_GetAPB2Prescaler>
 8007790:	4603      	mov	r3, r0
 8007792:	0b5b      	lsrs	r3, r3, #13
 8007794:	4a04      	ldr	r2, [pc, #16]	; (80077a8 <RCC_GetPCLK2ClockFreq+0x24>)
 8007796:	5cd3      	ldrb	r3, [r2, r3]
 8007798:	461a      	mov	r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	40d3      	lsrs	r3, r2
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3708      	adds	r7, #8
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	08007e74 	.word	0x08007e74

080077ac <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80077ac:	b590      	push	{r4, r7, lr}
 80077ae:	b087      	sub	sp, #28
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 80077b4:	2300      	movs	r3, #0
 80077b6:	617b      	str	r3, [r7, #20]
 80077b8:	2300      	movs	r3, #0
 80077ba:	60fb      	str	r3, [r7, #12]
 80077bc:	2300      	movs	r3, #0
 80077be:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80077c0:	f7ff ff30 	bl	8007624 <LL_RCC_PLL_GetMainSource>
 80077c4:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d004      	beq.n	80077d6 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077d2:	d003      	beq.n	80077dc <RCC_PLL_GetFreqDomain_SYS+0x30>
 80077d4:	e005      	b.n	80077e2 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80077d6:	4b12      	ldr	r3, [pc, #72]	; (8007820 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80077d8:	617b      	str	r3, [r7, #20]
      break;
 80077da:	e005      	b.n	80077e8 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80077dc:	4b11      	ldr	r3, [pc, #68]	; (8007824 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80077de:	617b      	str	r3, [r7, #20]
      break;
 80077e0:	e002      	b.n	80077e8 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 80077e2:	4b0f      	ldr	r3, [pc, #60]	; (8007820 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80077e4:	617b      	str	r3, [r7, #20]
      break;
 80077e6:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2b08      	cmp	r3, #8
 80077ec:	d113      	bne.n	8007816 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80077ee:	f7ff ff43 	bl	8007678 <LL_RCC_PLL_GetDivider>
 80077f2:	4602      	mov	r2, r0
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	fbb3 f4f2 	udiv	r4, r3, r2
 80077fa:	f7ff ff21 	bl	8007640 <LL_RCC_PLL_GetN>
 80077fe:	4603      	mov	r3, r0
 8007800:	fb03 f404 	mul.w	r4, r3, r4
 8007804:	f7ff ff2a 	bl	800765c <LL_RCC_PLL_GetP>
 8007808:	4603      	mov	r3, r0
 800780a:	0c1b      	lsrs	r3, r3, #16
 800780c:	3301      	adds	r3, #1
 800780e:	005b      	lsls	r3, r3, #1
 8007810:	fbb4 f3f3 	udiv	r3, r4, r3
 8007814:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8007816:	693b      	ldr	r3, [r7, #16]
}
 8007818:	4618      	mov	r0, r3
 800781a:	371c      	adds	r7, #28
 800781c:	46bd      	mov	sp, r7
 800781e:	bd90      	pop	{r4, r7, pc}
 8007820:	00f42400 	.word	0x00f42400
 8007824:	00b71b00 	.word	0x00b71b00

08007828 <LL_USART_IsEnabled>:
{
 8007828:	b480      	push	{r7}
 800782a:	b083      	sub	sp, #12
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007838:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800783c:	bf0c      	ite	eq
 800783e:	2301      	moveq	r3, #1
 8007840:	2300      	movne	r3, #0
 8007842:	b2db      	uxtb	r3, r3
}
 8007844:	4618      	mov	r0, r3
 8007846:	370c      	adds	r7, #12
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <LL_USART_SetStopBitsLength>:
{
 8007850:	b480      	push	{r7}
 8007852:	b083      	sub	sp, #12
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	691b      	ldr	r3, [r3, #16]
 800785e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	431a      	orrs	r2, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	611a      	str	r2, [r3, #16]
}
 800786a:	bf00      	nop
 800786c:	370c      	adds	r7, #12
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr

08007876 <LL_USART_SetHWFlowCtrl>:
{
 8007876:	b480      	push	{r7}
 8007878:	b083      	sub	sp, #12
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
 800787e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	695b      	ldr	r3, [r3, #20]
 8007884:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	431a      	orrs	r2, r3
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	615a      	str	r2, [r3, #20]
}
 8007890:	bf00      	nop
 8007892:	370c      	adds	r7, #12
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <LL_USART_SetBaudRate>:
{
 800789c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80078a0:	b0c0      	sub	sp, #256	; 0x100
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80078a8:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 80078ac:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80078b0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80078b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078bc:	f040 810c 	bne.w	8007ad8 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80078c0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80078c4:	2200      	movs	r2, #0
 80078c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80078ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80078ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80078d2:	4622      	mov	r2, r4
 80078d4:	462b      	mov	r3, r5
 80078d6:	1891      	adds	r1, r2, r2
 80078d8:	6639      	str	r1, [r7, #96]	; 0x60
 80078da:	415b      	adcs	r3, r3
 80078dc:	667b      	str	r3, [r7, #100]	; 0x64
 80078de:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80078e2:	4621      	mov	r1, r4
 80078e4:	eb12 0801 	adds.w	r8, r2, r1
 80078e8:	4629      	mov	r1, r5
 80078ea:	eb43 0901 	adc.w	r9, r3, r1
 80078ee:	f04f 0200 	mov.w	r2, #0
 80078f2:	f04f 0300 	mov.w	r3, #0
 80078f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80078fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80078fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007902:	4690      	mov	r8, r2
 8007904:	4699      	mov	r9, r3
 8007906:	4623      	mov	r3, r4
 8007908:	eb18 0303 	adds.w	r3, r8, r3
 800790c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007910:	462b      	mov	r3, r5
 8007912:	eb49 0303 	adc.w	r3, r9, r3
 8007916:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800791a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800791e:	2200      	movs	r2, #0
 8007920:	469a      	mov	sl, r3
 8007922:	4693      	mov	fp, r2
 8007924:	eb1a 030a 	adds.w	r3, sl, sl
 8007928:	65bb      	str	r3, [r7, #88]	; 0x58
 800792a:	eb4b 030b 	adc.w	r3, fp, fp
 800792e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007930:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007934:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007938:	f7f8 ff6c 	bl	8000814 <__aeabi_uldivmod>
 800793c:	4602      	mov	r2, r0
 800793e:	460b      	mov	r3, r1
 8007940:	4b64      	ldr	r3, [pc, #400]	; (8007ad4 <LL_USART_SetBaudRate+0x238>)
 8007942:	fba3 2302 	umull	r2, r3, r3, r2
 8007946:	095b      	lsrs	r3, r3, #5
 8007948:	b29b      	uxth	r3, r3
 800794a:	011b      	lsls	r3, r3, #4
 800794c:	b29c      	uxth	r4, r3
 800794e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007952:	2200      	movs	r2, #0
 8007954:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007958:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800795c:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8007960:	4642      	mov	r2, r8
 8007962:	464b      	mov	r3, r9
 8007964:	1891      	adds	r1, r2, r2
 8007966:	6539      	str	r1, [r7, #80]	; 0x50
 8007968:	415b      	adcs	r3, r3
 800796a:	657b      	str	r3, [r7, #84]	; 0x54
 800796c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007970:	4641      	mov	r1, r8
 8007972:	1851      	adds	r1, r2, r1
 8007974:	64b9      	str	r1, [r7, #72]	; 0x48
 8007976:	4649      	mov	r1, r9
 8007978:	414b      	adcs	r3, r1
 800797a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800797c:	f04f 0200 	mov.w	r2, #0
 8007980:	f04f 0300 	mov.w	r3, #0
 8007984:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8007988:	4659      	mov	r1, fp
 800798a:	00cb      	lsls	r3, r1, #3
 800798c:	4651      	mov	r1, sl
 800798e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007992:	4651      	mov	r1, sl
 8007994:	00ca      	lsls	r2, r1, #3
 8007996:	4610      	mov	r0, r2
 8007998:	4619      	mov	r1, r3
 800799a:	4603      	mov	r3, r0
 800799c:	4642      	mov	r2, r8
 800799e:	189b      	adds	r3, r3, r2
 80079a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80079a4:	464b      	mov	r3, r9
 80079a6:	460a      	mov	r2, r1
 80079a8:	eb42 0303 	adc.w	r3, r2, r3
 80079ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80079b0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80079b4:	2200      	movs	r2, #0
 80079b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80079ba:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80079be:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80079c2:	460b      	mov	r3, r1
 80079c4:	18db      	adds	r3, r3, r3
 80079c6:	643b      	str	r3, [r7, #64]	; 0x40
 80079c8:	4613      	mov	r3, r2
 80079ca:	eb42 0303 	adc.w	r3, r2, r3
 80079ce:	647b      	str	r3, [r7, #68]	; 0x44
 80079d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80079d4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80079d8:	f7f8 ff1c 	bl	8000814 <__aeabi_uldivmod>
 80079dc:	4602      	mov	r2, r0
 80079de:	460b      	mov	r3, r1
 80079e0:	4611      	mov	r1, r2
 80079e2:	4b3c      	ldr	r3, [pc, #240]	; (8007ad4 <LL_USART_SetBaudRate+0x238>)
 80079e4:	fba3 2301 	umull	r2, r3, r3, r1
 80079e8:	095b      	lsrs	r3, r3, #5
 80079ea:	2264      	movs	r2, #100	; 0x64
 80079ec:	fb02 f303 	mul.w	r3, r2, r3
 80079f0:	1acb      	subs	r3, r1, r3
 80079f2:	00db      	lsls	r3, r3, #3
 80079f4:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80079f8:	4b36      	ldr	r3, [pc, #216]	; (8007ad4 <LL_USART_SetBaudRate+0x238>)
 80079fa:	fba3 2302 	umull	r2, r3, r3, r2
 80079fe:	095b      	lsrs	r3, r3, #5
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	005b      	lsls	r3, r3, #1
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	4423      	add	r3, r4
 8007a0e:	b29c      	uxth	r4, r3
 8007a10:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007a14:	2200      	movs	r2, #0
 8007a16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a1a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007a1e:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8007a22:	4642      	mov	r2, r8
 8007a24:	464b      	mov	r3, r9
 8007a26:	1891      	adds	r1, r2, r2
 8007a28:	63b9      	str	r1, [r7, #56]	; 0x38
 8007a2a:	415b      	adcs	r3, r3
 8007a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a2e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007a32:	4641      	mov	r1, r8
 8007a34:	1851      	adds	r1, r2, r1
 8007a36:	6339      	str	r1, [r7, #48]	; 0x30
 8007a38:	4649      	mov	r1, r9
 8007a3a:	414b      	adcs	r3, r1
 8007a3c:	637b      	str	r3, [r7, #52]	; 0x34
 8007a3e:	f04f 0200 	mov.w	r2, #0
 8007a42:	f04f 0300 	mov.w	r3, #0
 8007a46:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007a4a:	4659      	mov	r1, fp
 8007a4c:	00cb      	lsls	r3, r1, #3
 8007a4e:	4651      	mov	r1, sl
 8007a50:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a54:	4651      	mov	r1, sl
 8007a56:	00ca      	lsls	r2, r1, #3
 8007a58:	4610      	mov	r0, r2
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	4642      	mov	r2, r8
 8007a60:	189b      	adds	r3, r3, r2
 8007a62:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a66:	464b      	mov	r3, r9
 8007a68:	460a      	mov	r2, r1
 8007a6a:	eb42 0303 	adc.w	r3, r2, r3
 8007a6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007a72:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007a76:	2200      	movs	r2, #0
 8007a78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a7c:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8007a80:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8007a84:	460b      	mov	r3, r1
 8007a86:	18db      	adds	r3, r3, r3
 8007a88:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	eb42 0303 	adc.w	r3, r2, r3
 8007a90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007a96:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8007a9a:	f7f8 febb 	bl	8000814 <__aeabi_uldivmod>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	4b0c      	ldr	r3, [pc, #48]	; (8007ad4 <LL_USART_SetBaudRate+0x238>)
 8007aa4:	fba3 1302 	umull	r1, r3, r3, r2
 8007aa8:	095b      	lsrs	r3, r3, #5
 8007aaa:	2164      	movs	r1, #100	; 0x64
 8007aac:	fb01 f303 	mul.w	r3, r1, r3
 8007ab0:	1ad3      	subs	r3, r2, r3
 8007ab2:	00db      	lsls	r3, r3, #3
 8007ab4:	3332      	adds	r3, #50	; 0x32
 8007ab6:	4a07      	ldr	r2, [pc, #28]	; (8007ad4 <LL_USART_SetBaudRate+0x238>)
 8007ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8007abc:	095b      	lsrs	r3, r3, #5
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	f003 0307 	and.w	r3, r3, #7
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	4423      	add	r3, r4
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	461a      	mov	r2, r3
 8007acc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ad0:	609a      	str	r2, [r3, #8]
}
 8007ad2:	e108      	b.n	8007ce6 <LL_USART_SetBaudRate+0x44a>
 8007ad4:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8007ad8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007adc:	2200      	movs	r2, #0
 8007ade:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007ae2:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007ae6:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8007aea:	4642      	mov	r2, r8
 8007aec:	464b      	mov	r3, r9
 8007aee:	1891      	adds	r1, r2, r2
 8007af0:	6239      	str	r1, [r7, #32]
 8007af2:	415b      	adcs	r3, r3
 8007af4:	627b      	str	r3, [r7, #36]	; 0x24
 8007af6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007afa:	4641      	mov	r1, r8
 8007afc:	1854      	adds	r4, r2, r1
 8007afe:	4649      	mov	r1, r9
 8007b00:	eb43 0501 	adc.w	r5, r3, r1
 8007b04:	f04f 0200 	mov.w	r2, #0
 8007b08:	f04f 0300 	mov.w	r3, #0
 8007b0c:	00eb      	lsls	r3, r5, #3
 8007b0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b12:	00e2      	lsls	r2, r4, #3
 8007b14:	4614      	mov	r4, r2
 8007b16:	461d      	mov	r5, r3
 8007b18:	4643      	mov	r3, r8
 8007b1a:	18e3      	adds	r3, r4, r3
 8007b1c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007b20:	464b      	mov	r3, r9
 8007b22:	eb45 0303 	adc.w	r3, r5, r3
 8007b26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007b2a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007b34:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8007b38:	f04f 0200 	mov.w	r2, #0
 8007b3c:	f04f 0300 	mov.w	r3, #0
 8007b40:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8007b44:	4629      	mov	r1, r5
 8007b46:	008b      	lsls	r3, r1, #2
 8007b48:	4621      	mov	r1, r4
 8007b4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b4e:	4621      	mov	r1, r4
 8007b50:	008a      	lsls	r2, r1, #2
 8007b52:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8007b56:	f7f8 fe5d 	bl	8000814 <__aeabi_uldivmod>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	4b65      	ldr	r3, [pc, #404]	; (8007cf4 <LL_USART_SetBaudRate+0x458>)
 8007b60:	fba3 2302 	umull	r2, r3, r3, r2
 8007b64:	095b      	lsrs	r3, r3, #5
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	011b      	lsls	r3, r3, #4
 8007b6a:	b29c      	uxth	r4, r3
 8007b6c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007b70:	2200      	movs	r2, #0
 8007b72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007b76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007b7a:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8007b7e:	4642      	mov	r2, r8
 8007b80:	464b      	mov	r3, r9
 8007b82:	1891      	adds	r1, r2, r2
 8007b84:	61b9      	str	r1, [r7, #24]
 8007b86:	415b      	adcs	r3, r3
 8007b88:	61fb      	str	r3, [r7, #28]
 8007b8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b8e:	4641      	mov	r1, r8
 8007b90:	1851      	adds	r1, r2, r1
 8007b92:	6139      	str	r1, [r7, #16]
 8007b94:	4649      	mov	r1, r9
 8007b96:	414b      	adcs	r3, r1
 8007b98:	617b      	str	r3, [r7, #20]
 8007b9a:	f04f 0200 	mov.w	r2, #0
 8007b9e:	f04f 0300 	mov.w	r3, #0
 8007ba2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007ba6:	4659      	mov	r1, fp
 8007ba8:	00cb      	lsls	r3, r1, #3
 8007baa:	4651      	mov	r1, sl
 8007bac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007bb0:	4651      	mov	r1, sl
 8007bb2:	00ca      	lsls	r2, r1, #3
 8007bb4:	4610      	mov	r0, r2
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	4603      	mov	r3, r0
 8007bba:	4642      	mov	r2, r8
 8007bbc:	189b      	adds	r3, r3, r2
 8007bbe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007bc2:	464b      	mov	r3, r9
 8007bc4:	460a      	mov	r2, r1
 8007bc6:	eb42 0303 	adc.w	r3, r2, r3
 8007bca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007bce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007bd8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8007bdc:	f04f 0200 	mov.w	r2, #0
 8007be0:	f04f 0300 	mov.w	r3, #0
 8007be4:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8007be8:	4649      	mov	r1, r9
 8007bea:	008b      	lsls	r3, r1, #2
 8007bec:	4641      	mov	r1, r8
 8007bee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007bf2:	4641      	mov	r1, r8
 8007bf4:	008a      	lsls	r2, r1, #2
 8007bf6:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8007bfa:	f7f8 fe0b 	bl	8000814 <__aeabi_uldivmod>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	460b      	mov	r3, r1
 8007c02:	4611      	mov	r1, r2
 8007c04:	4b3b      	ldr	r3, [pc, #236]	; (8007cf4 <LL_USART_SetBaudRate+0x458>)
 8007c06:	fba3 2301 	umull	r2, r3, r3, r1
 8007c0a:	095b      	lsrs	r3, r3, #5
 8007c0c:	2264      	movs	r2, #100	; 0x64
 8007c0e:	fb02 f303 	mul.w	r3, r2, r3
 8007c12:	1acb      	subs	r3, r1, r3
 8007c14:	011b      	lsls	r3, r3, #4
 8007c16:	3332      	adds	r3, #50	; 0x32
 8007c18:	4a36      	ldr	r2, [pc, #216]	; (8007cf4 <LL_USART_SetBaudRate+0x458>)
 8007c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c1e:	095b      	lsrs	r3, r3, #5
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	4423      	add	r3, r4
 8007c2a:	b29c      	uxth	r4, r3
 8007c2c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007c30:	2200      	movs	r2, #0
 8007c32:	67bb      	str	r3, [r7, #120]	; 0x78
 8007c34:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007c36:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007c3a:	4642      	mov	r2, r8
 8007c3c:	464b      	mov	r3, r9
 8007c3e:	1891      	adds	r1, r2, r2
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	415b      	adcs	r3, r3
 8007c44:	60fb      	str	r3, [r7, #12]
 8007c46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c4a:	4641      	mov	r1, r8
 8007c4c:	1851      	adds	r1, r2, r1
 8007c4e:	6039      	str	r1, [r7, #0]
 8007c50:	4649      	mov	r1, r9
 8007c52:	414b      	adcs	r3, r1
 8007c54:	607b      	str	r3, [r7, #4]
 8007c56:	f04f 0200 	mov.w	r2, #0
 8007c5a:	f04f 0300 	mov.w	r3, #0
 8007c5e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007c62:	4659      	mov	r1, fp
 8007c64:	00cb      	lsls	r3, r1, #3
 8007c66:	4651      	mov	r1, sl
 8007c68:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c6c:	4651      	mov	r1, sl
 8007c6e:	00ca      	lsls	r2, r1, #3
 8007c70:	4610      	mov	r0, r2
 8007c72:	4619      	mov	r1, r3
 8007c74:	4603      	mov	r3, r0
 8007c76:	4642      	mov	r2, r8
 8007c78:	189b      	adds	r3, r3, r2
 8007c7a:	673b      	str	r3, [r7, #112]	; 0x70
 8007c7c:	464b      	mov	r3, r9
 8007c7e:	460a      	mov	r2, r1
 8007c80:	eb42 0303 	adc.w	r3, r2, r3
 8007c84:	677b      	str	r3, [r7, #116]	; 0x74
 8007c86:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c8e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007c90:	f04f 0200 	mov.w	r2, #0
 8007c94:	f04f 0300 	mov.w	r3, #0
 8007c98:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8007c9c:	4649      	mov	r1, r9
 8007c9e:	008b      	lsls	r3, r1, #2
 8007ca0:	4641      	mov	r1, r8
 8007ca2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ca6:	4641      	mov	r1, r8
 8007ca8:	008a      	lsls	r2, r1, #2
 8007caa:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8007cae:	f7f8 fdb1 	bl	8000814 <__aeabi_uldivmod>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	460b      	mov	r3, r1
 8007cb6:	4b0f      	ldr	r3, [pc, #60]	; (8007cf4 <LL_USART_SetBaudRate+0x458>)
 8007cb8:	fba3 1302 	umull	r1, r3, r3, r2
 8007cbc:	095b      	lsrs	r3, r3, #5
 8007cbe:	2164      	movs	r1, #100	; 0x64
 8007cc0:	fb01 f303 	mul.w	r3, r1, r3
 8007cc4:	1ad3      	subs	r3, r2, r3
 8007cc6:	011b      	lsls	r3, r3, #4
 8007cc8:	3332      	adds	r3, #50	; 0x32
 8007cca:	4a0a      	ldr	r2, [pc, #40]	; (8007cf4 <LL_USART_SetBaudRate+0x458>)
 8007ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8007cd0:	095b      	lsrs	r3, r3, #5
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	f003 030f 	and.w	r3, r3, #15
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	4423      	add	r3, r4
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	461a      	mov	r2, r3
 8007ce0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ce4:	609a      	str	r2, [r3, #8]
}
 8007ce6:	bf00      	nop
 8007ce8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007cec:	46bd      	mov	sp, r7
 8007cee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007cf2:	bf00      	nop
 8007cf4:	51eb851f 	.word	0x51eb851f

08007cf8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b088      	sub	sp, #32
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8007d02:	2301      	movs	r3, #1
 8007d04:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8007d06:	2300      	movs	r3, #0
 8007d08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f7ff fd8c 	bl	8007828 <LL_USART_IsEnabled>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d150      	bne.n	8007db8 <LL_USART_Init+0xc0>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	68db      	ldr	r3, [r3, #12]
 8007d1a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007d1e:	f023 030c 	bic.w	r3, r3, #12
 8007d22:	683a      	ldr	r2, [r7, #0]
 8007d24:	6851      	ldr	r1, [r2, #4]
 8007d26:	683a      	ldr	r2, [r7, #0]
 8007d28:	68d2      	ldr	r2, [r2, #12]
 8007d2a:	4311      	orrs	r1, r2
 8007d2c:	683a      	ldr	r2, [r7, #0]
 8007d2e:	6912      	ldr	r2, [r2, #16]
 8007d30:	4311      	orrs	r1, r2
 8007d32:	683a      	ldr	r2, [r7, #0]
 8007d34:	6992      	ldr	r2, [r2, #24]
 8007d36:	430a      	orrs	r2, r1
 8007d38:	431a      	orrs	r2, r3
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	4619      	mov	r1, r3
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f7ff fd83 	bl	8007850 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	695b      	ldr	r3, [r3, #20]
 8007d4e:	4619      	mov	r1, r3
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f7ff fd90 	bl	8007876 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8007d56:	f107 0308 	add.w	r3, r7, #8
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f7ff fc9a 	bl	8007694 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	4a18      	ldr	r2, [pc, #96]	; (8007dc4 <LL_USART_Init+0xcc>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d102      	bne.n	8007d6e <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	61bb      	str	r3, [r7, #24]
 8007d6c:	e013      	b.n	8007d96 <LL_USART_Init+0x9e>
    }
    else if (USARTx == USART2)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	4a15      	ldr	r2, [pc, #84]	; (8007dc8 <LL_USART_Init+0xd0>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d102      	bne.n	8007d7c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	61bb      	str	r3, [r7, #24]
 8007d7a:	e00c      	b.n	8007d96 <LL_USART_Init+0x9e>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	4a13      	ldr	r2, [pc, #76]	; (8007dcc <LL_USART_Init+0xd4>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d102      	bne.n	8007d8a <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	61bb      	str	r3, [r7, #24]
 8007d88:	e005      	b.n	8007d96 <LL_USART_Init+0x9e>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4a10      	ldr	r2, [pc, #64]	; (8007dd0 <LL_USART_Init+0xd8>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d101      	bne.n	8007d96 <LL_USART_Init+0x9e>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d00d      	beq.n	8007db8 <LL_USART_Init+0xc0>
        && (USART_InitStruct->BaudRate != 0U))
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d009      	beq.n	8007db8 <LL_USART_Init+0xc0>
    {
      status = SUCCESS;
 8007da4:	2300      	movs	r3, #0
 8007da6:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	699a      	ldr	r2, [r3, #24]
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	69b9      	ldr	r1, [r7, #24]
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f7ff fd72 	bl	800789c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8007db8:	7ffb      	ldrb	r3, [r7, #31]
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3720      	adds	r7, #32
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	40011000 	.word	0x40011000
 8007dc8:	40004400 	.word	0x40004400
 8007dcc:	40004800 	.word	0x40004800
 8007dd0:	40011400 	.word	0x40011400

08007dd4 <memcmp>:
 8007dd4:	b510      	push	{r4, lr}
 8007dd6:	3901      	subs	r1, #1
 8007dd8:	4402      	add	r2, r0
 8007dda:	4290      	cmp	r0, r2
 8007ddc:	d101      	bne.n	8007de2 <memcmp+0xe>
 8007dde:	2000      	movs	r0, #0
 8007de0:	e005      	b.n	8007dee <memcmp+0x1a>
 8007de2:	7803      	ldrb	r3, [r0, #0]
 8007de4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007de8:	42a3      	cmp	r3, r4
 8007dea:	d001      	beq.n	8007df0 <memcmp+0x1c>
 8007dec:	1b18      	subs	r0, r3, r4
 8007dee:	bd10      	pop	{r4, pc}
 8007df0:	3001      	adds	r0, #1
 8007df2:	e7f2      	b.n	8007dda <memcmp+0x6>

08007df4 <memset>:
 8007df4:	4402      	add	r2, r0
 8007df6:	4603      	mov	r3, r0
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d100      	bne.n	8007dfe <memset+0xa>
 8007dfc:	4770      	bx	lr
 8007dfe:	f803 1b01 	strb.w	r1, [r3], #1
 8007e02:	e7f9      	b.n	8007df8 <memset+0x4>

08007e04 <__libc_init_array>:
 8007e04:	b570      	push	{r4, r5, r6, lr}
 8007e06:	4d0d      	ldr	r5, [pc, #52]	; (8007e3c <__libc_init_array+0x38>)
 8007e08:	4c0d      	ldr	r4, [pc, #52]	; (8007e40 <__libc_init_array+0x3c>)
 8007e0a:	1b64      	subs	r4, r4, r5
 8007e0c:	10a4      	asrs	r4, r4, #2
 8007e0e:	2600      	movs	r6, #0
 8007e10:	42a6      	cmp	r6, r4
 8007e12:	d109      	bne.n	8007e28 <__libc_init_array+0x24>
 8007e14:	4d0b      	ldr	r5, [pc, #44]	; (8007e44 <__libc_init_array+0x40>)
 8007e16:	4c0c      	ldr	r4, [pc, #48]	; (8007e48 <__libc_init_array+0x44>)
 8007e18:	f000 f818 	bl	8007e4c <_init>
 8007e1c:	1b64      	subs	r4, r4, r5
 8007e1e:	10a4      	asrs	r4, r4, #2
 8007e20:	2600      	movs	r6, #0
 8007e22:	42a6      	cmp	r6, r4
 8007e24:	d105      	bne.n	8007e32 <__libc_init_array+0x2e>
 8007e26:	bd70      	pop	{r4, r5, r6, pc}
 8007e28:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e2c:	4798      	blx	r3
 8007e2e:	3601      	adds	r6, #1
 8007e30:	e7ee      	b.n	8007e10 <__libc_init_array+0xc>
 8007e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e36:	4798      	blx	r3
 8007e38:	3601      	adds	r6, #1
 8007e3a:	e7f2      	b.n	8007e22 <__libc_init_array+0x1e>
 8007e3c:	08007e94 	.word	0x08007e94
 8007e40:	08007e94 	.word	0x08007e94
 8007e44:	08007e94 	.word	0x08007e94
 8007e48:	08007e98 	.word	0x08007e98

08007e4c <_init>:
 8007e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e4e:	bf00      	nop
 8007e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e52:	bc08      	pop	{r3}
 8007e54:	469e      	mov	lr, r3
 8007e56:	4770      	bx	lr

08007e58 <_fini>:
 8007e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e5a:	bf00      	nop
 8007e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e5e:	bc08      	pop	{r3}
 8007e60:	469e      	mov	lr, r3
 8007e62:	4770      	bx	lr
